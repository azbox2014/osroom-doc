{"docs": [{"title": "文档", "text": "介绍  OSROOM 是 基于 Python3  Flask 开发 的 开源 Web 系统 ,  也 是 一个 CMS ( 内容 管理 系统 管理系 管理系统 )  可以 用来 建立 企业 官网 ,  个人 博客 网站 ,  提供 Rest  Api 请求 数据 可以 作为 微信 小 程序 的 服务 服务端  运行 平台  可以 运行 于 Linux 系统 ,  Windows 未 测试  支持  插件 开发 与 安装  主题 开发 与 安装  默认 主题 支持 Markdown 编辑 编辑器 与富 文本 编辑 文本编辑 器  易 扩展  版本  目前 最新 版本 :  1.0  Beta  Demo  https : / / demo . osroom . com  ( 该站 已经 停止 服务 )  Fork  me  on  GitHub  https : / / github . com / osroom / osroom  OSROOM 文档 评论 与 反馈  进入 Github 评论  OSROOM  Bug 反馈 与 评论  Github  issues  bug  进入 Github 评论", "location": ""}, {"title": "介绍", "text": "OSROOM 是 基于 Python3  Flask 开发 的 开源 Web 系统 ,  也 是 一个 CMS ( 内容 管理 系统 管理系 管理系统 )  可以 用来 建立 企业 官网 ,  个人 博客 网站 ,  提供 Rest  Api 请求 数据 可以 作为 微信 小 程序 的 服务 服务端", "location": "#_1"}, {"title": "& nbsp ; & nbsp ; 运行 平台", "text": "可以 运行 于 Linux 系统 ,  Windows 未 测试", "location": "#_2"}, {"title": "支持", "text": "插件 开发 与 安装  主题 开发 与 安装  默认 主题 支持 Markdown 编辑 编辑器 与富 文本 编辑 文本编辑 器  易 扩展", "location": "#_3"}, {"title": "& nbsp ; & nbsp ; 版本", "text": "目前 最新 版本 :  1.0  Beta", "location": "#_4"}, {"title": "& nbsp ; & nbsp ; Demo", "text": "https : / / demo . osroom . com  ( 该站 已经 停止 服务 )", "location": "#demo"}, {"title": "& nbsp ; & nbsp ; Fork  me  on  GitHub", "text": "https : / / github . com / osroom / osroom", "location": "#fork-me-on-github"}, {"title": "OSROOM 文档 评论 与 反馈", "text": "进入 Github 评论", "location": "#osroom"}, {"title": "OSROOM  Bug 反馈 与 评论", "text": "Github  issues  bug  进入 Github 评论", "location": "#osroom-bug"}, {"title": "Api  call", "text": "Api 请求 验证  Api 请求 验证 分 2 种 情况  情况 1 . 客户 客户端 为 浏览 浏览器 ,  这里 的 定义 是 客户 客户端 网页 是 请求 OSROOM 获取 的 html 网页 .  因为 html 经过 了 OSROOM 服务 务器 服务器 Jinjia2 模板 引擎 渲染 ,  带上 了 随机 生成 的 csrf _ token  所以 在 html 能 获取 到 csrf _ token ,  具体 使用 如下 教程  情况 2 . 客户 客户端 为 APP 或 小 程序 ,  也 就是 客户 客户端 和 服务 务器 服务器 服务器时 完全 分开 的 .  这时 时候 这时候 就要 使用 JWT 方式 验证 ,  具体 如下 教程  CsrfToken 验证  获取 与 使用 CsrfToken  每个 经过 OSROOM 后 端的 html 页面 都 会 带上 一个 CsrfToken ,  具体 使用 方式 如下  使用 Jinjia2 语法 获取  { { csrf _ token ( ) } }  每 一个 Api 的 请求 都 需要 带上 CsrfToken ,  作为 验证 令牌 .  所以 可以 在 html  < head >  与  < head / >  间 写入 如下 代码  < script  type = \" text / javascript \" >  / / 设置 csrf  token ,  否则 无法 请求 api 数据 ( 保证 请求 数据 的 网页 是 自己 服务 务器 服务器 的 网页 )  var  csrftoken  =  \" { {  csrf _ token ( )  } } \"  / / 获取 token  $ . ajaxSetup ( {  beforeSend :  function ( xhr )  {  / /  头部 带上 参数 X - CSRFToken ,  值为 上面 通过 JinJia2 获取 到 的 csrftoken  xhr . setRequestHeader ( \" X - CSRFToken \" ,  csrftoken ) ;  }  } ) ;  < / script >  浏览 浏览器 F12 可以 看到 我们 写入 的 代码 中 的 CSRFToken ,  如图  JWT 验证 ( Token )  使用 说明  SecretToken  与  AccessToken  用于 在 无  CsrfToken  时 ,  调用 API 请求 的 一个 客户 客户端 令牌 ,  以 验证 客户 客户端 是否 为 伪造 的 .  SecretToken 是 长期 可用 验证 令牌 ( 除非 你 停用 或者 删除 了 它 ) ,  需要 保存 在 客户 客户端 使用 ,  主要 用于 获取  AccessToken  .  使用 令牌 时 ,  可以 使用 SecretToken 做 令牌 或者 OSR - ClientId 与 AccessToken 组合 做 令牌 ( 见 使用 方式 ) .  为了 减少 SecretToken 的 暴露 风险 ,  发送 Api 请求 时 ,  尽量 使用  OSR - ClientId  和  AccessToken  组合 作为 客户 客户端 验证 令牌 .  当 没有 获取 过 AccessToken 或者 AccessToken 失效 时 ,  请 通过  / api / token / access - token  获取 新 的 AccessToken  ( 具体 请 查看 / api / token / access - token 文档 ) .  获取 AccessToken 时 ,  只能 使用 SecretToken 作为 客户 客户端 令牌 验证 . ( 建议 使用 https )  在 http 请求 中 设置 请求 头  OSR - RestToken : \" SecretToken  xxxxx \"  或  OSR - RestToken : \" AccessToken  xxxxx \"  和  OSR - ClientId : \" xxxxx \"  获取 AccessToken  第一 一次 第一次 获取  AccessToke  n ,  首先 去 OSROOM 管理 端 获取  SecretToken  ,  如图  然后 GET 请求  / api / token / access - token  获取 一个 新 的 AccessToken  请求 时 headers 参数 OSR - RestToken 值为  SecretToken  为 客户 客户端 令牌 ,  如图 .  结果 返回 AccessToken 和 CliendId  如果 请求  / api / token / access - token  的 时候 ,  有 带上  OSR - CliendId  ,  则 系统 不会 生成 新 的 CliendId  如下 图 ,  结果 返回 的 CliendId 和 请求 时 带上 的 一样  请求 API 获取 & 修改 数据  对于 不 需要 登录 验证 的 请求 验证 如下 :  headers 参数 OSR - RestToken 值为  AccessToken  和 参数 OSR - CliendId 值为  CliendId  登录 获取 BearerToken  请求 Api ( / api / sign - in ) 获取  BearerToken  如下 图 , 登录 时 也 headers 页 需要  AccessToken  和  CliendId  作为 客户 客户端 令牌  headers 参数 OSR - RestToken 值为  AccessToken  和 参数 OSR - CliendId 值为  CliendId  注意  :  该 请求 还 得 带上 Api 请求 参数 username ,  password ,  use _ jwt _ auth  客户 客户端 保存 好 获取 到 的 auth _ token ( 也 就是 下面 要 用到 的 BearerToken )  对于 需要 登录 验证 的 API 请求 如下 * *  和 上面 不多 差不多 ,  也 就 多 了 一个 headers 参数  OSR - BearerToken  ,  值为 登录 成功 时 获取 的 auth _ token  注销 登录  注销 登录 如下 ,  注销 后 前面 所 请求 的 AccessToken  和  BearerToken 将 失效", "location": "api/api_call/"}, {"title": "Api 请求 验证", "text": "Api 请求 验证 分 2 种 情况  情况 1 . 客户 客户端 为 浏览 浏览器 ,  这里 的 定义 是 客户 客户端 网页 是 请求 OSROOM 获取 的 html 网页 .  因为 html 经过 了 OSROOM 服务 务器 服务器 Jinjia2 模板 引擎 渲染 ,  带上 了 随机 生成 的 csrf _ token  所以 在 html 能 获取 到 csrf _ token ,  具体 使用 如下 教程  情况 2 . 客户 客户端 为 APP 或 小 程序 ,  也 就是 客户 客户端 和 服务 务器 服务器 服务器时 完全 分开 的 .  这时 时候 这时候 就要 使用 JWT 方式 验证 ,  具体 如下 教程", "location": "api/api_call/#api"}, {"title": "CsrfToken 验证", "text": "", "location": "api/api_call/#csrftoken"}, {"title": "& nbsp ; & nbsp ; 获取 与 使用 CsrfToken", "text": "每个 经过 OSROOM 后 端的 html 页面 都 会 带上 一个 CsrfToken ,  具体 使用 方式 如下  使用 Jinjia2 语法 获取  { { csrf _ token ( ) } }  每 一个 Api 的 请求 都 需要 带上 CsrfToken ,  作为 验证 令牌 .  所以 可以 在 html  < head >  与  < head / >  间 写入 如下 代码  < script  type = \" text / javascript \" >  / / 设置 csrf  token ,  否则 无法 请求 api 数据 ( 保证 请求 数据 的 网页 是 自己 服务 务器 服务器 的 网页 )  var  csrftoken  =  \" { {  csrf _ token ( )  } } \"  / / 获取 token  $ . ajaxSetup ( {  beforeSend :  function ( xhr )  {  / /  头部 带上 参数 X - CSRFToken ,  值为 上面 通过 JinJia2 获取 到 的 csrftoken  xhr . setRequestHeader ( \" X - CSRFToken \" ,  csrftoken ) ;  }  } ) ;  < / script >  浏览 浏览器 F12 可以 看到 我们 写入 的 代码 中 的 CSRFToken ,  如图", "location": "api/api_call/#csrftoken_1"}, {"title": "JWT 验证 ( Token )", "text": "", "location": "api/api_call/#jwttoken"}, {"title": "& nbsp ; & nbsp ; 使用 说明", "text": "SecretToken  与  AccessToken  用于 在 无  CsrfToken  时 ,  调用 API 请求 的 一个 客户 客户端 令牌 ,  以 验证 客户 客户端 是否 为 伪造 的 .  SecretToken 是 长期 可用 验证 令牌 ( 除非 你 停用 或者 删除 了 它 ) ,  需要 保存 在 客户 客户端 使用 ,  主要 用于 获取  AccessToken  .  使用 令牌 时 ,  可以 使用 SecretToken 做 令牌 或者 OSR - ClientId 与 AccessToken 组合 做 令牌 ( 见 使用 方式 ) .  为了 减少 SecretToken 的 暴露 风险 ,  发送 Api 请求 时 ,  尽量 使用  OSR - ClientId  和  AccessToken  组合 作为 客户 客户端 验证 令牌 .  当 没有 获取 过 AccessToken 或者 AccessToken 失效 时 ,  请 通过  / api / token / access - token  获取 新 的 AccessToken  ( 具体 请 查看 / api / token / access - token 文档 ) .  获取 AccessToken 时 ,  只能 使用 SecretToken 作为 客户 客户端 令牌 验证 . ( 建议 使用 https )  在 http 请求 中 设置 请求 头  OSR - RestToken : \" SecretToken  xxxxx \"  或  OSR - RestToken : \" AccessToken  xxxxx \"  和  OSR - ClientId : \" xxxxx \"", "location": "api/api_call/#_1"}, {"title": "& nbsp ; & nbsp ; 获取 AccessToken", "text": "第一 一次 第一次 获取  AccessToke  n ,  首先 去 OSROOM 管理 端 获取  SecretToken  ,  如图  然后 GET 请求  / api / token / access - token  获取 一个 新 的 AccessToken  请求 时 headers 参数 OSR - RestToken 值为  SecretToken  为 客户 客户端 令牌 ,  如图 .  结果 返回 AccessToken 和 CliendId  如果 请求  / api / token / access - token  的 时候 ,  有 带上  OSR - CliendId  ,  则 系统 不会 生成 新 的 CliendId  如下 图 ,  结果 返回 的 CliendId 和 请求 时 带上 的 一样", "location": "api/api_call/#accesstoken"}, {"title": "& nbsp ; & nbsp ; 请求 API 获取 & amp ; 修改 数据", "text": "对于 不 需要 登录 验证 的 请求 验证 如下 :  headers 参数 OSR - RestToken 值为  AccessToken  和 参数 OSR - CliendId 值为  CliendId", "location": "api/api_call/#api_1"}, {"title": "& nbsp ; & nbsp ; 登录 获取 BearerToken", "text": "请求 Api ( / api / sign - in ) 获取  BearerToken  如下 图 , 登录 时 也 headers 页 需要  AccessToken  和  CliendId  作为 客户 客户端 令牌  headers 参数 OSR - RestToken 值为  AccessToken  和 参数 OSR - CliendId 值为  CliendId  注意  :  该 请求 还 得 带上 Api 请求 参数 username ,  password ,  use _ jwt _ auth  客户 客户端 保存 好 获取 到 的 auth _ token ( 也 就是 下面 要 用到 的 BearerToken )  对于 需要 登录 验证 的 API 请求 如下 * *  和 上面 不多 差不多 ,  也 就 多 了 一个 headers 参数  OSR - BearerToken  ,  值为 登录 成功 时 获取 的 auth _ token", "location": "api/api_call/#bearertoken"}, {"title": "& nbsp ; & nbsp ; 注销 登录", "text": "注销 登录 如下 ,  注销 后 前面 所 请求 的 AccessToken  和  BearerToken 将 失效", "location": "api/api_call/#_2"}, {"title": "Api  doc", "text": "Api 文档 说明  Account - data - availability  Api  : / api / account / data / availability  Methods  : GET  Permission  : unlimited  Login  auth  : Yes  Request  and  parameters :  GET :  查看 用户 户名 用户名 ， email , 个性 域 是否 可以 使用  field : < str > ,  username  or  email  or  custom _ domain  vaule : < str >  : return :  Account - self  Api  : / api / account / self  Methods  : GET  Permission  : unlimited  Login  auth  : Yes  Request  and  parameters :  GET :  提供 一个 user  id ,  获取 是否 时 当前 登录 用户  user _ id : < str >  : return :  Admin - role - permission  Api  : / api / admin / role / permission  Methods  : GET  Permission  : USER _ MANAGE  Login  auth  : Yes  Request  and  parameters :  GET :  获取 所有 的 权限 表  : return :  Admin - role  Api  : / api / admin / role  Methods  : GET ,  POST ,  PUT ,  DELETE  Permission  : USER _ MANAGE  Login  auth  : Yes  Request  and  parameters :  GET :  1 .  获取 指定 ID 的 角色  id : < str >  , role  id  2 . 分页 获取 全部 角色  page : < int > , 第几 几页 第几页 ， 默认 第 1 页  pre : < int > ,  每页 查询 多少 条  POST :  添加 一个 角色  name : < str >  instructions : < str >  default : < int  or  bool > ,  0  or  1  permissions : < array > ,  数组 ， 可以 给 角色 指定 多个 权重 ,  如 [ 1 ,  2 ,  4 ,  128 ]  PUT :  修改 一个 角色  id : < str > ,  role  id  name : < str >  instructions : < str >  default : < int > ,  0  or  1  permissions : < array > ,  数组 ， 可以 给 角色 指定 多个 权重 ,  如 [ 1 ,  2 ,  4 ,  128 ]  DELETE :  删除 角色  ids : < arry > ,  role  ids  Account - password - reset  Api  : / api / account / password / reset  Methods  : PUT  Permission  : USER  Login  auth  : Yes  Request  and  parameters :  PUT :  账户 密码 重设  now _ password : < str > , 目前 使用 的 密码  password : < str > ,  新密 密码 新密码  password2 : < str > ,  再次 确认 新密 密码 新密码  : return :  Account - password - retrieve  Api  : / api / account / password / retrieve  Methods  : PUT ,  POST  Permission  : unlimited  Login  auth  : Yes  Request  and  parameters :  PUT :  忘记 密码 , 重设  获取 验证 验证码 , 只 需要 传回 参数 email , return 回 一个 { code : { ' _ id ' : ' ' ,  str : ' ' , time : ' '  } }  设置 新密 密码 新密码 , 需要 全部 参数  email _ code : < str > ,  邮件 中 收到 的 验证 验证码  email : < str > ,  邮箱  password : < str > ,  新密 密码 新密码  password2 : < str > ,  再次 确认 密码  : return :  * * * ##  Api 文档 说明  Admin - user  Api  : / api / admin / user  Methods  : GET ,  PUT ,  DELETE  Permission  : USER _ MANAGE  Login  auth  : Yes  Request  and  parameters :  GET :  1 .  获取 指定 ID 的 用户 基本 信息  id : < str >  ,  user  id  2 . 分页 获取 所有 用户  status : < str > , 用户 状态 ， \" normal \"  or  \" inactive \"  or  \" cancelled \"  page : < int > , 第几 几页 第几页 ， 默认 第 1 页  pre : < int > ,  每页 查询 多少 条  keyword : < str > ,  Search  keywords ,  搜索 的 时候 使用  PUT :  1 . 编辑 用户  id : < str > ,  user  id  role _ id : < str > ,  role  id  active : < int > ,  0  or  1  2 . 激活 或 冻结 用户  op : < str > ,  为 \" activation \"  active : < int > ,  0  or  1 ,  0 为 冻结 ,  1 为 激活  ids : < array >  3 . 恢复 用户 , 将 状态 改为 未 删除  op : < str > ,  为 \" restore \"  ids : < array >  DELETE :  删除 用户 , 非 数据 据库 数据库 删除  ids : < array >  Admin - user - del  Api  : / api / admin / user / del  Methods  : DELETE  Permission  : IMPORTANT _ DATA _ DEL  Login  auth  : Yes  Request  and  parameters :  DELETE :  永久 删除 用户 , 数据 据库 数据库 中 删除  ids : < array >  permanent : < int >  0  or  1 ,  0 : 非 数据 据库 数据库 删除 , 只是 把 状态 改成 \" 删除 状态 \" , 为 1 : 表示 永久 删除 ,  Account - upload - avatar  Api  : / api / account / upload / avatar  Methods  : PUT  Permission  : USER  Login  auth  : Yes  Request  and  parameters :  PUT  头像 上传  注意 : 虽然 服务 的 提供 图片 裁剪 功能 ， 由于 耗费 服务 务器 资源 服务器 服务器资源 , 必要 非必要 情况 下 请 不要 使用 ， 请 再 客户 客户端 裁剪 好 再 上传 .  为了 防止 恶意 使用 裁剪 功能 ， 可以 在 管理 端中 设置 ( upload ) 中 关闭 上传 文件 裁剪 功能  * 提供 2 种 上传 方式 *  1 . 以 常规 文件 格式 文件格式 上传  upfile : < img  file > ， 头像 文件  preview _ w : < int > ,  图片 预览 宽度  tailoring : < dict > ,  ( 裁剪 功能 开启 后 才能 使用 ) , 裁剪 尺寸 ， 格式 : { x : 12 ,  y : 12 ,  height : 100 ,  width : 100 ,  rotate : 0 }  x 和 ｙ 为 裁剪 位置 ， x 距离 左边 距离 ,  y 距离 上边 距离 ,  width 截图 框 的 宽 ，  height 截图 框 的 高  2 . 以 base64 编码 上传  imgfile _ base : < str > , 以 base64 编码 上传 文件  : return :  Sign - up  Api  : / api / sign - up  Methods  : POST  Permission  : unlimited  Login  auth  :  Request  and  parameters :  POST :  1 . 普通 通用 用户 普通用户 使用 邮箱 注册 a  emial : < emial > ,  邮箱  username :  < str > ,  用户 户名 用户名  password :  < str > , 密码  password2 :  < str > , 再次 确认 密码  code : < str > ,  邮箱 收取 到 的 code  2 . 普通 通用 用户 普通用户 使用 手机 注册 a  mobile _ phone _ number : < int > 手机 号码 手机号 机号码 手机号码  username :  < str > ,  用户 户名 用户名  password :  < str > , 密码  password2 :  < str > , 再次 确认 密码  code : < str > ,  手机 收取 到 的 code  : return :  Sign - in  Api  : / api / sign - in  Methods  : PUT  Permission  : unlimited  Login  auth  :  Request  and  parameters :  PUT :  1 . 普通 登录  username :  < str > ,  用户 户名 用户名 或 邮箱 或 手机 号码 手机号 机号码 手机号码  password :  < str > , 密码  remember _ me : < bool > , 是否 保存 密码  next : < str > ,  登录 后要 返回 的 to  url ,  如果 为空 , 则 返回 设置 中 的 LOGIN _ TO  use _ jwt _ auth : < int > ,  是否 使用 jwt 验证 .  0  或  1 , 默认 为 0 不 使用  当 多次 输入 错误 密码 时 ， api 会 返回 open _ img _ verif _ code : true ,  表示 需要 图片 验证 验证码 验证 , 客户 客户端 应该 请求 验证 验证码 / api / vercode / image ,  然后 后 再次 提交 登录 时带 下 如下 参数  再次 提交 登录 时 需要 以下 两个 参数  code : < str > ,  图片 验证 验证码 中 的 字符  code _ url _ obj : < json > , 图片 验证 验证码 url  对象  : return :  2 . 第三 三方 第三方 登录  待 开发 插件 入口  Sign - in - third - party -  - callback  Api  : / api / sign - in / third - party /  / callback  Methods  : GET ,  PUT ,  POST  Permission  : unlimited  Login  auth  :  Request  and  parameters :  PUT  &  POST  &  GET :  第三 三方 第三方 平台 授权 登录 回调  platform :  平台 名称 ： 可以 是 wechat ,  qq ,  github ,  sina _ weibo ,  alipay ,  facebook ,  twitter 等  可 在 sys _ config . py 文件 中 配置 LOGIN _ PLATFORM  : return :  Sign - out  Api  : / api / sign - out  Methods  : GET ,  PUT  Permission  : unlimited  Login  auth  :  Request  and  parameters :  GET  or  PUT :  用户 登出 api  use _ jwt _ auth : < int > ,  是否 使用 jwt 验证 .  0  或  1 , 默认 为 0 不 使用 .  如果 是 jwt 验证 登录 信息 的 客户 客户端 use _ jwt _ auth 应为 1  : param  adm :  : return :  * * * ##  Api 文档 说明  Account - profile - public  Api  : / api / account / profile / public  Methods  : GET  Permission  : unlimited  Login  auth  :  Request  and  parameters :  GET :  获取 用户 公开 信息  user _ id : < str >  is _ basic : < int > ,  0 或 1 , 默认 1 .  为 １ 时 只 获取 最 基本 的 用户 信息  : return :  Account - basic  Api  : / api / account / basic  Methods  : PUT  Permission  : USER  Login  auth  : Yes  Request  and  parameters :  用户 基础 设置  PUT :  编辑 用户 基础 设置  username : < str > ,  新 的 用户 户名 用户名  custom _ domain : < str > ,  个性 域名  editor : < str > ,  ' rich _ text '  or  ' markdown '  如果 你 有 多个 文本 编辑 文本编辑 器 的话 ， 可以 加入 这个 选项  : return :  Account - profile  Api  : / api / account / profile  Methods  : GET ,  PUT  Permission  : USER  Login  auth  : Yes  Request  and  parameters :  用户 资料  GET :  获取 当前 登录 用户 的 信息  is _ basic : < int > ,  0 或 1 , 默认 1 .  为 １ 时 只 获取 最 基本 的 用户 信息  PUT  更新 用户 资料  gender : < str > ,  m  or  f  or  secret  birthday : < int  or  str > ,  The  format  must  be  \" YYYYMMDD \"  , such  as :  20170101  address : < dict > ,  The  format  must  be :  { countries : ' string ' ,  provinces : ' string ' ,  city : ' string ' ,  district : ' string ' ,  detailed : ' string ' }  info : < str >  : return :  Account - email  Api  : / api / account / email  Methods  : PUT  Permission  : USER  Login  auth  : Yes  Request  and  parameters :  PUT  账户 邮件 修改  email : < email > ,  要 绑定 的 新 邮箱  new _ email _ code : < str > ,  新 邮箱 收取 到 的 验证 验证码 , 用于 保证 绑定 的 邮箱 时 用户 自己 的  current _ email _ code : < str > ,  当前 邮箱 收取 的 验证 验证码 , 用于 保证 邮箱 修改 是 用户 自己 发起  password : < str > ,  账户 的 登录 密码  : return :  * * * ##  Api 文档 说明  Admin - message - send  Api  : / api / admin / message / send  Methods  : POST  Permission  : EDITOR  Login  auth  : Yes  Request  and  parameters :  POST  发送 消息  title : < title > , 标题  content : < str > , 正文  content _ html : < str > , 正文 html  send _ type : < array > , 发送 类型 on _ site ,  email ,  sms  .  如 : [ \" email \" ] ,  也 可以 同时 发送 多个 个 [ \" email \" ,  \" on _ site \" ]  username : < array > ,  接收 信息 的 用户 户名 用户名 ,  如 [ \" test \" ,  \" test2 \" ]  : return :  Admin - message - on - site  Api  : / api / admin / message / on - site  Methods  : GET ,  PUT ,  DELETE  Permission  : EDITOR  Login  auth  : Yes  Request  and  parameters :  GET :  获取 用户 消息  is _ sys _ msg : < int > , 获取 系统 消息 ?  1 表示 是 ,  0 表示 否  pre : < int > , 每页 获取 几条 数据 , 默认 10  page : < int > , 第几 几页 第几页 , 默认 1  type : < array > , 消息 类型 ,  比如 [ \" notice \" ,  \" comment \" ,  \" audit \" ]  DELETE :  删除 消息 ( 此 接口 只能 删除 由 系统 发出 的 消息 user _ id = = 0 的 )  ids : < array > , 消息 id  : return :  Admin - message - sms  Api  : / api / admin / message / sms  Methods  : GET ,  DELETE  Permission  : EDITOR  Login  auth  : Yes  Request  and  parameters :  GET :  获取 系统 发送 出去 的 邮件 或 短信 记录  status : < str > ,  状态 ,  normal ,  abnormal ,  error  pre : < int > , 每页 获取 几条 数据 , 默认 10  page : < int > , 第几 几页 第几页 , 默认 1  DELETE :  删除 消息 ( 此 接口 只能 删除 由 系统 发出 的 消息 user _ id = = 0 的 )  ids : < array > , 消息 id  : return :  * * * ##  Api 文档 说明  User - message  Api  : / api / user / message  Methods  : GET ,  PUT ,  DELETE  Permission  : unlimited  Login  auth  : Yes  Request  and  parameters :  GET :  获取 用户 的 消息  type : < array > , 消息 类型 ,  比如 [ \" notice \" ,  \" private _ letter \" ]  label : < array > ,  消息 label ,  默认 全部 label ,  比如 [ ' comment ' ,  ' audit _ failure ' ,  ' sys _ notice ' ]  pre : < int > , 每页 获取 几条 数据 , 默认 10  page : < int > , 第几 几页 第几页 , 默认 1  status _ update : < str > , 获取 后 的 消息 状态 更新 .  可以 为 :  \" have _ read \"  PUT :  更新 消息 状态  ids : < array > , 消息 id  status _ update : < str > , 获取 后 的 消息 状态 更新 .  可以 为 :  \" have _ read \"  DELETE :  删除 消息  ids : < array > , 消息 id  : return :  Global  Api  : / api / global  Methods  : GET  Permission  : unlimited  Login  auth  :  Request  and  parameters :  GET :  获取 当前 全局 数据 , 包括 站点 的 公开 设置 ,  当前 登录 用户 的 基本 可 公开 信息  : return :  Global - media  Api  : / api / global / media  Methods  : GET  Permission  : unlimited  Login  auth  :  Request  and  parameters :  GET :  1 . 获取 指定 的 媒体 多媒体 数据  conditions : < array : dict > ,  Such  as : [ { ' type ' : < str > ,  ' names ' : < array > ,  ' name _ regex ' : ' ' } ]  说明 :  type - 可以 是 \" text \" ,  \" image \" ,  \" video \" ,  \" audio \"  names - 数组 , 指定 要 获取 数据 获取数据 的 name  name _ regex - 字符 字符串 , 获取 匹配 此 正则 的 media , 如果 为 空值 ， 则 不 使用 正则 匹配 ( 空置 包括 null ,  None , False ,  \" \" )  注意 : name  与 name _ regex 不能 同时 使用 , 当 name _ regex 非空时 ， 查询 自动 忽略 names  使用 示例 ： 前提 在 管理 端 媒体 多媒体 中 存在 的 内容  如 : 首页 轮播 图片 和 获取 ” 关于 我们 “ 页面 的 文字 内容  [  { \" type \" : \" image \" ,  \" names \" : [ \" home - carousel - 1 \" ,  \" home _ carousel - 2 \" ] } ,  { \" type \" : \" text \" ,  \" names \" : [ \" about - me \" ] } ,  { \" type \" : \" image \" ,  \" name _ regex \" : \" test - [ 0 - 9 ] + \" }  ]  2 . 获取 指定 category 的 媒体 多媒体  category _ name : < array >  category  name ,  可 同时 指定 多个 category  name ,  使用 数组  category _ user _ id : < str > ,  为 空则 表示 获取 站点 官方 的 媒体 多媒体  category _ type : < str > ,  可 选 \" text \" ,  \" image \" ,  \" video \" ,  \" audio \"  page : < int > ,  第几 几页 第几页 ,  默认 1  pre : < int > ,  每页 几条 数据 ,  默认 8  3 . 根据 id  获取  media _ id : < str >  : return :  * * * ##  Api 文档 说明  Admin - audit - rule - key  Api  : / api / admin / audit / rule / key  Methods  : GET  Permission  : WEB _ SETTING  Login  auth  : Yes  Request  and  parameters :  GET :  获取 审核 规则 的 所有 key 与 说明 ,  也 就 config 设置 中 的 audit  : return :  Admin - audit - rule  Api  : / api / admin / audit / rule  Methods  : GET ,  POST ,  PUT ,  PATCH ,  DELETE  Permission  : WEB _ SETTING  Login  auth  : Yes  Request  and  parameters :  GET :  1 .  获取 所有 验证 规则  project : < str > ,  \" username \" ,  \" post _ category \" ,  keyword : < str > , 不能 使用 的 关键 关键词 , 支持 正则  page : < int > ,  第几 几页 第几页 ,  默认 1  pre : < int > ,  每页 返回 pre 条 数据 ， 默认 10  : return :  POST :  添加 验证 规则  project : < str > ,  \" username \" ,  \" post _ category \"  rule : < str >  : return :  DELETE :  删除 规则  ids : < array > ,  rule  ids  : return :  * * * ##  Api 文档 说明  Admin - setting - sys - log  Api  : / api / admin / setting / sys / log  Methods  : GET  Permission  : SYS _ SETTING  Login  auth  : Yes  Request  and  parameters :  GET :  获取 文件 日志  name : < str > , 日志 名称  ip : < str > , 要 获取 哪个 主机 的 日志  page : < int >  : return :  Session - language - set  Api  : / api / session / language - set  Methods  : PUT  Permission  : unlimited  Login  auth  :  Request  and  parameters :  PUT  :  修改 当前 语言  language : < str > ,  如 en _ US ,  zh _ CN  : return :  Admin - setting - sys - host  Api  : / api / admin / setting / sys / host  Methods  : GET ,  POST ,  PUT ,  DELETE  Permission  : SYS _ SETTING  Login  auth  : Yes  Request  and  parameters :  GET :  获取 主机 的 信息  ip : < str > , 要 获取 哪个 主机 的 日志  : return :  PUT :  设置 主机 连接 信息 与 重启 命令  username : < str > , 主机 用户 户名 用户名  password : < str > , 主机 密码  host _ ip : < str > , 要 获取 哪个 主机 的 日志  host _ port : < int > , 主机 端口  cmd : < str > ,  命令 ,  注释 使用 #  Admin - setting - sys - host - cmd - execute  Api  : / api / admin / setting / sys / host / cmd - execute  Methods  : PUT  Permission  : SYS _ SETTING  Login  auth  : Yes  Request  and  parameters :  PUT :  命令 执行  host _ ip : < str >  cmd : < str > ,  要 执行 的 Linux  命令 , 如果 没有 则 自动 执行 主机 保存 的 常用 命令 常用命令  : return :  Admin - setting - sys - host - connection - test  Api  : / api / admin / setting / sys / host / connection - test  Methods  : PUT  Permission  : SYS _ SETTING  Login  auth  : Yes  Request  and  parameters :  PUT :  服务 务器 服务器 连接 测试  host _ ip : < str >  : return :  * * * ##  Api 文档 说明  Admin - setting - sys - config - version  Api  : / api / admin / setting / sys / config / version  Methods  : GET ,  PUT  Permission  : SYS _ SETTING  Login  auth  : Yes  Request  and  parameters :  GET :  获取 所有 的 系统 统配 配置 系统配 系统配置 版本 ,  和 网站 服务 务器 服务器 主机  PUT :  切换 单个 节点 网站 的 配置 版本  switch _ version : < str > ,  需要 切换 的 版本 版本号  diable _ update : < int >  ,  0  or  1  host _ ip : < str > ,  主机 ip  : return :  Admin - setting - sys - config  Api  : / api / admin / setting / sys / config  Methods  : GET ,  PUT  Permission  : SYS _ SETTING  Login  auth  : Yes  Request  and  parameters :  GET :  根据 project 获取 当前 最新 配置 ( 特殊 配置 将 不会 返回 , 如 不 允许 再 页面 编辑 的 , 即 那些 不 带有 \" __ restart __ \" key 的 )  project : < array > ,  能 同时 获取 多个 project 的 数据 . 不 使用 参数 此参数 则 表示 获取 全部 配置  keyword : < str > ,  搜索 匹配 关键 关键字 的 结构  only _ project _ field : < int > ,  只 需要 project 字段 .  0  or  1 . 默认 为 0  PUT :  key : < str > ,  要 设置 的 配制 参数 的 key  project : < str > ,  项目 , 比如 这个 key 是 comment 下 的 ， 则 project 为 comment  value : < str  or  int  or  bool  or  list  or  dict  or  tuple > ,  key 对应 的 值  info : < str > ,  说明  : return :  Token - access - token  Api  : / api / token / access - token  Methods  : GET  Permission  : unlimited  Login  auth  :  Request  and  parameters :  GET :  客户 客户端 获取 / 刷新 AccessToken  ( 必须 使用 SecretToken 验证 通过 )  如果 请求 头 中 带有 ClientId  则 使用 客户 客户端 提供 的 ClientId ,  否则 创建 新 的 ClientId  : return :  Admin - token - secret - token  Api  : / api / admin / token / secret - token  Methods  : GET ,  POST ,  PUT ,  DELETE  Permission  : ROOT  Login  auth  : Yes  Request  and  parameters :  客户 客户端 访问 使用 的 secret  token 管理  GET :  获取 所有 secret  token  POST :  创建 一个 secret  token  PUT :  激活 或 禁用 一个 id  token _ id : < id > , token  id  action : < str > , 如果 为 \" activate \" 则 激活 token ,  为 \" disable \" 禁用 token  DELETE :  删除 一个 token  token _ id : < id > , token  id  : return :  * * * ##  Api 文档 说明  Admin - url - permission  Api  : / api / admin / url / permission  Methods  : GET ,  POST ,  PUT ,  DELETE  Permission  : ROOT  Login  auth  : Yes  Request  and  parameters :  GET :  获取 系统 的 web  url  type : < array > , 类型 ,  可选 api ,  static ,  page  pre : < int > , 每页 获取 几条 数据 , 默认 10  page : < int > , 第几 几页 第几页 , 默认 1  keyword : < str > , 搜索 关键 关键字  POST :  添加 页面 路由  url : < str > ,  只 用于 添加 页面 路由  PUT :  更新 权限  id : < str > , id  method : < str >  custom _ permission : < array > ,  如 [ 1 ,  512 ,  128 ]  login _ auth : < int > ,  0  或  １ ,  是否 需要 登录 验证 ( 如果 原代 代码 原代码 路由 中 指定 未指定 需要 登录 请求 ,  则 按照 此 配置 )  DELETE :  删除 手动 添加 的 页面 路由  ids : < array >  : return :  * * * ##  Api 文档 说明  Upload - file  Api  : / api / upload / file  Methods  : POST  Permission  : USER  Login  auth  : Yes  Request  and  parameters :  POST  文件 上传  api 返回 json 数据 , 格式 默认 如下 :  { ' urls ' : [ < url > ,  ... , < url > ] ,  ' state ' : < ' success '  or  ' error ' > ,  ' msg _ type ' : < ' s '  or  e ' > ,  ' msg ' : ' '  }  return _ url _ key :  < str > ,  自定 定义 自定义 返回 数据 的 urls 的 key ,  默认 ' urls '  return _ state _ key : < str > ,  自定 定义 自定义 返回 数据 的 状态 的 key ,  默认 ' state '  return _ success : < str  or  int > ,  自定 定义 自定义 返回 数据 成功 的 状态 的 值 ,  默认 ' success '  return _ error : < str  or  int > ,  自定 定义 自定义 返回 数据 错误 的 状态 的 值 ,  默认 ' error '  prefix : < str > ,  默认 为 “ generic / ” ,  则 会 将 文件 放入 到 generic 目录 下  save _ temporary _ url ： < 0  or  1 > , 默认 为 1 ,  如果  : return :  Admin - upload - media - file  Api  : / api / admin / upload / media - file  Methods  : GET ,  POST ,  PUT ,  DELETE  Permission  : EDITOR  Login  auth  : Yes  Request  and  parameters :  GET  1 . 获取 多个 媒体 信息 多媒体 多媒体信息  file _ type : < str > ,  文件 类型 文件类型 , 可 选 \" image \" ,  \" video \" ,  \" audio \" ,  \" other \"  category _ id : < str > ,  分类 id ,  获取 默认 分类 使用 \" default \" 作为 category _ id ,  不 传入 参数 此参数 则 表示 获取 全部  keyword : < str > , 搜索 用  page : < int > ,  第几 几页 第几页 ,  默认 1  pre : < int > ,  每页 几条 数据 ,  默认 12  sort : < array > , 排序 ,  1 表示 升序 ,  - 1 表示 降序 . 如 :  按 时间 降序  [ { \" time \" : - 1 } ]  按 时间 升序  [ { \" time \" ,  1 } ]  默认 时 按 时间 降序 ,  也 可以 用 其他 字 段 排序  2 . 获取 1 个 信息  id : < str > , id  POST  添加 媒体  name : < str > ,  名字  link : < str > ,  链接 ,  用于 展示 的 时候 跳转 链接  link _ name : < str > , 链接 名字  link _ open _ new _ tab : < str > , 链接 是否 打开 新 标签  title : < str > ,  展示 的 标题  name : < str > ,  展示 时 需要 显示 的 文字  text : < str >  text _ html : < str > ,  text 的 html 格式 ( 富 文本 )  type : < str > ,  文件 类型 文件类型 , 可 选 \" image \" ,  \" video \" ,  \" audio \" ,  \" text \" , \" other \"  category _ id : < str > ,  分类 id  * * 如果 需要 上传 文件 , 还 需要 一下 参数 :  batch : < int > ,  0  or  1 ,  default : 0 ,  为 1 表示 批量 上传 .  return _ url _ key :  < str > ,  自定 定义 自定义 返回 数据 的 urls 的 key ,  默认 ' urls '  return _ state _ key : < str > ,  自定 定义 自定义 返回 数据 的 状态 的 key ,  默认 ' state '  return _ success : < str  or  int > ,  自定 定义 自定义 返回 数据 成功 的 状态 的 值 ,  默认 ' success '  return _ error : < str  or  int > ,  自定 定义 自定义 返回 数据 错误 的 状态 的 值 ,  默认 ' error '  * * 注意 :  如果 后台 获取 有 文件 上传 ， 则 表示 只 上传 文件  上传 文件 返回 数据 格式 数据格式 默认 如下 :  { ' urls ' : [ < url > ,  ... , < url > ] ,  ' state ' : < ' success '  or  ' error ' > ,  ' msg _ type ' : < ' s '  or  e ' > ,  ' msg ' : ' '  }  PUT  编辑 媒体 信息 多媒体 多媒体信息  id : < str > , 要 编辑 的 media  id  category _ id : < str > , 要 编辑 的 文件 的 分类 id ,  如果 不 修改 分类 可以 不 提交  name : < str >  link : < str > ,  链接  link _ name : < str > , 链接 名字  link _ open _ new _ tab : < str > , 链接 是否 打开 新 标签  title : < str >  text : < str >  text _ html : < str > ,  text 的 html 格式 ( 富 文本 )  * * 如果 只 更新 文件 ( 如 图片 ) , 还 需要 一下 参数 :  batch : < int > ,  0  or  1 ,  default : 0 ,  为 1 表示 批量 上传 .  return _ url _ key :  < str > ,  自定 定义 自定义 返回 数据 的 urls 的 key ,  默认 ' urls '  return _ state _ key : < str > ,  自定 定义 自定义 返回 数据 的 状态 的 key ,  默认 ' state '  return _ success : < str  or  int > ,  自定 定义 自定义 返回 数据 成功 的 状态 的 值 ,  默认 ' success '  return _ error : < str  or  int > ,  自定 定义 自定义 返回 数据 错误 的 状态 的 值 ,  默认 ' error '  * * 注意 :  如果 后台 获取 有 文件 上传 ， 则 表示 只 上传 文件  上传 文件 返回 数据 格式 数据格式 默认 如下 :  { ' urls ' : [ < url > ,  ... , < url > ] ,  ' state ' : < ' success '  or  ' error ' > ,  ' msg _ type ' : < ' s '  or  e ' > ,  ' msg ' : ' '  }  DELETE  删除 媒体 多媒体 文件  ids : < array > , 要 删除 的 文件 的 id  : return :  * * * ##  Api 文档 说明  User - follow  Api  : / api / user / follow  Methods  : GET  Permission  : unlimited  Login  auth  :  Request  and  parameters :  GET :  获取 用户 关注 的 用户  user _ id : < str > ,  用户 ID  action : < str > ,  为 followed _ user  获取 当前 的 登录 用户 的 粉丝  action : < str > ,  为 fans  : return :  User - follow  Api  : / api / user / follow  Methods  : POST ,  DELETE  Permission  : unlimited  Login  auth  : Yes  Request  and  parameters :  POST :  当前 登录 用户 关注 另 一个 用户 用户  ids : < array > , 需 关注 用户 的 user  id  DELETE :  当前 登录 用户 取消 关注 一个 用户  ids : < array > , 不再 关注 的 用户 的 user  id  : return :  * * * ##  Api 文档 说明  Admin - comment - access  Api  : / api / admin / comment / access  Methods  : GET  Permission  : REPORT  Login  auth  : Yes  Request  and  parameters :  GET :  获取 comment 数据 统计  days : < int >  Admin - post - access  Api  : / api / admin / post / access  Methods  : GET  Permission  : REPORT  Login  auth  : Yes  Request  and  parameters :  GET :  获取 post 数据 统计  days : < int >  Admin - report - basic  Api  : / api / admin / report / basic  Methods  : GET  Permission  : REPORT  Login  auth  : Yes  Request  and  parameters :  GET :  获取 网站 的 最 基本 报表 数据  project : < array > , 默认 全部 , 可以 是 post ,  comment ,  user ,  message ,  plugin ,  media ,  inform  * * * ##  Api 文档 说明  Content - category - info  Api  : / api / content / category / info  Methods  : GET  Permission  : unlimited  Login  auth  :  Request  and  parameters :  获取 指定 category  id 的 category 信息  : return :  Content - category  Api  : / api / content / category  Methods  : GET ,  POST ,  PUT ,  DELETE  Permission  : unlimited  Login  auth  : Yes  Request  and  parameters :  GET :  action : < str > ,  可以 为 get _ category ,  get _ category _ type ,  默认 get _ category  1 . 获取 当前 用户 指定 的 type 的 所有 category  action : < str > ,  为 get _ category  type : < str > ,  你 设置 的 那 几个 类别 中 的 类别 , 在 config . py 文件 中 category ,  可 在 网站 管理 端 设置 的  2 .  获取 所有 的 type :  config . py 文件 中 category 的 所有 CATEGORY  TYPE  action : < str > ,  为 get _ category _ type  解释 :  在 分类 中 ( category ) 又 分为 几种 类型 ( type )  如 :  type 为 post 有 几个 category  POST :  添加 文集  name : < str >  type : < str > ,  只能 是 你 设置 的 那 几个 类别 , 在 config . py 文件 中 category ,  或者 网站 管理 设置  PUT :  修改 文集  id : < str > ,  post  category  id  name : < str >  DELETE :  删除 文集 名称  ids : < array > ,  post  category  ids  Admin - content - category  Api  : / api / admin / content / category  Methods  : GET ,  POST ,  PUT ,  DELETE  Permission  : EDITOR  Login  auth  : Yes  Request  and  parameters :  Admin 管理 端 category 管理  GET :  1 . 获取 指定 的 type 的 所有 分类  type : < str > ,  你 设置 的 那 几个 类别 中 的 类别 , 在 config . py 文件 中 category ,  或者 网站 管理 设置  2 . 获取 所有 的 type  get _ type : < int > ,  get _ type 为 1  POST :  添加 文集  name : < str >  type : < str > ,  只能 是 你 设置 的 那 几个 类别 , 在 config . py 文件 中 category ,  或者 网站 管理 设置  PUT :  修改 文集  id : < str > ,  post  category  id  name : < str >  DELETE :  删除 文集 名称  ids : < array > ,  post  category  ids  * * * ##  Api 文档 说明  Admin - plugin  Api  : / api / admin / plugin  Methods  : GET ,  POST ,  PUT ,  DELETE  Permission  : SYS _ SETTING  Login  auth  : Yes  Request  and  parameters :  插件 管理  GET :  获取 所有 插件  page : < int > , 第几 几页 第几页 ,  默认 1  pre : < int > , 每页 个数 ,  默认 10  keyword : < str > ,  搜索 用  POST :  插件 安装  upfile : < file > , 上传 的 插件 压缩 压缩包  PUT :  操作 插件  action : < str > ,  start : 激活 插件  stop : 停用 插件  name : < str > ,  插件 名称  : return :  Admin - plugin - setting  Api  : / api / admin / plugin / setting  Methods  : GET ,  POST ,  PUT  Permission  : SYS _ SETTING  Login  auth  : Yes  Request  and  parameters :  插件 设置  GET :  获取 插件 设置  plugin _ name : < str > ,  插件 名  POST :  刷新 当前 插件 配置 ( 当 插件 配置 代码 被 修改 后 , 如果 未 重新 激活 ， 系统 保存 的 配置 是 不会 更新 的 ， 所有 可以 使用 此 方法 刷新 )  plugin _ name : < str > ,  插件 名  PUT :  修改 设置  plugin _ name : < str > ,  插件 名  key : < str > , KEY  value : < 可 多种 种类 类型 多种类型 的 数据 > ,  值  : return :  Admin - plugin - setting - install - requirement  Api  : / api / admin / plugin / setting / install - requirement  Methods  : PUT  Permission  : SYS _ SETTING  Login  auth  : Yes  Request  and  parameters :  插件 需求 包 安装  PUT :  插件 需求 包 安装  plugin _ name : < str > ,  插件 名  : return :  * * * ##  Api 文档 说明  Admin - comment  Api  : / api / admin / comment  Methods  : GET ,  POST ,  PUT ,  PATCH ,  DELETE  Permission  : AUDIT  Login  auth  : Yes  Request  and  parameters :  GET :  获取 评论  status : < str > , \" is _ issued \" （ 正常 发布 ）  or  \" not _ audit \" （ 等待 审核 ）  or  \" unqualified \" （ 未 通过 审核 ）  or  \" user _ remove \" ( 用户 删除 的 )  keyword : < str > , 搜索 关键 关键字  sort : < array > , 排序 ,  1 表示 升序 ,  - 1 表示 降序 . 如 :  按 时间 降序  [ { \" issue _ time \" : - 1 } ]  按 时间 升序  [ { \" issue _ time \" :  1 } ]  先后 按赞 ( like ) 数 降序 ,  评论 数 降序 , pv 降序 ,  发布 时间 降序  [ { \" like \" :  - 1 } , { \" issue _ time \" :  - 1 } ]  默认 时 按 时间 降序 ,  也 可以 用 其他 字 段 排序  page : < int > , 第几 几页 第几页 ， 默认 第 1 页  pre : < int > ,  每页 查询 多少 条 ,  默认 是 config . py 配制 文件 中 配制 的 数量  : return :  PATCH  or  PUT :  1 . 人工 审核 comment ,  带上 参数 score  op : < str > ,  \" audit \"  ids : < array > ,  comment  id  score : < int > ,  0 - 10 分  2 . 恢复 comment ,  只能 恢复 管理 管理员 移入 待 删除 的 comment ,  is _ delete 为 2 的 comment  op : < str > ,  \" restore \"  ids : < array > ,  comment  id  DELETE :  删除 comment  ids : < array > ,  comment  id  pending _ delete : < int > ,  1 :  is _ delete 为 2 ,  标记 为 永久 删除 ,  0 : 从 数据 据库 数据库 删除 数据  : return :  Comment  Api  : / api / comment  Methods  : GET  Permission  : unlimited  Login  auth  :  Request  and  parameters :  GET :  获取 文章 的 评论  target _ id : < str > ,  目标 id , 比如 文章 post  id  target _ type : < str > ,  目标 类型 , 比如 文章 就是 \" post \"  status : < str > , \" is _ issued \" （ 正常 发布 ）  or  \" not _ audit \" （ 等待 审核 ）  or  \" unqualified \" （ 未 通过 审核 ）  or  \" user _ remove \" ( 用户 删除 的 )  sort : < array > , 排序 ,  1 表示 升序 ,  - 1 表示 降序 . 如 :  按 时间 降序  [ { \" issue _ time \" : - 1 } ]  按 时间 升序  [ { \" issue _ time \" :  1 } ]  先后 按赞 ( like ) 数 降序 ,  评论 数 降序 , pv 降序 ,  发布 时间 降序  [ { \" like \" :  - 1 } , { \" issue _ time \" :  - 1 } ]  默认 时 按 时间 降序 ,  也 可以 用 其他 字 段 排序  page : < int > , 第几 几页 第几页 ， 默认 第 1 页  pre : < int > ,  每页 查询 多少 条 ,  默认 是 config . py 配制 文件 中 配制 的 数量  : return :  Comment  Api  : / api / comment  Methods  : POST ,  PUT ,  PATCH ,  DELETE  Permission  : unlimited  Login  auth  : Yes  Request  and  parameters :  POST :  评论 发布  target _ id : < str > ,  目标 id , 比如 文章 post  id  target _ type : < str > ,  目标 类型 , 比如 文章 就是 \" post \"  reply _ id : < str > ,  被 回复 的 comment  id .  如果 是 回复 评论 中 的 评论 , 如 : 在 评论 a 下面 有 一个 评论 a1 ， 我 需要 回复 a1 ,  这个 时候 需要 提供 的 reply _ id 依然 是 a 评论 的 ，  而 不是 a1 的  reply _ user _ id : < str > ,  被 回复 的 comment  的 用户 的 user  id ，  如果 是 回复 评论 中 的 评论 , 如 : 在 评论 a 下面 有 一个 评论 a1 ， 我 需要 回复 a1 ,  这个 时候 需要 提供 的 reply _ user _ id 是 a １ 评论 的  reply _ username : < str > ,  被 回复 的 comment  的 用户 的 username ，  如果 是 回复 评论 中 的 评论 , 如 : 在 评论 a 下面 有 一个 评论 a1 ， 我 需要 回复 a1 ,  这个 时候 需要 提供 的 reply _ username 是 a １ 评论 的  content : < str > ,  内容 ( 比如 : 富 文本 的 html 内容 ) , 将会 保存 到 数据 据库 数据库 中  如果 是 游客 评论 , 则 需要 以下 两个 参数 ( 需要 再 后台 配置 中 开启 游客 评论 开关 ) :  username : < str > ,  游客 昵称  email : < str > , 游客 邮箱  : return :  DELETE :  评论 删除  ids : < array > ,  comment  ids  Comment - like  Api  : / api / comment / like  Methods  : PUT  Permission  : unlimited  Login  auth  : Yes  Request  and  parameters :  PUT :  给 评论 点赞  id : < str >  : return :  * * * ##  Api 文档 说明  Inform - content  Api  : / api / inform / content  Methods  : PUT  Permission  : unlimited  Login  auth  :  Request  and  parameters :  PUT :  内容 违规 举报  ctype : < str > ,  内容 的 类型 可 选 : post ( 文章 ) ,  comment ( 评论 ) ,  media ( 媒体 多媒体 ) ,  user ( 用户 )  cid : < str > ,  内容 的 id  category : < str > ,  举报 内容 违规 类型 ,  可 选 :  ad ,  junk _ info ,  plagiarize ,  other  details ： < str > ,  违规 详情 ( 选填 )  * * * ##  Api 文档 说明  Vercode - send  Api  : / api / vercode / send  Methods  : POST  Permission  : unlimited  Login  auth  :  Request  and  parameters :  POST :  手机 或 邮箱 验证 验证码 发送  account _ type : < str > ,  \" email \"  or  \" mobile _ phone \"  account : < email  or  number > ,  接收 验证 验证码 的 账户  exist _ account : < int > ,  是否 只能 发送 送给 发送给 用该 邮箱 / 号码 在 本 平台 已 注册 的 用户 ?  1 为 是 ,  0 为否 .  默认 0  如果 1 分钟 内 , 同一 IP , 同一 用户 ( 未 登录 的 同属 一 匿名 用户 )  调用 api 超过 MAX _ NUM _ SEND _ SAMEIP _ PERMIN _ NO _ IMGCODE ( 1 分钟 内 无 图片 验证 验证码 最大 调用 次数 ) 配置 的 次数 ,  超过 后 API 会生 会生会 返回 open _ img _ verif _ code : true ,  表示 需要 图片 验证 验证码 验证 , 客户 客户端 应该 请求 验证 验证码 / api / vercode / image ,  再次 提交 登录 时 需要 以下 两个 参数  code : < str > ,  图片 验证 验证码 中 的 字符  code _ url _ obj : < json > ,  图片 验证 验证码 url  对象  注意 : 如果 你 并 不想 使用 图片 验证 验证码 来 防止 频繁 调用 , 请 在 管理 的 设置 MAX _ NUM _ SEND _ SAMEIP _ PERMIN _ NO _ IMGCODE 的 值 大于  MAX _ NUM _ SEND _ SAMEIP _ PERMIN  : return :  Vercode - image  Api  : / api / vercode / image  Methods  : GET  Permission  : unlimited  Login  auth  :  Request  and  parameters :  GET :  获取 图片 验证 验证码  : return :  验证 验证码 path  object  Post  Api  : / api / post  Methods  : GET  Permission  : unlimited  Login  auth  :  Request  and  parameters :  GET :  1 . 获取 一篇 文章  post _ id : < str > , post  id  2 . 根据 条件 获取 文章  sort : < array > , 排序 ,  1 表示 升序 ,  - 1 表示 降序 . 如 :  按 时间 降序  [ { \" issue _ time \" : - 1 } , { \" update _ time \" : - 1 } ]  按 时间 升序  [ { \" issue _ time \" :  1 } , { \" update _ time \" :  1 } ]  先后 按赞 ( like ) 数 降序 ,  评论 数 降序 , pv 降序 ,  发布 时间 降序  [ { \" like \" :  - 1 } ,  { \" comment _ num \" :  - 1 } ,  { \" pv \" :  - 1 } , { \" issue _ time \" :  - 1 } ]  默认 时 按 时间 降序 ,  也 可以 用 其他 字 段 排序  status : < int >  ,  \" is _ issued \" （ 正常 发布 ）  or  \" draft \" （ 草稿 ）  or  \" not _ audit \" （ 等待 审核 ）  or  \" unqualified \" （ 未 通过 审核 ）  or  \" recycle \" ( 用户 的 回收 回收站 )  or  \" user _ remove \"  （ user _ remove 是 指 用户 永久 删除 或 被 管理 删除 的 ）  matching _ rec : < str > , 可 选 ， 提供 一段 内容 ,  匹配 一些 文章 推荐  time _ range : < int > , 可 选 , 单位 为天 , 比如 最近 7 天 的 文章  page : < int > , 第几 几页 第几页 ， 默认 第 1 页  pre : < int > ,  每页 查询 多少 条  keyword : < str > ,  Search  keywords ,  搜索 使用  fields : < array > ,  需要 返回 的 文章 字 段 , 如 [ \" title \" ]  unwanted _ fields : < array > ,  不能 和 fields 参数 同时 使用 , 不 需要 返回 的 文章 字 段 , 如 [ \" user _ id \" ]  user _ id : < str > ,  如需 获取 指定 用户 的 post 时 需要 参数 此参数  category _ id : < str > ,  获取 指定 文集 的 post 时 需要 参数 此参数  Post  Api  : / api / post  Methods  : PUT  Permission  : unlimited  Login  auth  : Yes  Request  and  parameters :  PUT :  喜欢 文章  action : < str > ,  可以 是 like ( 点赞 文章 )  id : < str > ,  post  id  * * * ##  Api 文档 说明  User - post  Api  : / api / user / post  Methods  : POST ,  PUT ,  PATCH ,  DELETE  Permission  : USER  Login  auth  : Yes  Request  and  parameters :  POST :  内容 发布  title : < str > ,  标题  content : < str > ,  内容 ( 比如 : 富 文本 的 html 内容 ) , 将会 保存 到 数据 据库 数据库 中  conetent _ text : < str > ,  纯 文本 内容  editor : < str > ,  使用 的 编辑 编辑器 类型 ,  \" markdown \"  or  \" rich _ text \"  tags : < array > ,  标签  category : < str > ,  post  category  id .  post 分类  cover _ url : < str > , 文章 封面 图 url , 默认 为空  issue _ way : < str > ,  可 选 ' issue '  or  ' save ' .  发布 或者 保存 为 草稿  PUT  or  PATCH :  1 . 内容 修改  id : < str > ,  编辑 已有 的 文章 需要 传入 id ,  新建 文章 不 需要  title : < str > ,  标题  content : < str > ,  内容 ( 比如 : 富 文本 的 html 内容 ) , 将会 保存 到 数据 据库 数据库 中  conetent _ text : < str > ,  纯 文本 内容  editor : < str > ,  使用 的 编辑 编辑器 类型 ,  \" markdown \"  or  \" rich _ text \"  tags : < array > ,  标签  category : < str > ,  post  category  id .  post 分类  issue _ way : < str > ,  可 选 ' issue '  or  ' save ' .  发布 或者 保存 为 草稿  2 . 恢复 回收 回收站 的 post  op : < str > ,  restore  ids : < array > ,  posts  id  DELETE :  删除 post  ids : < array > ,  posts  id  recycle : < int > , 1  or  0 ,  1 ： 则 移入 回收 回收站 ,  0 :  则 直接 标记 为 永久 删除 ,  管理 管理员 才 可见  Admin - post  Api  : / api / admin / post  Methods  : GET ,  POST ,  PUT ,  PATCH ,  DELETE  Permission  : AUDIT  Login  auth  : Yes  Request  and  parameters :  GET :  1 .  根据 条件 获取 文章  sort : < array > , 排序 ,  1 表示 升序 ,  - 1 表示 降序 . 如 :  按 时间 降序  [ { \" issue _ time \" : - 1 } , { \" update _ time \" , - 1 } ]  按 时间 升序  [ { \" issue _ time \" ,  1 } , { \" update _ time \" , 1 } ]  先后 按赞 ( like ) 数 降序 ,  评论 数 降序 , pv 降序 ,  发布 时间 降序  [ { \" like \" ,  - 1 } ,  { \" comment _ num \" ,  - 1 } ,  { \" pv \" ,  - 1 } , { \" issue _ time \" ,  - 1 } ] ;  默认 时 按 时间 降序 ,  也 可以 用 其他 字 段 排序  page : < int > , 第几 几页 第几页 ， 默认 第 1 页  pre : < int > ,  每页 查询 多少 条  status : < int >  ,  \" is _ issued \" （ 正常 发布 ）  or  \" draft \" （ 草稿 ）  or  \" not _ audit \" （ 等待 审核 ）  or  \" unqualified \" （ 未 通过 审核 ）  or  \" recycle \" ( 用户 的 回收 回收站 )  or  \" user _ remove \"  （ user _ remove 是 指 用户 永久 删除 或 被 管理 删除 的 ）  keyword : < str > ,  Search  keywords ,  搜索 的 时候 使用  fields : < array > ,  需要 返回 的 文章 字 段 , 如 [ \" title \" ]  unwanted _ fields : < array > ,  不能 和 fields 参数 同时 使用 , 不 需要 返回 的 文章 字 段 , 如 [ \" content \" ]  : return :  2 . 获取 一篇 文章  post _ id : < str > , post  id  status : < str > , 状态 ,  可以 是 \" is _ issued \"  or  \" draft \"  or  \" not _ audit \"  or  \" unqualified \"  or  \" recycle \"  PATCH  or  PUT :  1 . 人工 审核 post  op : < str > ,  为 \" audit \"  ids : < str > ,  posts  id  score : < int > ,  0 - 10 分  2 . 恢复 post ,  只能 恢复 管理 管理员 移入 待 删除 的 文章 is _ delete 为 3 的 post  op : < str > ,  为 \" restore \"  ids : < array > ,  posts  id  DELETE :  删除 post  ids : < array > ,  posts  id  pending _ delete : < int > ,  1 :  标记 is _ delete 为 3 ,  对于 post 属于 的 用户 永久 删除 ,  0 : 从 数据 据库 数据库 删除 数据  : return :  * * * ##  Api 文档 说明  Search  Api  : / api / search  Methods  : GET  Permission  : unlimited  Login  auth  :  Request  and  parameters :  GET :  搜索 ( 暂 不 支持 全文 搜索 ) ,  只能 搜索 文章 ,  用户  keyword : < str > ,  Search  keywords  target : < str > ,  可 选 \" post \"  或  \" user \" .  不 使用 参数 此参数 则 搜索 所有 可 选 目标  page : < int > , 第几 几页 第几页 ， 默认 第 1 页  pre : < int > ,  每页 多少 条  Admin - static - file  Api  : / api / admin / static / file  Methods  : GET ,  POST ,  PUT ,  DELETE  Permission  : SYS _ SETTING  Login  auth  : Yes  Request  and  parameters :  GET :  1 . 获取 静态 文件 内容  file _ path : < str > , 静态 文件 所在 目录  filename : < str > , 文件 文件名  2 . 获取 静态 文件 文件名 列表  page : < int > ,  第几 几页 第几页 ,  默认 1  pre : < int > ,  第几 几页 第几页 ,  默认 15  keyword : < str > , 关键 关键词 搜索 用  type : < str > ,  \" all \"  or  \" default \"  or  \" custom \"  PUT :  编辑 静态 文件 内容  file _ path : < str > , 静态 文件 所在 目录  filename : < str > , 文件 文件名  content : < str > ,  内容  * * * ##  Api 文档 说明  Admin - theme - page  Api  : / api / admin / theme / page  Methods  : GET ,  POST ,  PUT ,  DELETE  Permission  : SYS _ SETTING  Login  auth  : Yes  Request  and  parameters :  POST :  添加 页面  routing : < str > , 路由  content : < str > ,  内容  DELETE :  删除 自己 添加 的 页面  file _ path : < str > , 页面 html 文件 所在 目录  filename : < str > , 页面 html 文件 文件名  Admin - theme  Api  : / api / admin / theme  Methods  : GET ,  POST ,  PUT ,  DELETE  Permission  : SYS _ SETTING  Login  auth  : Yes  Request  and  parameters :  主题 管理  GET :  获取 当前 所有 主题  POST :  主题 安装  upfile : < file > ,  上传 的 主题 文件  PUT :  切换 主题  theme _ name : < str > ,  主题 名称  DELETE :  删除 主题  theme _ name : < str > ,  主题 名称  : return :", "location": "api/api_doc/"}, {"title": "Api 文档 说明", "text": "", "location": "api/api_doc/#api"}, {"title": "Account - data - availability", "text": "Api  : / api / account / data / availability  Methods  : GET  Permission  : unlimited  Login  auth  : Yes  Request  and  parameters :  GET :  查看 用户 户名 用户名 ， email , 个性 域 是否 可以 使用  field : < str > ,  username  or  email  or  custom _ domain  vaule : < str >  : return :", "location": "api/api_doc/#account-data-availability"}, {"title": "Account - self", "text": "Api  : / api / account / self  Methods  : GET  Permission  : unlimited  Login  auth  : Yes  Request  and  parameters :  GET :  提供 一个 user  id ,  获取 是否 时 当前 登录 用户  user _ id : < str >  : return :", "location": "api/api_doc/#account-self"}, {"title": "Admin - role - permission", "text": "Api  : / api / admin / role / permission  Methods  : GET  Permission  : USER _ MANAGE  Login  auth  : Yes  Request  and  parameters :  GET :  获取 所有 的 权限 表  : return :", "location": "api/api_doc/#admin-role-permission"}, {"title": "Admin - role", "text": "Api  : / api / admin / role  Methods  : GET ,  POST ,  PUT ,  DELETE  Permission  : USER _ MANAGE  Login  auth  : Yes  Request  and  parameters :  GET :  1 .  获取 指定 ID 的 角色  id : < str >  , role  id  2 . 分页 获取 全部 角色  page : < int > , 第几 几页 第几页 ， 默认 第 1 页  pre : < int > ,  每页 查询 多少 条  POST :  添加 一个 角色  name : < str >  instructions : < str >  default : < int  or  bool > ,  0  or  1  permissions : < array > ,  数组 ， 可以 给 角色 指定 多个 权重 ,  如 [ 1 ,  2 ,  4 ,  128 ]  PUT :  修改 一个 角色  id : < str > ,  role  id  name : < str >  instructions : < str >  default : < int > ,  0  or  1  permissions : < array > ,  数组 ， 可以 给 角色 指定 多个 权重 ,  如 [ 1 ,  2 ,  4 ,  128 ]  DELETE :  删除 角色  ids : < arry > ,  role  ids", "location": "api/api_doc/#admin-role"}, {"title": "Account - password - reset", "text": "Api  : / api / account / password / reset  Methods  : PUT  Permission  : USER  Login  auth  : Yes  Request  and  parameters :  PUT :  账户 密码 重设  now _ password : < str > , 目前 使用 的 密码  password : < str > ,  新密 密码 新密码  password2 : < str > ,  再次 确认 新密 密码 新密码  : return :", "location": "api/api_doc/#account-password-reset"}, {"title": "Account - password - retrieve", "text": "Api  : / api / account / password / retrieve  Methods  : PUT ,  POST  Permission  : unlimited  Login  auth  : Yes  Request  and  parameters :  PUT :  忘记 密码 , 重设  获取 验证 验证码 , 只 需要 传回 参数 email , return 回 一个 { code : { ' _ id ' : ' ' ,  str : ' ' , time : ' '  } }  设置 新密 密码 新密码 , 需要 全部 参数  email _ code : < str > ,  邮件 中 收到 的 验证 验证码  email : < str > ,  邮箱  password : < str > ,  新密 密码 新密码  password2 : < str > ,  再次 确认 密码  : return :  * * * ##  Api 文档 说明", "location": "api/api_doc/#account-password-retrieve"}, {"title": "Admin - user", "text": "Api  : / api / admin / user  Methods  : GET ,  PUT ,  DELETE  Permission  : USER _ MANAGE  Login  auth  : Yes  Request  and  parameters :  GET :  1 .  获取 指定 ID 的 用户 基本 信息  id : < str >  ,  user  id  2 . 分页 获取 所有 用户  status : < str > , 用户 状态 ， \" normal \"  or  \" inactive \"  or  \" cancelled \"  page : < int > , 第几 几页 第几页 ， 默认 第 1 页  pre : < int > ,  每页 查询 多少 条  keyword : < str > ,  Search  keywords ,  搜索 的 时候 使用  PUT :  1 . 编辑 用户  id : < str > ,  user  id  role _ id : < str > ,  role  id  active : < int > ,  0  or  1  2 . 激活 或 冻结 用户  op : < str > ,  为 \" activation \"  active : < int > ,  0  or  1 ,  0 为 冻结 ,  1 为 激活  ids : < array >  3 . 恢复 用户 , 将 状态 改为 未 删除  op : < str > ,  为 \" restore \"  ids : < array >  DELETE :  删除 用户 , 非 数据 据库 数据库 删除  ids : < array >", "location": "api/api_doc/#admin-user"}, {"title": "Admin - user - del", "text": "Api  : / api / admin / user / del  Methods  : DELETE  Permission  : IMPORTANT _ DATA _ DEL  Login  auth  : Yes  Request  and  parameters :  DELETE :  永久 删除 用户 , 数据 据库 数据库 中 删除  ids : < array >  permanent : < int >  0  or  1 ,  0 : 非 数据 据库 数据库 删除 , 只是 把 状态 改成 \" 删除 状态 \" , 为 1 : 表示 永久 删除 ,", "location": "api/api_doc/#admin-user-del"}, {"title": "Account - upload - avatar", "text": "Api  : / api / account / upload / avatar  Methods  : PUT  Permission  : USER  Login  auth  : Yes  Request  and  parameters :  PUT  头像 上传  注意 : 虽然 服务 的 提供 图片 裁剪 功能 ， 由于 耗费 服务 务器 资源 服务器 服务器资源 , 必要 非必要 情况 下 请 不要 使用 ， 请 再 客户 客户端 裁剪 好 再 上传 .  为了 防止 恶意 使用 裁剪 功能 ， 可以 在 管理 端中 设置 ( upload ) 中 关闭 上传 文件 裁剪 功能  * 提供 2 种 上传 方式 *  1 . 以 常规 文件 格式 文件格式 上传  upfile : < img  file > ， 头像 文件  preview _ w : < int > ,  图片 预览 宽度  tailoring : < dict > ,  ( 裁剪 功能 开启 后 才能 使用 ) , 裁剪 尺寸 ， 格式 : { x : 12 ,  y : 12 ,  height : 100 ,  width : 100 ,  rotate : 0 }  x 和 ｙ 为 裁剪 位置 ， x 距离 左边 距离 ,  y 距离 上边 距离 ,  width 截图 框 的 宽 ，  height 截图 框 的 高  2 . 以 base64 编码 上传  imgfile _ base : < str > , 以 base64 编码 上传 文件  : return :", "location": "api/api_doc/#account-upload-avatar"}, {"title": "Sign - up", "text": "Api  : / api / sign - up  Methods  : POST  Permission  : unlimited  Login  auth  :  Request  and  parameters :  POST :  1 . 普通 通用 用户 普通用户 使用 邮箱 注册 a  emial : < emial > ,  邮箱  username :  < str > ,  用户 户名 用户名  password :  < str > , 密码  password2 :  < str > , 再次 确认 密码  code : < str > ,  邮箱 收取 到 的 code  2 . 普通 通用 用户 普通用户 使用 手机 注册 a  mobile _ phone _ number : < int > 手机 号码 手机号 机号码 手机号码  username :  < str > ,  用户 户名 用户名  password :  < str > , 密码  password2 :  < str > , 再次 确认 密码  code : < str > ,  手机 收取 到 的 code  : return :", "location": "api/api_doc/#sign-up"}, {"title": "Sign - in", "text": "Api  : / api / sign - in  Methods  : PUT  Permission  : unlimited  Login  auth  :  Request  and  parameters :  PUT :  1 . 普通 登录  username :  < str > ,  用户 户名 用户名 或 邮箱 或 手机 号码 手机号 机号码 手机号码  password :  < str > , 密码  remember _ me : < bool > , 是否 保存 密码  next : < str > ,  登录 后要 返回 的 to  url ,  如果 为空 , 则 返回 设置 中 的 LOGIN _ TO  use _ jwt _ auth : < int > ,  是否 使用 jwt 验证 .  0  或  1 , 默认 为 0 不 使用  当 多次 输入 错误 密码 时 ， api 会 返回 open _ img _ verif _ code : true ,  表示 需要 图片 验证 验证码 验证 , 客户 客户端 应该 请求 验证 验证码 / api / vercode / image ,  然后 后 再次 提交 登录 时带 下 如下 参数  再次 提交 登录 时 需要 以下 两个 参数  code : < str > ,  图片 验证 验证码 中 的 字符  code _ url _ obj : < json > , 图片 验证 验证码 url  对象  : return :  2 . 第三 三方 第三方 登录  待 开发 插件 入口", "location": "api/api_doc/#sign-in"}, {"title": "Sign - in - third - party - - callback", "text": "Api  : / api / sign - in / third - party /  / callback  Methods  : GET ,  PUT ,  POST  Permission  : unlimited  Login  auth  :  Request  and  parameters :  PUT  &  POST  &  GET :  第三 三方 第三方 平台 授权 登录 回调  platform :  平台 名称 ： 可以 是 wechat ,  qq ,  github ,  sina _ weibo ,  alipay ,  facebook ,  twitter 等  可 在 sys _ config . py 文件 中 配置 LOGIN _ PLATFORM  : return :", "location": "api/api_doc/#sign-in-third-party-callback"}, {"title": "Sign - out", "text": "Api  : / api / sign - out  Methods  : GET ,  PUT  Permission  : unlimited  Login  auth  :  Request  and  parameters :  GET  or  PUT :  用户 登出 api  use _ jwt _ auth : < int > ,  是否 使用 jwt 验证 .  0  或  1 , 默认 为 0 不 使用 .  如果 是 jwt 验证 登录 信息 的 客户 客户端 use _ jwt _ auth 应为 1  : param  adm :  : return :  * * * ##  Api 文档 说明", "location": "api/api_doc/#sign-out"}, {"title": "Account - profile - public", "text": "Api  : / api / account / profile / public  Methods  : GET  Permission  : unlimited  Login  auth  :  Request  and  parameters :  GET :  获取 用户 公开 信息  user _ id : < str >  is _ basic : < int > ,  0 或 1 , 默认 1 .  为 １ 时 只 获取 最 基本 的 用户 信息  : return :", "location": "api/api_doc/#account-profile-public"}, {"title": "Account - basic", "text": "Api  : / api / account / basic  Methods  : PUT  Permission  : USER  Login  auth  : Yes  Request  and  parameters :  用户 基础 设置  PUT :  编辑 用户 基础 设置  username : < str > ,  新 的 用户 户名 用户名  custom _ domain : < str > ,  个性 域名  editor : < str > ,  ' rich _ text '  or  ' markdown '  如果 你 有 多个 文本 编辑 文本编辑 器 的话 ， 可以 加入 这个 选项  : return :", "location": "api/api_doc/#account-basic"}, {"title": "Account - profile", "text": "Api  : / api / account / profile  Methods  : GET ,  PUT  Permission  : USER  Login  auth  : Yes  Request  and  parameters :  用户 资料  GET :  获取 当前 登录 用户 的 信息  is _ basic : < int > ,  0 或 1 , 默认 1 .  为 １ 时 只 获取 最 基本 的 用户 信息  PUT  更新 用户 资料  gender : < str > ,  m  or  f  or  secret  birthday : < int  or  str > ,  The  format  must  be  \" YYYYMMDD \"  , such  as :  20170101  address : < dict > ,  The  format  must  be :  { countries : ' string ' ,  provinces : ' string ' ,  city : ' string ' ,  district : ' string ' ,  detailed : ' string ' }  info : < str >  : return :", "location": "api/api_doc/#account-profile"}, {"title": "Account - email", "text": "Api  : / api / account / email  Methods  : PUT  Permission  : USER  Login  auth  : Yes  Request  and  parameters :  PUT  账户 邮件 修改  email : < email > ,  要 绑定 的 新 邮箱  new _ email _ code : < str > ,  新 邮箱 收取 到 的 验证 验证码 , 用于 保证 绑定 的 邮箱 时 用户 自己 的  current _ email _ code : < str > ,  当前 邮箱 收取 的 验证 验证码 , 用于 保证 邮箱 修改 是 用户 自己 发起  password : < str > ,  账户 的 登录 密码  : return :  * * * ##  Api 文档 说明", "location": "api/api_doc/#account-email"}, {"title": "Admin - message - send", "text": "Api  : / api / admin / message / send  Methods  : POST  Permission  : EDITOR  Login  auth  : Yes  Request  and  parameters :  POST  发送 消息  title : < title > , 标题  content : < str > , 正文  content _ html : < str > , 正文 html  send _ type : < array > , 发送 类型 on _ site ,  email ,  sms  .  如 : [ \" email \" ] ,  也 可以 同时 发送 多个 个 [ \" email \" ,  \" on _ site \" ]  username : < array > ,  接收 信息 的 用户 户名 用户名 ,  如 [ \" test \" ,  \" test2 \" ]  : return :", "location": "api/api_doc/#admin-message-send"}, {"title": "Admin - message - on - site", "text": "Api  : / api / admin / message / on - site  Methods  : GET ,  PUT ,  DELETE  Permission  : EDITOR  Login  auth  : Yes  Request  and  parameters :  GET :  获取 用户 消息  is _ sys _ msg : < int > , 获取 系统 消息 ?  1 表示 是 ,  0 表示 否  pre : < int > , 每页 获取 几条 数据 , 默认 10  page : < int > , 第几 几页 第几页 , 默认 1  type : < array > , 消息 类型 ,  比如 [ \" notice \" ,  \" comment \" ,  \" audit \" ]  DELETE :  删除 消息 ( 此 接口 只能 删除 由 系统 发出 的 消息 user _ id = = 0 的 )  ids : < array > , 消息 id  : return :", "location": "api/api_doc/#admin-message-on-site"}, {"title": "Admin - message - sms", "text": "Api  : / api / admin / message / sms  Methods  : GET ,  DELETE  Permission  : EDITOR  Login  auth  : Yes  Request  and  parameters :  GET :  获取 系统 发送 出去 的 邮件 或 短信 记录  status : < str > ,  状态 ,  normal ,  abnormal ,  error  pre : < int > , 每页 获取 几条 数据 , 默认 10  page : < int > , 第几 几页 第几页 , 默认 1  DELETE :  删除 消息 ( 此 接口 只能 删除 由 系统 发出 的 消息 user _ id = = 0 的 )  ids : < array > , 消息 id  : return :  * * * ##  Api 文档 说明", "location": "api/api_doc/#admin-message-sms"}, {"title": "User - message", "text": "Api  : / api / user / message  Methods  : GET ,  PUT ,  DELETE  Permission  : unlimited  Login  auth  : Yes  Request  and  parameters :  GET :  获取 用户 的 消息  type : < array > , 消息 类型 ,  比如 [ \" notice \" ,  \" private _ letter \" ]  label : < array > ,  消息 label ,  默认 全部 label ,  比如 [ ' comment ' ,  ' audit _ failure ' ,  ' sys _ notice ' ]  pre : < int > , 每页 获取 几条 数据 , 默认 10  page : < int > , 第几 几页 第几页 , 默认 1  status _ update : < str > , 获取 后 的 消息 状态 更新 .  可以 为 :  \" have _ read \"  PUT :  更新 消息 状态  ids : < array > , 消息 id  status _ update : < str > , 获取 后 的 消息 状态 更新 .  可以 为 :  \" have _ read \"  DELETE :  删除 消息  ids : < array > , 消息 id  : return :", "location": "api/api_doc/#user-message"}, {"title": "Global", "text": "Api  : / api / global  Methods  : GET  Permission  : unlimited  Login  auth  :  Request  and  parameters :  GET :  获取 当前 全局 数据 , 包括 站点 的 公开 设置 ,  当前 登录 用户 的 基本 可 公开 信息  : return :", "location": "api/api_doc/#global"}, {"title": "Global - media", "text": "Api  : / api / global / media  Methods  : GET  Permission  : unlimited  Login  auth  :  Request  and  parameters :  GET :  1 . 获取 指定 的 媒体 多媒体 数据  conditions : < array : dict > ,  Such  as : [ { ' type ' : < str > ,  ' names ' : < array > ,  ' name _ regex ' : ' ' } ]  说明 :  type - 可以 是 \" text \" ,  \" image \" ,  \" video \" ,  \" audio \"  names - 数组 , 指定 要 获取 数据 获取数据 的 name  name _ regex - 字符 字符串 , 获取 匹配 此 正则 的 media , 如果 为 空值 ， 则 不 使用 正则 匹配 ( 空置 包括 null ,  None , False ,  \" \" )  注意 : name  与 name _ regex 不能 同时 使用 , 当 name _ regex 非空时 ， 查询 自动 忽略 names  使用 示例 ： 前提 在 管理 端 媒体 多媒体 中 存在 的 内容  如 : 首页 轮播 图片 和 获取 ” 关于 我们 “ 页面 的 文字 内容  [  { \" type \" : \" image \" ,  \" names \" : [ \" home - carousel - 1 \" ,  \" home _ carousel - 2 \" ] } ,  { \" type \" : \" text \" ,  \" names \" : [ \" about - me \" ] } ,  { \" type \" : \" image \" ,  \" name _ regex \" : \" test - [ 0 - 9 ] + \" }  ]  2 . 获取 指定 category 的 媒体 多媒体  category _ name : < array >  category  name ,  可 同时 指定 多个 category  name ,  使用 数组  category _ user _ id : < str > ,  为 空则 表示 获取 站点 官方 的 媒体 多媒体  category _ type : < str > ,  可 选 \" text \" ,  \" image \" ,  \" video \" ,  \" audio \"  page : < int > ,  第几 几页 第几页 ,  默认 1  pre : < int > ,  每页 几条 数据 ,  默认 8  3 . 根据 id  获取  media _ id : < str >  : return :  * * * ##  Api 文档 说明", "location": "api/api_doc/#global-media"}, {"title": "Admin - audit - rule - key", "text": "Api  : / api / admin / audit / rule / key  Methods  : GET  Permission  : WEB _ SETTING  Login  auth  : Yes  Request  and  parameters :  GET :  获取 审核 规则 的 所有 key 与 说明 ,  也 就 config 设置 中 的 audit  : return :", "location": "api/api_doc/#admin-audit-rule-key"}, {"title": "Admin - audit - rule", "text": "Api  : / api / admin / audit / rule  Methods  : GET ,  POST ,  PUT ,  PATCH ,  DELETE  Permission  : WEB _ SETTING  Login  auth  : Yes  Request  and  parameters :  GET :  1 .  获取 所有 验证 规则  project : < str > ,  \" username \" ,  \" post _ category \" ,  keyword : < str > , 不能 使用 的 关键 关键词 , 支持 正则  page : < int > ,  第几 几页 第几页 ,  默认 1  pre : < int > ,  每页 返回 pre 条 数据 ， 默认 10  : return :  POST :  添加 验证 规则  project : < str > ,  \" username \" ,  \" post _ category \"  rule : < str >  : return :  DELETE :  删除 规则  ids : < array > ,  rule  ids  : return :  * * * ##  Api 文档 说明", "location": "api/api_doc/#admin-audit-rule"}, {"title": "Admin - setting - sys - log", "text": "Api  : / api / admin / setting / sys / log  Methods  : GET  Permission  : SYS _ SETTING  Login  auth  : Yes  Request  and  parameters :  GET :  获取 文件 日志  name : < str > , 日志 名称  ip : < str > , 要 获取 哪个 主机 的 日志  page : < int >  : return :", "location": "api/api_doc/#admin-setting-sys-log"}, {"title": "Session - language - set", "text": "Api  : / api / session / language - set  Methods  : PUT  Permission  : unlimited  Login  auth  :  Request  and  parameters :  PUT  :  修改 当前 语言  language : < str > ,  如 en _ US ,  zh _ CN  : return :", "location": "api/api_doc/#session-language-set"}, {"title": "Admin - setting - sys - host", "text": "Api  : / api / admin / setting / sys / host  Methods  : GET ,  POST ,  PUT ,  DELETE  Permission  : SYS _ SETTING  Login  auth  : Yes  Request  and  parameters :  GET :  获取 主机 的 信息  ip : < str > , 要 获取 哪个 主机 的 日志  : return :  PUT :  设置 主机 连接 信息 与 重启 命令  username : < str > , 主机 用户 户名 用户名  password : < str > , 主机 密码  host _ ip : < str > , 要 获取 哪个 主机 的 日志  host _ port : < int > , 主机 端口  cmd : < str > ,  命令 ,  注释 使用 #", "location": "api/api_doc/#admin-setting-sys-host"}, {"title": "Admin - setting - sys - host - cmd - execute", "text": "Api  : / api / admin / setting / sys / host / cmd - execute  Methods  : PUT  Permission  : SYS _ SETTING  Login  auth  : Yes  Request  and  parameters :  PUT :  命令 执行  host _ ip : < str >  cmd : < str > ,  要 执行 的 Linux  命令 , 如果 没有 则 自动 执行 主机 保存 的 常用 命令 常用命令  : return :", "location": "api/api_doc/#admin-setting-sys-host-cmd-execute"}, {"title": "Admin - setting - sys - host - connection - test", "text": "Api  : / api / admin / setting / sys / host / connection - test  Methods  : PUT  Permission  : SYS _ SETTING  Login  auth  : Yes  Request  and  parameters :  PUT :  服务 务器 服务器 连接 测试  host _ ip : < str >  : return :  * * * ##  Api 文档 说明", "location": "api/api_doc/#admin-setting-sys-host-connection-test"}, {"title": "Admin - setting - sys - config - version", "text": "Api  : / api / admin / setting / sys / config / version  Methods  : GET ,  PUT  Permission  : SYS _ SETTING  Login  auth  : Yes  Request  and  parameters :  GET :  获取 所有 的 系统 统配 配置 系统配 系统配置 版本 ,  和 网站 服务 务器 服务器 主机  PUT :  切换 单个 节点 网站 的 配置 版本  switch _ version : < str > ,  需要 切换 的 版本 版本号  diable _ update : < int >  ,  0  or  1  host _ ip : < str > ,  主机 ip  : return :", "location": "api/api_doc/#admin-setting-sys-config-version"}, {"title": "Admin - setting - sys - config", "text": "Api  : / api / admin / setting / sys / config  Methods  : GET ,  PUT  Permission  : SYS _ SETTING  Login  auth  : Yes  Request  and  parameters :  GET :  根据 project 获取 当前 最新 配置 ( 特殊 配置 将 不会 返回 , 如 不 允许 再 页面 编辑 的 , 即 那些 不 带有 \" __ restart __ \" key 的 )  project : < array > ,  能 同时 获取 多个 project 的 数据 . 不 使用 参数 此参数 则 表示 获取 全部 配置  keyword : < str > ,  搜索 匹配 关键 关键字 的 结构  only _ project _ field : < int > ,  只 需要 project 字段 .  0  or  1 . 默认 为 0  PUT :  key : < str > ,  要 设置 的 配制 参数 的 key  project : < str > ,  项目 , 比如 这个 key 是 comment 下 的 ， 则 project 为 comment  value : < str  or  int  or  bool  or  list  or  dict  or  tuple > ,  key 对应 的 值  info : < str > ,  说明  : return :", "location": "api/api_doc/#admin-setting-sys-config"}, {"title": "Token - access - token", "text": "Api  : / api / token / access - token  Methods  : GET  Permission  : unlimited  Login  auth  :  Request  and  parameters :  GET :  客户 客户端 获取 / 刷新 AccessToken  ( 必须 使用 SecretToken 验证 通过 )  如果 请求 头 中 带有 ClientId  则 使用 客户 客户端 提供 的 ClientId ,  否则 创建 新 的 ClientId  : return :", "location": "api/api_doc/#token-access-token"}, {"title": "Admin - token - secret - token", "text": "Api  : / api / admin / token / secret - token  Methods  : GET ,  POST ,  PUT ,  DELETE  Permission  : ROOT  Login  auth  : Yes  Request  and  parameters :  客户 客户端 访问 使用 的 secret  token 管理  GET :  获取 所有 secret  token  POST :  创建 一个 secret  token  PUT :  激活 或 禁用 一个 id  token _ id : < id > , token  id  action : < str > , 如果 为 \" activate \" 则 激活 token ,  为 \" disable \" 禁用 token  DELETE :  删除 一个 token  token _ id : < id > , token  id  : return :  * * * ##  Api 文档 说明", "location": "api/api_doc/#admin-token-secret-token"}, {"title": "Admin - url - permission", "text": "Api  : / api / admin / url / permission  Methods  : GET ,  POST ,  PUT ,  DELETE  Permission  : ROOT  Login  auth  : Yes  Request  and  parameters :  GET :  获取 系统 的 web  url  type : < array > , 类型 ,  可选 api ,  static ,  page  pre : < int > , 每页 获取 几条 数据 , 默认 10  page : < int > , 第几 几页 第几页 , 默认 1  keyword : < str > , 搜索 关键 关键字  POST :  添加 页面 路由  url : < str > ,  只 用于 添加 页面 路由  PUT :  更新 权限  id : < str > , id  method : < str >  custom _ permission : < array > ,  如 [ 1 ,  512 ,  128 ]  login _ auth : < int > ,  0  或  １ ,  是否 需要 登录 验证 ( 如果 原代 代码 原代码 路由 中 指定 未指定 需要 登录 请求 ,  则 按照 此 配置 )  DELETE :  删除 手动 添加 的 页面 路由  ids : < array >  : return :  * * * ##  Api 文档 说明", "location": "api/api_doc/#admin-url-permission"}, {"title": "Upload - file", "text": "Api  : / api / upload / file  Methods  : POST  Permission  : USER  Login  auth  : Yes  Request  and  parameters :  POST  文件 上传  api 返回 json 数据 , 格式 默认 如下 :  { ' urls ' : [ < url > ,  ... , < url > ] ,  ' state ' : < ' success '  or  ' error ' > ,  ' msg _ type ' : < ' s '  or  e ' > ,  ' msg ' : ' '  }  return _ url _ key :  < str > ,  自定 定义 自定义 返回 数据 的 urls 的 key ,  默认 ' urls '  return _ state _ key : < str > ,  自定 定义 自定义 返回 数据 的 状态 的 key ,  默认 ' state '  return _ success : < str  or  int > ,  自定 定义 自定义 返回 数据 成功 的 状态 的 值 ,  默认 ' success '  return _ error : < str  or  int > ,  自定 定义 自定义 返回 数据 错误 的 状态 的 值 ,  默认 ' error '  prefix : < str > ,  默认 为 “ generic / ” ,  则 会 将 文件 放入 到 generic 目录 下  save _ temporary _ url ： < 0  or  1 > , 默认 为 1 ,  如果  : return :", "location": "api/api_doc/#upload-file"}, {"title": "Admin - upload - media - file", "text": "Api  : / api / admin / upload / media - file  Methods  : GET ,  POST ,  PUT ,  DELETE  Permission  : EDITOR  Login  auth  : Yes  Request  and  parameters :  GET  1 . 获取 多个 媒体 信息 多媒体 多媒体信息  file _ type : < str > ,  文件 类型 文件类型 , 可 选 \" image \" ,  \" video \" ,  \" audio \" ,  \" other \"  category _ id : < str > ,  分类 id ,  获取 默认 分类 使用 \" default \" 作为 category _ id ,  不 传入 参数 此参数 则 表示 获取 全部  keyword : < str > , 搜索 用  page : < int > ,  第几 几页 第几页 ,  默认 1  pre : < int > ,  每页 几条 数据 ,  默认 12  sort : < array > , 排序 ,  1 表示 升序 ,  - 1 表示 降序 . 如 :  按 时间 降序  [ { \" time \" : - 1 } ]  按 时间 升序  [ { \" time \" ,  1 } ]  默认 时 按 时间 降序 ,  也 可以 用 其他 字 段 排序  2 . 获取 1 个 信息  id : < str > , id  POST  添加 媒体  name : < str > ,  名字  link : < str > ,  链接 ,  用于 展示 的 时候 跳转 链接  link _ name : < str > , 链接 名字  link _ open _ new _ tab : < str > , 链接 是否 打开 新 标签  title : < str > ,  展示 的 标题  name : < str > ,  展示 时 需要 显示 的 文字  text : < str >  text _ html : < str > ,  text 的 html 格式 ( 富 文本 )  type : < str > ,  文件 类型 文件类型 , 可 选 \" image \" ,  \" video \" ,  \" audio \" ,  \" text \" , \" other \"  category _ id : < str > ,  分类 id  * * 如果 需要 上传 文件 , 还 需要 一下 参数 :  batch : < int > ,  0  or  1 ,  default : 0 ,  为 1 表示 批量 上传 .  return _ url _ key :  < str > ,  自定 定义 自定义 返回 数据 的 urls 的 key ,  默认 ' urls '  return _ state _ key : < str > ,  自定 定义 自定义 返回 数据 的 状态 的 key ,  默认 ' state '  return _ success : < str  or  int > ,  自定 定义 自定义 返回 数据 成功 的 状态 的 值 ,  默认 ' success '  return _ error : < str  or  int > ,  自定 定义 自定义 返回 数据 错误 的 状态 的 值 ,  默认 ' error '  * * 注意 :  如果 后台 获取 有 文件 上传 ， 则 表示 只 上传 文件  上传 文件 返回 数据 格式 数据格式 默认 如下 :  { ' urls ' : [ < url > ,  ... , < url > ] ,  ' state ' : < ' success '  or  ' error ' > ,  ' msg _ type ' : < ' s '  or  e ' > ,  ' msg ' : ' '  }  PUT  编辑 媒体 信息 多媒体 多媒体信息  id : < str > , 要 编辑 的 media  id  category _ id : < str > , 要 编辑 的 文件 的 分类 id ,  如果 不 修改 分类 可以 不 提交  name : < str >  link : < str > ,  链接  link _ name : < str > , 链接 名字  link _ open _ new _ tab : < str > , 链接 是否 打开 新 标签  title : < str >  text : < str >  text _ html : < str > ,  text 的 html 格式 ( 富 文本 )  * * 如果 只 更新 文件 ( 如 图片 ) , 还 需要 一下 参数 :  batch : < int > ,  0  or  1 ,  default : 0 ,  为 1 表示 批量 上传 .  return _ url _ key :  < str > ,  自定 定义 自定义 返回 数据 的 urls 的 key ,  默认 ' urls '  return _ state _ key : < str > ,  自定 定义 自定义 返回 数据 的 状态 的 key ,  默认 ' state '  return _ success : < str  or  int > ,  自定 定义 自定义 返回 数据 成功 的 状态 的 值 ,  默认 ' success '  return _ error : < str  or  int > ,  自定 定义 自定义 返回 数据 错误 的 状态 的 值 ,  默认 ' error '  * * 注意 :  如果 后台 获取 有 文件 上传 ， 则 表示 只 上传 文件  上传 文件 返回 数据 格式 数据格式 默认 如下 :  { ' urls ' : [ < url > ,  ... , < url > ] ,  ' state ' : < ' success '  or  ' error ' > ,  ' msg _ type ' : < ' s '  or  e ' > ,  ' msg ' : ' '  }  DELETE  删除 媒体 多媒体 文件  ids : < array > , 要 删除 的 文件 的 id  : return :  * * * ##  Api 文档 说明", "location": "api/api_doc/#admin-upload-media-file"}, {"title": "User - follow", "text": "Api  : / api / user / follow  Methods  : GET  Permission  : unlimited  Login  auth  :  Request  and  parameters :  GET :  获取 用户 关注 的 用户  user _ id : < str > ,  用户 ID  action : < str > ,  为 followed _ user  获取 当前 的 登录 用户 的 粉丝  action : < str > ,  为 fans  : return :", "location": "api/api_doc/#user-follow"}, {"title": "User - follow", "text": "Api  : / api / user / follow  Methods  : POST ,  DELETE  Permission  : unlimited  Login  auth  : Yes  Request  and  parameters :  POST :  当前 登录 用户 关注 另 一个 用户 用户  ids : < array > , 需 关注 用户 的 user  id  DELETE :  当前 登录 用户 取消 关注 一个 用户  ids : < array > , 不再 关注 的 用户 的 user  id  : return :  * * * ##  Api 文档 说明", "location": "api/api_doc/#user-follow_1"}, {"title": "Admin - comment - access", "text": "Api  : / api / admin / comment / access  Methods  : GET  Permission  : REPORT  Login  auth  : Yes  Request  and  parameters :  GET :  获取 comment 数据 统计  days : < int >", "location": "api/api_doc/#admin-comment-access"}, {"title": "Admin - post - access", "text": "Api  : / api / admin / post / access  Methods  : GET  Permission  : REPORT  Login  auth  : Yes  Request  and  parameters :  GET :  获取 post 数据 统计  days : < int >", "location": "api/api_doc/#admin-post-access"}, {"title": "Admin - report - basic", "text": "Api  : / api / admin / report / basic  Methods  : GET  Permission  : REPORT  Login  auth  : Yes  Request  and  parameters :  GET :  获取 网站 的 最 基本 报表 数据  project : < array > , 默认 全部 , 可以 是 post ,  comment ,  user ,  message ,  plugin ,  media ,  inform  * * * ##  Api 文档 说明", "location": "api/api_doc/#admin-report-basic"}, {"title": "Content - category - info", "text": "Api  : / api / content / category / info  Methods  : GET  Permission  : unlimited  Login  auth  :  Request  and  parameters :  获取 指定 category  id 的 category 信息  : return :", "location": "api/api_doc/#content-category-info"}, {"title": "Content - category", "text": "Api  : / api / content / category  Methods  : GET ,  POST ,  PUT ,  DELETE  Permission  : unlimited  Login  auth  : Yes  Request  and  parameters :  GET :  action : < str > ,  可以 为 get _ category ,  get _ category _ type ,  默认 get _ category  1 . 获取 当前 用户 指定 的 type 的 所有 category  action : < str > ,  为 get _ category  type : < str > ,  你 设置 的 那 几个 类别 中 的 类别 , 在 config . py 文件 中 category ,  可 在 网站 管理 端 设置 的  2 .  获取 所有 的 type :  config . py 文件 中 category 的 所有 CATEGORY  TYPE  action : < str > ,  为 get _ category _ type  解释 :  在 分类 中 ( category ) 又 分为 几种 类型 ( type )  如 :  type 为 post 有 几个 category  POST :  添加 文集  name : < str >  type : < str > ,  只能 是 你 设置 的 那 几个 类别 , 在 config . py 文件 中 category ,  或者 网站 管理 设置  PUT :  修改 文集  id : < str > ,  post  category  id  name : < str >  DELETE :  删除 文集 名称  ids : < array > ,  post  category  ids", "location": "api/api_doc/#content-category"}, {"title": "Admin - content - category", "text": "Api  : / api / admin / content / category  Methods  : GET ,  POST ,  PUT ,  DELETE  Permission  : EDITOR  Login  auth  : Yes  Request  and  parameters :  Admin 管理 端 category 管理  GET :  1 . 获取 指定 的 type 的 所有 分类  type : < str > ,  你 设置 的 那 几个 类别 中 的 类别 , 在 config . py 文件 中 category ,  或者 网站 管理 设置  2 . 获取 所有 的 type  get _ type : < int > ,  get _ type 为 1  POST :  添加 文集  name : < str >  type : < str > ,  只能 是 你 设置 的 那 几个 类别 , 在 config . py 文件 中 category ,  或者 网站 管理 设置  PUT :  修改 文集  id : < str > ,  post  category  id  name : < str >  DELETE :  删除 文集 名称  ids : < array > ,  post  category  ids  * * * ##  Api 文档 说明", "location": "api/api_doc/#admin-content-category"}, {"title": "Admin - plugin", "text": "Api  : / api / admin / plugin  Methods  : GET ,  POST ,  PUT ,  DELETE  Permission  : SYS _ SETTING  Login  auth  : Yes  Request  and  parameters :  插件 管理  GET :  获取 所有 插件  page : < int > , 第几 几页 第几页 ,  默认 1  pre : < int > , 每页 个数 ,  默认 10  keyword : < str > ,  搜索 用  POST :  插件 安装  upfile : < file > , 上传 的 插件 压缩 压缩包  PUT :  操作 插件  action : < str > ,  start : 激活 插件  stop : 停用 插件  name : < str > ,  插件 名称  : return :", "location": "api/api_doc/#admin-plugin"}, {"title": "Admin - plugin - setting", "text": "Api  : / api / admin / plugin / setting  Methods  : GET ,  POST ,  PUT  Permission  : SYS _ SETTING  Login  auth  : Yes  Request  and  parameters :  插件 设置  GET :  获取 插件 设置  plugin _ name : < str > ,  插件 名  POST :  刷新 当前 插件 配置 ( 当 插件 配置 代码 被 修改 后 , 如果 未 重新 激活 ， 系统 保存 的 配置 是 不会 更新 的 ， 所有 可以 使用 此 方法 刷新 )  plugin _ name : < str > ,  插件 名  PUT :  修改 设置  plugin _ name : < str > ,  插件 名  key : < str > , KEY  value : < 可 多种 种类 类型 多种类型 的 数据 > ,  值  : return :", "location": "api/api_doc/#admin-plugin-setting"}, {"title": "Admin - plugin - setting - install - requirement", "text": "Api  : / api / admin / plugin / setting / install - requirement  Methods  : PUT  Permission  : SYS _ SETTING  Login  auth  : Yes  Request  and  parameters :  插件 需求 包 安装  PUT :  插件 需求 包 安装  plugin _ name : < str > ,  插件 名  : return :  * * * ##  Api 文档 说明", "location": "api/api_doc/#admin-plugin-setting-install-requirement"}, {"title": "Admin - comment", "text": "Api  : / api / admin / comment  Methods  : GET ,  POST ,  PUT ,  PATCH ,  DELETE  Permission  : AUDIT  Login  auth  : Yes  Request  and  parameters :  GET :  获取 评论  status : < str > , \" is _ issued \" （ 正常 发布 ）  or  \" not _ audit \" （ 等待 审核 ）  or  \" unqualified \" （ 未 通过 审核 ）  or  \" user _ remove \" ( 用户 删除 的 )  keyword : < str > , 搜索 关键 关键字  sort : < array > , 排序 ,  1 表示 升序 ,  - 1 表示 降序 . 如 :  按 时间 降序  [ { \" issue _ time \" : - 1 } ]  按 时间 升序  [ { \" issue _ time \" :  1 } ]  先后 按赞 ( like ) 数 降序 ,  评论 数 降序 , pv 降序 ,  发布 时间 降序  [ { \" like \" :  - 1 } , { \" issue _ time \" :  - 1 } ]  默认 时 按 时间 降序 ,  也 可以 用 其他 字 段 排序  page : < int > , 第几 几页 第几页 ， 默认 第 1 页  pre : < int > ,  每页 查询 多少 条 ,  默认 是 config . py 配制 文件 中 配制 的 数量  : return :  PATCH  or  PUT :  1 . 人工 审核 comment ,  带上 参数 score  op : < str > ,  \" audit \"  ids : < array > ,  comment  id  score : < int > ,  0 - 10 分  2 . 恢复 comment ,  只能 恢复 管理 管理员 移入 待 删除 的 comment ,  is _ delete 为 2 的 comment  op : < str > ,  \" restore \"  ids : < array > ,  comment  id  DELETE :  删除 comment  ids : < array > ,  comment  id  pending _ delete : < int > ,  1 :  is _ delete 为 2 ,  标记 为 永久 删除 ,  0 : 从 数据 据库 数据库 删除 数据  : return :", "location": "api/api_doc/#admin-comment"}, {"title": "Comment", "text": "Api  : / api / comment  Methods  : GET  Permission  : unlimited  Login  auth  :  Request  and  parameters :  GET :  获取 文章 的 评论  target _ id : < str > ,  目标 id , 比如 文章 post  id  target _ type : < str > ,  目标 类型 , 比如 文章 就是 \" post \"  status : < str > , \" is _ issued \" （ 正常 发布 ）  or  \" not _ audit \" （ 等待 审核 ）  or  \" unqualified \" （ 未 通过 审核 ）  or  \" user _ remove \" ( 用户 删除 的 )  sort : < array > , 排序 ,  1 表示 升序 ,  - 1 表示 降序 . 如 :  按 时间 降序  [ { \" issue _ time \" : - 1 } ]  按 时间 升序  [ { \" issue _ time \" :  1 } ]  先后 按赞 ( like ) 数 降序 ,  评论 数 降序 , pv 降序 ,  发布 时间 降序  [ { \" like \" :  - 1 } , { \" issue _ time \" :  - 1 } ]  默认 时 按 时间 降序 ,  也 可以 用 其他 字 段 排序  page : < int > , 第几 几页 第几页 ， 默认 第 1 页  pre : < int > ,  每页 查询 多少 条 ,  默认 是 config . py 配制 文件 中 配制 的 数量  : return :", "location": "api/api_doc/#comment"}, {"title": "Comment", "text": "Api  : / api / comment  Methods  : POST ,  PUT ,  PATCH ,  DELETE  Permission  : unlimited  Login  auth  : Yes  Request  and  parameters :  POST :  评论 发布  target _ id : < str > ,  目标 id , 比如 文章 post  id  target _ type : < str > ,  目标 类型 , 比如 文章 就是 \" post \"  reply _ id : < str > ,  被 回复 的 comment  id .  如果 是 回复 评论 中 的 评论 , 如 : 在 评论 a 下面 有 一个 评论 a1 ， 我 需要 回复 a1 ,  这个 时候 需要 提供 的 reply _ id 依然 是 a 评论 的 ，  而 不是 a1 的  reply _ user _ id : < str > ,  被 回复 的 comment  的 用户 的 user  id ，  如果 是 回复 评论 中 的 评论 , 如 : 在 评论 a 下面 有 一个 评论 a1 ， 我 需要 回复 a1 ,  这个 时候 需要 提供 的 reply _ user _ id 是 a １ 评论 的  reply _ username : < str > ,  被 回复 的 comment  的 用户 的 username ，  如果 是 回复 评论 中 的 评论 , 如 : 在 评论 a 下面 有 一个 评论 a1 ， 我 需要 回复 a1 ,  这个 时候 需要 提供 的 reply _ username 是 a １ 评论 的  content : < str > ,  内容 ( 比如 : 富 文本 的 html 内容 ) , 将会 保存 到 数据 据库 数据库 中  如果 是 游客 评论 , 则 需要 以下 两个 参数 ( 需要 再 后台 配置 中 开启 游客 评论 开关 ) :  username : < str > ,  游客 昵称  email : < str > , 游客 邮箱  : return :  DELETE :  评论 删除  ids : < array > ,  comment  ids", "location": "api/api_doc/#comment_1"}, {"title": "Comment - like", "text": "Api  : / api / comment / like  Methods  : PUT  Permission  : unlimited  Login  auth  : Yes  Request  and  parameters :  PUT :  给 评论 点赞  id : < str >  : return :  * * * ##  Api 文档 说明", "location": "api/api_doc/#comment-like"}, {"title": "Inform - content", "text": "Api  : / api / inform / content  Methods  : PUT  Permission  : unlimited  Login  auth  :  Request  and  parameters :  PUT :  内容 违规 举报  ctype : < str > ,  内容 的 类型 可 选 : post ( 文章 ) ,  comment ( 评论 ) ,  media ( 媒体 多媒体 ) ,  user ( 用户 )  cid : < str > ,  内容 的 id  category : < str > ,  举报 内容 违规 类型 ,  可 选 :  ad ,  junk _ info ,  plagiarize ,  other  details ： < str > ,  违规 详情 ( 选填 )  * * * ##  Api 文档 说明", "location": "api/api_doc/#inform-content"}, {"title": "Vercode - send", "text": "Api  : / api / vercode / send  Methods  : POST  Permission  : unlimited  Login  auth  :  Request  and  parameters :  POST :  手机 或 邮箱 验证 验证码 发送  account _ type : < str > ,  \" email \"  or  \" mobile _ phone \"  account : < email  or  number > ,  接收 验证 验证码 的 账户  exist _ account : < int > ,  是否 只能 发送 送给 发送给 用该 邮箱 / 号码 在 本 平台 已 注册 的 用户 ?  1 为 是 ,  0 为否 .  默认 0  如果 1 分钟 内 , 同一 IP , 同一 用户 ( 未 登录 的 同属 一 匿名 用户 )  调用 api 超过 MAX _ NUM _ SEND _ SAMEIP _ PERMIN _ NO _ IMGCODE ( 1 分钟 内 无 图片 验证 验证码 最大 调用 次数 ) 配置 的 次数 ,  超过 后 API 会生 会生会 返回 open _ img _ verif _ code : true ,  表示 需要 图片 验证 验证码 验证 , 客户 客户端 应该 请求 验证 验证码 / api / vercode / image ,  再次 提交 登录 时 需要 以下 两个 参数  code : < str > ,  图片 验证 验证码 中 的 字符  code _ url _ obj : < json > ,  图片 验证 验证码 url  对象  注意 : 如果 你 并 不想 使用 图片 验证 验证码 来 防止 频繁 调用 , 请 在 管理 的 设置 MAX _ NUM _ SEND _ SAMEIP _ PERMIN _ NO _ IMGCODE 的 值 大于  MAX _ NUM _ SEND _ SAMEIP _ PERMIN  : return :", "location": "api/api_doc/#vercode-send"}, {"title": "Vercode - image", "text": "Api  : / api / vercode / image  Methods  : GET  Permission  : unlimited  Login  auth  :  Request  and  parameters :  GET :  获取 图片 验证 验证码  : return :  验证 验证码 path  object", "location": "api/api_doc/#vercode-image"}, {"title": "Post", "text": "Api  : / api / post  Methods  : GET  Permission  : unlimited  Login  auth  :  Request  and  parameters :  GET :  1 . 获取 一篇 文章  post _ id : < str > , post  id  2 . 根据 条件 获取 文章  sort : < array > , 排序 ,  1 表示 升序 ,  - 1 表示 降序 . 如 :  按 时间 降序  [ { \" issue _ time \" : - 1 } , { \" update _ time \" : - 1 } ]  按 时间 升序  [ { \" issue _ time \" :  1 } , { \" update _ time \" :  1 } ]  先后 按赞 ( like ) 数 降序 ,  评论 数 降序 , pv 降序 ,  发布 时间 降序  [ { \" like \" :  - 1 } ,  { \" comment _ num \" :  - 1 } ,  { \" pv \" :  - 1 } , { \" issue _ time \" :  - 1 } ]  默认 时 按 时间 降序 ,  也 可以 用 其他 字 段 排序  status : < int >  ,  \" is _ issued \" （ 正常 发布 ）  or  \" draft \" （ 草稿 ）  or  \" not _ audit \" （ 等待 审核 ）  or  \" unqualified \" （ 未 通过 审核 ）  or  \" recycle \" ( 用户 的 回收 回收站 )  or  \" user _ remove \"  （ user _ remove 是 指 用户 永久 删除 或 被 管理 删除 的 ）  matching _ rec : < str > , 可 选 ， 提供 一段 内容 ,  匹配 一些 文章 推荐  time _ range : < int > , 可 选 , 单位 为天 , 比如 最近 7 天 的 文章  page : < int > , 第几 几页 第几页 ， 默认 第 1 页  pre : < int > ,  每页 查询 多少 条  keyword : < str > ,  Search  keywords ,  搜索 使用  fields : < array > ,  需要 返回 的 文章 字 段 , 如 [ \" title \" ]  unwanted _ fields : < array > ,  不能 和 fields 参数 同时 使用 , 不 需要 返回 的 文章 字 段 , 如 [ \" user _ id \" ]  user _ id : < str > ,  如需 获取 指定 用户 的 post 时 需要 参数 此参数  category _ id : < str > ,  获取 指定 文集 的 post 时 需要 参数 此参数", "location": "api/api_doc/#post"}, {"title": "Post", "text": "Api  : / api / post  Methods  : PUT  Permission  : unlimited  Login  auth  : Yes  Request  and  parameters :  PUT :  喜欢 文章  action : < str > ,  可以 是 like ( 点赞 文章 )  id : < str > ,  post  id  * * * ##  Api 文档 说明", "location": "api/api_doc/#post_1"}, {"title": "User - post", "text": "Api  : / api / user / post  Methods  : POST ,  PUT ,  PATCH ,  DELETE  Permission  : USER  Login  auth  : Yes  Request  and  parameters :  POST :  内容 发布  title : < str > ,  标题  content : < str > ,  内容 ( 比如 : 富 文本 的 html 内容 ) , 将会 保存 到 数据 据库 数据库 中  conetent _ text : < str > ,  纯 文本 内容  editor : < str > ,  使用 的 编辑 编辑器 类型 ,  \" markdown \"  or  \" rich _ text \"  tags : < array > ,  标签  category : < str > ,  post  category  id .  post 分类  cover _ url : < str > , 文章 封面 图 url , 默认 为空  issue _ way : < str > ,  可 选 ' issue '  or  ' save ' .  发布 或者 保存 为 草稿  PUT  or  PATCH :  1 . 内容 修改  id : < str > ,  编辑 已有 的 文章 需要 传入 id ,  新建 文章 不 需要  title : < str > ,  标题  content : < str > ,  内容 ( 比如 : 富 文本 的 html 内容 ) , 将会 保存 到 数据 据库 数据库 中  conetent _ text : < str > ,  纯 文本 内容  editor : < str > ,  使用 的 编辑 编辑器 类型 ,  \" markdown \"  or  \" rich _ text \"  tags : < array > ,  标签  category : < str > ,  post  category  id .  post 分类  issue _ way : < str > ,  可 选 ' issue '  or  ' save ' .  发布 或者 保存 为 草稿  2 . 恢复 回收 回收站 的 post  op : < str > ,  restore  ids : < array > ,  posts  id  DELETE :  删除 post  ids : < array > ,  posts  id  recycle : < int > , 1  or  0 ,  1 ： 则 移入 回收 回收站 ,  0 :  则 直接 标记 为 永久 删除 ,  管理 管理员 才 可见", "location": "api/api_doc/#user-post"}, {"title": "Admin - post", "text": "Api  : / api / admin / post  Methods  : GET ,  POST ,  PUT ,  PATCH ,  DELETE  Permission  : AUDIT  Login  auth  : Yes  Request  and  parameters :  GET :  1 .  根据 条件 获取 文章  sort : < array > , 排序 ,  1 表示 升序 ,  - 1 表示 降序 . 如 :  按 时间 降序  [ { \" issue _ time \" : - 1 } , { \" update _ time \" , - 1 } ]  按 时间 升序  [ { \" issue _ time \" ,  1 } , { \" update _ time \" , 1 } ]  先后 按赞 ( like ) 数 降序 ,  评论 数 降序 , pv 降序 ,  发布 时间 降序  [ { \" like \" ,  - 1 } ,  { \" comment _ num \" ,  - 1 } ,  { \" pv \" ,  - 1 } , { \" issue _ time \" ,  - 1 } ] ;  默认 时 按 时间 降序 ,  也 可以 用 其他 字 段 排序  page : < int > , 第几 几页 第几页 ， 默认 第 1 页  pre : < int > ,  每页 查询 多少 条  status : < int >  ,  \" is _ issued \" （ 正常 发布 ）  or  \" draft \" （ 草稿 ）  or  \" not _ audit \" （ 等待 审核 ）  or  \" unqualified \" （ 未 通过 审核 ）  or  \" recycle \" ( 用户 的 回收 回收站 )  or  \" user _ remove \"  （ user _ remove 是 指 用户 永久 删除 或 被 管理 删除 的 ）  keyword : < str > ,  Search  keywords ,  搜索 的 时候 使用  fields : < array > ,  需要 返回 的 文章 字 段 , 如 [ \" title \" ]  unwanted _ fields : < array > ,  不能 和 fields 参数 同时 使用 , 不 需要 返回 的 文章 字 段 , 如 [ \" content \" ]  : return :  2 . 获取 一篇 文章  post _ id : < str > , post  id  status : < str > , 状态 ,  可以 是 \" is _ issued \"  or  \" draft \"  or  \" not _ audit \"  or  \" unqualified \"  or  \" recycle \"  PATCH  or  PUT :  1 . 人工 审核 post  op : < str > ,  为 \" audit \"  ids : < str > ,  posts  id  score : < int > ,  0 - 10 分  2 . 恢复 post ,  只能 恢复 管理 管理员 移入 待 删除 的 文章 is _ delete 为 3 的 post  op : < str > ,  为 \" restore \"  ids : < array > ,  posts  id  DELETE :  删除 post  ids : < array > ,  posts  id  pending _ delete : < int > ,  1 :  标记 is _ delete 为 3 ,  对于 post 属于 的 用户 永久 删除 ,  0 : 从 数据 据库 数据库 删除 数据  : return :  * * * ##  Api 文档 说明", "location": "api/api_doc/#admin-post"}, {"title": "Search", "text": "Api  : / api / search  Methods  : GET  Permission  : unlimited  Login  auth  :  Request  and  parameters :  GET :  搜索 ( 暂 不 支持 全文 搜索 ) ,  只能 搜索 文章 ,  用户  keyword : < str > ,  Search  keywords  target : < str > ,  可 选 \" post \"  或  \" user \" .  不 使用 参数 此参数 则 搜索 所有 可 选 目标  page : < int > , 第几 几页 第几页 ， 默认 第 1 页  pre : < int > ,  每页 多少 条", "location": "api/api_doc/#search"}, {"title": "Admin - static - file", "text": "Api  : / api / admin / static / file  Methods  : GET ,  POST ,  PUT ,  DELETE  Permission  : SYS _ SETTING  Login  auth  : Yes  Request  and  parameters :  GET :  1 . 获取 静态 文件 内容  file _ path : < str > , 静态 文件 所在 目录  filename : < str > , 文件 文件名  2 . 获取 静态 文件 文件名 列表  page : < int > ,  第几 几页 第几页 ,  默认 1  pre : < int > ,  第几 几页 第几页 ,  默认 15  keyword : < str > , 关键 关键词 搜索 用  type : < str > ,  \" all \"  or  \" default \"  or  \" custom \"  PUT :  编辑 静态 文件 内容  file _ path : < str > , 静态 文件 所在 目录  filename : < str > , 文件 文件名  content : < str > ,  内容  * * * ##  Api 文档 说明", "location": "api/api_doc/#admin-static-file"}, {"title": "Admin - theme - page", "text": "Api  : / api / admin / theme / page  Methods  : GET ,  POST ,  PUT ,  DELETE  Permission  : SYS _ SETTING  Login  auth  : Yes  Request  and  parameters :  POST :  添加 页面  routing : < str > , 路由  content : < str > ,  内容  DELETE :  删除 自己 添加 的 页面  file _ path : < str > , 页面 html 文件 所在 目录  filename : < str > , 页面 html 文件 文件名", "location": "api/api_doc/#admin-theme-page"}, {"title": "Admin - theme", "text": "Api  : / api / admin / theme  Methods  : GET ,  POST ,  PUT ,  DELETE  Permission  : SYS _ SETTING  Login  auth  : Yes  Request  and  parameters :  主题 管理  GET :  获取 当前 所有 主题  POST :  主题 安装  upfile : < file > ,  上传 的 主题 文件  PUT :  切换 主题  theme _ name : < str > ,  主题 名称  DELETE :  删除 主题  theme _ name : < str > ,  主题 名称  : return :", "location": "api/api_doc/#admin-theme"}, {"title": "Deploy", "text": "部署 方式  Nginx + uwsgi  部署 Python  Web 的 方式 有 好多 中 ,  这里 只是 举例 其中 一种 方式 ,  使用  Nginx  +  uwsgi  部署 .  查阅 资料 , 认为 uwsgi 性能 还 不错  uwsgi 安装 与 配置  安装  pip  安装 uwsgi ( 如果 有 建有 python 虚拟 环境 虚拟环境 的 请 先 进入 虚拟 环境 虚拟环境 再 安装 )  pip  install  uwsgi  配置  新建 一个 文件 uwsgi . ini  ( 建议 在 osroom 目录 根目录 下 ) ， 写入 如下 配置 :  [ uwsgi ]  #  使用 uwsgi 示范  #  uwsgi  启动 时所 使用 的 地址 与 端口  socket  =  127.0 . 0.1 : 6001  #  指向 网站 目录  chdir = / home / work / project / osroom  #  python  启动 程序 文件  wsgi - file  =  start . py  #  python  程序 内 用以 启动 的  application  变量 变量名  callable  =  app  master  =  true  enable - threads  =  true  #  启动 的 线程  processes  =  4  vacuum  =  true  die - on - term  =  true  harakiri  =  30  #  每 一个 工作 进程 都 生成 以后 才 加载 应用 程序 应用程序  lazy  =  true  disable - logging  =  true  #  状态 检测 地址  stats  =  127.0 . 0.1 : 9191  #  pid  pidfile  =  / tmp / osroom _ uwsgi . pid  其他 配置 项 可以 参考 uwsgi 文档  启动 网站  注意 ： 启动 前 确认 osroom 的 数据 据库 数据库 是否 已 配置 正确  启动 命令  #  如果 uwsgi 装在 python 虚拟 环境 虚拟环境 ， 要 先 进入 虚拟 环境 虚拟环境 , 再用 如下 命令 启动  uwsgi  / home / work / project / osroom / uwsgi . ini  （ 附加 ） 方法 2 ： 如果 uwsgi 安装 在 python 虚拟 环境 虚拟环境 中 ， 又 不想 进入 虚拟 环境 虚拟环境 ， 可以 这样 启动  #  venv _ osroom 是 我 的 虚拟 环境 虚拟环境 目录  / home / work / project / venv _ osroom / bin / uwsgi  / home / work / project / osroom / uwsgi . ini  -  启动 成功 后 :  由于 uwsgi . ini 配置 的 端口 是 6001 ， 所以 不能 通过 其他 端口 访问 网站 ， 需要 下面  配置 Nginx 转发 到 6001 端口  ...  uwsgi  socket  0  bound  to  TCP  address  127.0 . 0.1 : 6001  fd  3  Python  version :  3.5 . 2  ( default ,  Nov  23  2017 ,  16 : 37 : 01 )  [ GCC  5.4 . 0  20160609 ]  Python  main  interpreter  initialized  at  0x1b9bcd0  python  threads  support  enabled  ...  * * *  Operational  MODE :  preforking  * * *  * * *  uWSGI  is  running  in  multiple  interpreter  mode  * * *  spawned  uWSGI  master  process  ( pid :  22449 )  spawned  uWSGI  worker  1  ( pid :  22450 ,  cores :  1 )  spawned  uWSGI  worker  2  ( pid :  22451 ,  cores :  1 )  spawned  uWSGI  worker  3  ( pid :  22452 ,  cores :  1 )  spawned  uWSGI  worker  4  ( pid :  22453 ,  cores :  1 )  ...  worker  1  buried  after  1  seconds  worker  2  buried  after  1  seconds  worker  3  buried  after  1  seconds  worker  4  buried  after  1  seconds  ...  Nginx  安装 与 配置  安装  Ubuntu  14.04 或 Ubuntu  16.04 使用 apt - get 直接 安装 如下 ：  sudo  apt - get  install  nginx  也 可以 使用 wget 下载 ， 再 安装 ， 请 自行 Google 查找 教程 哈  配置 文件 配置文件  创建 一个 nginx 配置 文件 配置文件 osroom - naginx . conf ， 文件 配置 如下 ( 这里 只是 示范 ， Nginx 有 许多 配置 项 可以 自己 查找 教程 ) :  upstream  osroom - web  {  #  转发 到 6001 端口  server  127.0 . 0.1 : 6001 ;  }  server  {  #  监听 80 端 端口  listen  80 ;  server _ name  < 你 的 域名 > ;  gzip  on ;  gzip _ comp _ level  5 ;  gzip _ types  application / json  text / plain  application / javascript  application / x - javascript  text / javascript  text / xml  text / css ;  open _ log _ file _ cache  max = 1000  inactive = 20s  valid = 1m  min _ uses = 2 ;  access _ log  / var / log / nginx / manage . vhost . access . log ;  error _ log  / var / log / nginx / manage . vhost . error . log ;  location  /  {  include  uwsgi _ params ;  #  upstream  的 那个 名称  uwsgi _ pass  osroom - web ;  #  python 虚拟 环境 虚拟环境 目录 路径  uwsgi _ param  UWSGI : _ PYHOME  / home / work / project / venv _ osroom ;  #  项目 目录 路径  uwsgi _ param  UWSGI _ CHDIR  / home / work / project / osroom - demo ; ;  uwsgi _ param  UWSGI _ SCRIPT  start : app ;  }  }  如果 需要 配置 ssl 请 加上 监听 443 端口 ， 配置 好 证书 ， 然后 80 端口 301 定向 重定向 到 443  https 请求 ,  如下 :  ( 不需 配置 SSL 证书 的 请 直接 跳过 此 步骤 )  upstream  osroom - web  {  #  转发 到 6001 端口  server  127.0 . 0.1 : 6001 ;  }  server  {  #  监听 443 端 端口  listen  443 ;  server _ name  < 你 的 域名 > ;  ssl  on ;  root  html ;  index  index . html  index . htm ;  #  ssl 证书 文件  ssl _ certificate  / home / work / project / 15212232323 . pem ;  ssl _ certificate _ key  / home / work / project / 15212232323 . key ;  ssl _ session _ timeout  5m ;  ssl _ ciphers  ECDHE - RSA - AES128 - GCM - SHA256 : ECDHE : ECDH : AES : HIGH : ! NULL : ! aNULL : ! MD5 : ! ADH : ! RC4 ;  ssl _ protocols  TLSv1  TLSv1.1  TLSv1.2 ;  ssl _ prefer _ server _ ciphers  on ;  gzip  on ;  gzip _ comp _ level  5 ;  gzip _ types  application / json  text / plain  application / javascript  application / x - javascript  text / javascript  text / xml  text / css ;  open _ log _ file _ cache  max = 1000  inactive = 20s  valid = 1m  min _ uses = 2 ;  access _ log  / var / log / nginx / manage . vhost . access . log ;  error _ log  / var / log / nginx / manage . vhost . error . log ;  location  /  {  include  uwsgi _ params ;  #  upstream  的 那个 名称  uwsgi _ pass  osroom - web ;  #  python 虚拟 环境 虚拟环境 目录 路径  uwsgi _ param  UWSGI : _ PYHOME  / home / work / project / venv _ osroom ;  #  项目 目录 路径  uwsgi _ param  UWSGI _ CHDIR  / home / work / project / osroom - demo ; ;  uwsgi _ param  UWSGI _ SCRIPT  start : app ;  }  }  server  {  listen  80 ;  server _ name  < 你 的 域名 > ;  return  301  https : / / $ server _ name $ request _ uri ;  }  写 好 配置 文件 配置文件 后 编辑 nginx 主 配置 文件 配置文件 include  上 一步 写 的 配置 文件 配置文件  #  Ubuntu  apt - get 安装 后 的 Nginx 配置 文件 配置文件 在 / etc / nginx / nginx . conf  #  编辑 / etc / nginx / nginx . conf 找到 在 http  { } 里面 最后 添加 osroom . conf  #  可以 用 * 通配符 ， 前提 是 该 目录 下 没有 其他 非 nginx 得 . conf 配置 文件 配置文件  http  {  ...  include  / home / work / project / * . conf ;  }  重启 Nginx  sudo  / etc / init . d / nginx  restart  访问  这个 时候 就 可以 通过 域名 （ 域名 有 解析 到 服务 务器 服务器 的 情况 下 ） 或 IP 访问 OSROOM 了", "location": "app/deploy/"}, {"title": "部署 方式", "text": "", "location": "app/deploy/#_1"}, {"title": "& nbsp ; & nbsp ; Nginx + uwsgi", "text": "部署 Python  Web 的 方式 有 好多 中 ,  这里 只是 举例 其中 一种 方式 ,  使用  Nginx  +  uwsgi  部署 .  查阅 资料 , 认为 uwsgi 性能 还 不错", "location": "app/deploy/#nginxuwsgi"}, {"title": "uwsgi 安装 与 配置", "text": "", "location": "app/deploy/#uwsgi"}, {"title": "& nbsp ; & nbsp ; 安装", "text": "pip  安装 uwsgi ( 如果 有 建有 python 虚拟 环境 虚拟环境 的 请 先 进入 虚拟 环境 虚拟环境 再 安装 )  pip  install  uwsgi", "location": "app/deploy/#_2"}, {"title": "& nbsp ; & nbsp ; 配置", "text": "新建 一个 文件 uwsgi . ini  ( 建议 在 osroom 目录 根目录 下 ) ， 写入 如下 配置 :  [ uwsgi ]  #  使用 uwsgi 示范  #  uwsgi  启动 时所 使用 的 地址 与 端口  socket  =  127.0 . 0.1 : 6001  #  指向 网站 目录  chdir = / home / work / project / osroom  #  python  启动 程序 文件  wsgi - file  =  start . py  #  python  程序 内 用以 启动 的  application  变量 变量名  callable  =  app  master  =  true  enable - threads  =  true  #  启动 的 线程  processes  =  4  vacuum  =  true  die - on - term  =  true  harakiri  =  30  #  每 一个 工作 进程 都 生成 以后 才 加载 应用 程序 应用程序  lazy  =  true  disable - logging  =  true  #  状态 检测 地址  stats  =  127.0 . 0.1 : 9191  #  pid  pidfile  =  / tmp / osroom _ uwsgi . pid  其他 配置 项 可以 参考 uwsgi 文档", "location": "app/deploy/#_3"}, {"title": "& nbsp ; & nbsp ; 启动 网站", "text": "注意 ： 启动 前 确认 osroom 的 数据 据库 数据库 是否 已 配置 正确  启动 命令  #  如果 uwsgi 装在 python 虚拟 环境 虚拟环境 ， 要 先 进入 虚拟 环境 虚拟环境 , 再用 如下 命令 启动  uwsgi  / home / work / project / osroom / uwsgi . ini  （ 附加 ） 方法 2 ： 如果 uwsgi 安装 在 python 虚拟 环境 虚拟环境 中 ， 又 不想 进入 虚拟 环境 虚拟环境 ， 可以 这样 启动  #  venv _ osroom 是 我 的 虚拟 环境 虚拟环境 目录  / home / work / project / venv _ osroom / bin / uwsgi  / home / work / project / osroom / uwsgi . ini  -  启动 成功 后 :  由于 uwsgi . ini 配置 的 端口 是 6001 ， 所以 不能 通过 其他 端口 访问 网站 ， 需要 下面  配置 Nginx 转发 到 6001 端口  ...  uwsgi  socket  0  bound  to  TCP  address  127.0 . 0.1 : 6001  fd  3  Python  version :  3.5 . 2  ( default ,  Nov  23  2017 ,  16 : 37 : 01 )  [ GCC  5.4 . 0  20160609 ]  Python  main  interpreter  initialized  at  0x1b9bcd0  python  threads  support  enabled  ...  * * *  Operational  MODE :  preforking  * * *  * * *  uWSGI  is  running  in  multiple  interpreter  mode  * * *  spawned  uWSGI  master  process  ( pid :  22449 )  spawned  uWSGI  worker  1  ( pid :  22450 ,  cores :  1 )  spawned  uWSGI  worker  2  ( pid :  22451 ,  cores :  1 )  spawned  uWSGI  worker  3  ( pid :  22452 ,  cores :  1 )  spawned  uWSGI  worker  4  ( pid :  22453 ,  cores :  1 )  ...  worker  1  buried  after  1  seconds  worker  2  buried  after  1  seconds  worker  3  buried  after  1  seconds  worker  4  buried  after  1  seconds  ...", "location": "app/deploy/#_4"}, {"title": "Nginx  安装 与 配置", "text": "", "location": "app/deploy/#nginx"}, {"title": "& nbsp ; & nbsp ; 安装", "text": "Ubuntu  14.04 或 Ubuntu  16.04 使用 apt - get 直接 安装 如下 ：  sudo  apt - get  install  nginx  也 可以 使用 wget 下载 ， 再 安装 ， 请 自行 Google 查找 教程 哈", "location": "app/deploy/#_5"}, {"title": "& nbsp ; & nbsp ; 配置 文件 配置文件", "text": "创建 一个 nginx 配置 文件 配置文件 osroom - naginx . conf ， 文件 配置 如下 ( 这里 只是 示范 ， Nginx 有 许多 配置 项 可以 自己 查找 教程 ) :  upstream  osroom - web  {  #  转发 到 6001 端口  server  127.0 . 0.1 : 6001 ;  }  server  {  #  监听 80 端 端口  listen  80 ;  server _ name  < 你 的 域名 > ;  gzip  on ;  gzip _ comp _ level  5 ;  gzip _ types  application / json  text / plain  application / javascript  application / x - javascript  text / javascript  text / xml  text / css ;  open _ log _ file _ cache  max = 1000  inactive = 20s  valid = 1m  min _ uses = 2 ;  access _ log  / var / log / nginx / manage . vhost . access . log ;  error _ log  / var / log / nginx / manage . vhost . error . log ;  location  /  {  include  uwsgi _ params ;  #  upstream  的 那个 名称  uwsgi _ pass  osroom - web ;  #  python 虚拟 环境 虚拟环境 目录 路径  uwsgi _ param  UWSGI : _ PYHOME  / home / work / project / venv _ osroom ;  #  项目 目录 路径  uwsgi _ param  UWSGI _ CHDIR  / home / work / project / osroom - demo ; ;  uwsgi _ param  UWSGI _ SCRIPT  start : app ;  }  }  如果 需要 配置 ssl 请 加上 监听 443 端口 ， 配置 好 证书 ， 然后 80 端口 301 定向 重定向 到 443  https 请求 ,  如下 :  ( 不需 配置 SSL 证书 的 请 直接 跳过 此 步骤 )  upstream  osroom - web  {  #  转发 到 6001 端口  server  127.0 . 0.1 : 6001 ;  }  server  {  #  监听 443 端 端口  listen  443 ;  server _ name  < 你 的 域名 > ;  ssl  on ;  root  html ;  index  index . html  index . htm ;  #  ssl 证书 文件  ssl _ certificate  / home / work / project / 15212232323 . pem ;  ssl _ certificate _ key  / home / work / project / 15212232323 . key ;  ssl _ session _ timeout  5m ;  ssl _ ciphers  ECDHE - RSA - AES128 - GCM - SHA256 : ECDHE : ECDH : AES : HIGH : ! NULL : ! aNULL : ! MD5 : ! ADH : ! RC4 ;  ssl _ protocols  TLSv1  TLSv1.1  TLSv1.2 ;  ssl _ prefer _ server _ ciphers  on ;  gzip  on ;  gzip _ comp _ level  5 ;  gzip _ types  application / json  text / plain  application / javascript  application / x - javascript  text / javascript  text / xml  text / css ;  open _ log _ file _ cache  max = 1000  inactive = 20s  valid = 1m  min _ uses = 2 ;  access _ log  / var / log / nginx / manage . vhost . access . log ;  error _ log  / var / log / nginx / manage . vhost . error . log ;  location  /  {  include  uwsgi _ params ;  #  upstream  的 那个 名称  uwsgi _ pass  osroom - web ;  #  python 虚拟 环境 虚拟环境 目录 路径  uwsgi _ param  UWSGI : _ PYHOME  / home / work / project / venv _ osroom ;  #  项目 目录 路径  uwsgi _ param  UWSGI _ CHDIR  / home / work / project / osroom - demo ; ;  uwsgi _ param  UWSGI _ SCRIPT  start : app ;  }  }  server  {  listen  80 ;  server _ name  < 你 的 域名 > ;  return  301  https : / / $ server _ name $ request _ uri ;  }  写 好 配置 文件 配置文件 后 编辑 nginx 主 配置 文件 配置文件 include  上 一步 写 的 配置 文件 配置文件  #  Ubuntu  apt - get 安装 后 的 Nginx 配置 文件 配置文件 在 / etc / nginx / nginx . conf  #  编辑 / etc / nginx / nginx . conf 找到 在 http  { } 里面 最后 添加 osroom . conf  #  可以 用 * 通配符 ， 前提 是 该 目录 下 没有 其他 非 nginx 得 . conf 配置 文件 配置文件  http  {  ...  include  / home / work / project / * . conf ;  }", "location": "app/deploy/#_6"}, {"title": "& nbsp ; & nbsp ; 重启 Nginx", "text": "sudo  / etc / init . d / nginx  restart", "location": "app/deploy/#nginx_1"}, {"title": "& nbsp ; & nbsp ; 访问", "text": "这个 时候 就 可以 通过 域名 （ 域名 有 解析 到 服务 务器 服务器 的 情况 下 ） 或 IP 访问 OSROOM 了", "location": "app/deploy/#_7"}, {"title": "Install", "text": "环境 要求  操作 系统 操作系统  OSROOM 支持 Linux 中 部署 ,  Windows 未 测试 过  建议 使用 Ubuntu  > =  14.04 版本 ;  测试 过 操作 系统 操作系统 有 Ubuntu  14.04 ,  16.04 ;  Centos  6.5 ;  其他 Linux 系统 还 未 测试  Pyhotn 要求  Python  3.4 以上 版本 ,  比如 Python  3.4 ,  Python  3.5  Pyhton 依赖 包 安装  创建 Python 虚拟 环境 虚拟环境 ( 建议 )  例如 在 在 / home / work 创建 名为 venv - osroom 的 虚拟 环境 虚拟环境  python  - m  venv  / home / work / venv - osroom  或  python3  - m  venv  / home / work / venv - osroom  没有 安装 好 python - venv 请 先 安装 ,  Ubuntu 安装 命令 如下 :  sudo  apt - get  install  python - venv  安装 依赖 包  进入 虚拟 环境 虚拟环境  source  / home / work / venv - osroom / bin / activate  #  或  .  / home / work / venv - osroom / bin / activate  进入 osroom 项目 目录 根目录  使用 pip 安装 依赖 包  pip  install  - r  requirements . txt  安装 需求 包 异常 常情 情况 异常情况  情况 1 : 类似 以下 错误 误信 信息 错误信息  Command  \" / xxx / venv - osroom / bin / python3  - u  - c  \" import  setuptools ,  tokenize ;  __ file __ = ' / tmp / pip - install - erphi6km / xxx / setup . py ' ;  f = getattr ( tokenize ,  ' open ' ,  open ) ( __ file __ ) ;  code = f . read ( ) . replace ( ' \\ r \\ n ' ,  ' \\ n ' ) ; f . close ( ) ;  exec ( compile ( code ,  __ file __ ,  ' exec ' ) ) \"  install  - - record  / tmp / pip - record - nhbhzs1a / install - record . txt  - - single - version - externally - managed  - - compile  - - install - headers  / home / work / project / venv _ osroom / include  site / python3.5 / xxxx \"  failed  with  error  code  1  in  / tmp / pip - install - erphi6km / xxxx /  那么 请 尝试 安装 python - dev  Ubuntu 系统 :  #  不 一定 需要 版本 版本号  sudo  apt - get  install  python3.5 - dev  其他 使用 yum 安装 工具 的 Linux 发行 行部 发行部 系统 :  #  不 一定 需要 版本 版本号  sudo  yum  install  python3.5 - devel  情况 2 : 类似 错误 误信 信息 错误信息  Command  \" python  setup . py  egg _ info \"  failed  with  error  code  1  in  ...  那么 请 尝试 安装  setuptools  pip  install  - - upgrade  setuptools  配置 数据 据库 数据库  安装  请 看  Mongodb 安装 文档  与  Redis 安装 文档  初始 初始化 配置  因为 osroom 代码 源代码 只 把 配置 文件 配置文件 config . py  和  数据 据库 数据库 配置 文件 配置文件 db _ config . py  的 sample 文件 上 传到 git ， 所以 请 先 复制 修改 名称  #  进入 到 apps / configs  cp  config _ sample . py  config . py  cp  db _ config _ sample . py  db _ config . py  编辑 db _ config . py ,  在 配置 中 对应 位置 填写 好 数据 据库 数据库 用户 户名 用户名 和 密码  DB _ CONFIG  =  {  \" redis \" :  {  \" password \" :  \" < Your  password > \" ,  \" host \" :  [  \" 127.0 . 0.1 \"  ] ,  \" port \" :  [  \" 6379 \"  ]  } ,  \" mongodb \" :  {  \" mongo _ web \" :  {  \" password \" :  \" < Your  password > \" ,  \" username \" :  \" work \" ,  \" config \" :  {  \" fsync \" :  False ,  \" replica _ set \" :  None  } ,  \" host \" :  [  \" 127.0 . 0.1 : 27017 \"  ] ,  \" dbname \" :  \" osr _ web \"  } ,  \" mongo _ user \" :  {  \" password \" :  \" < Your  password > \" ,  \" username \" :  \" work \" ,  \" config \" :  {  \" fsync \" :  False ,  \" replica _ set \" :  None  } ,  \" host \" :  [  \" 127.0 . 0.1 : 27017 \"  ] ,  \" dbname \" :  \" osr _ user \"  } ,  \" mongo _ sys \" :  {  \" password \" :  \" < Your  password > \" ,  \" username \" :  \" work \" ,  \" config \" :  {  \" fsync \" :  False ,  \" replica _ set \" :  None  } ,  \" host \" :  [  \" 127.0 . 0.1 : 27017 \"  ] ,  \" dbname \" :  \" osr _ sys \"  }  }  }  初始 初始化 第一 一个 第一个 用户  进入 项目 的 Python 虚拟 环境 虚拟环境  进入 目录 根目录 运行 start . py  add _ user  按 如下 操作 和 提示 创建 第一 一个 第一个 用户  ( venv _ osroom )  work @ osroom : ~ / project / osroom $  python  start . py  add _ user  *  [ User ]  add  Input  username : root  Input  email : xiaopingwoo @ 163 . com  Input  password ( Password  at  least  8  characters ) :  [ Warning ] :  密码 至少 8 字符 个字符 ！  至少 包含 数字 ， 字母 ， 特殊 字符 特殊字符 中 的 任意 两种  Input  password ( Password  at  least  8  characters ) :  *  Create  root  role ...  Create  root  user  role  successfully  *  Create  root  user ...  *  Create  a  root  user  role  successfully  *  Create  the  average  user  role ...  *  Create  a  generic  user  role  successfully  The  basic  information  is  as  follows  Username :  root  Email :  h * * * * * irr @ * * * . com  User  role :  Root  Password :  # D * * * * qw123  End  访问 测试  使用 自带 的 服务 测试 是否 能够 成功 运行 osroom （ 测试 用 ,  实际 部署 产品 不会 使用 该 方式 启动 运行 ）  启动 OSROOM  进入 osroom 项目 目录  #  如果 需要 外部 访问 ， - - host  为 0.0 . 0.0  ,  - - port  指定 已 开放 的 端口 , 默认 5000  python  start . py  runserver  - - host  127.0 . 0.1  - - port  5000  -  打开 浏览 浏览器 访问  127.0 . 0.1 : 5000", "location": "app/install/"}, {"title": "环境 要求", "text": "", "location": "app/install/#_1"}, {"title": "& nbsp ; & nbsp ; 操作 系统 操作系统", "text": "OSROOM 支持 Linux 中 部署 ,  Windows 未 测试 过  建议 使用 Ubuntu  > =  14.04 版本 ;  测试 过 操作 系统 操作系统 有 Ubuntu  14.04 ,  16.04 ;  Centos  6.5 ;  其他 Linux 系统 还 未 测试", "location": "app/install/#_2"}, {"title": "& nbsp ; & nbsp ; Pyhotn 要求", "text": "Python  3.4 以上 版本 ,  比如 Python  3.4 ,  Python  3.5", "location": "app/install/#pyhotn"}, {"title": "Pyhton 依赖 包 安装", "text": "", "location": "app/install/#pyhton"}, {"title": "& nbsp ; & nbsp ; 创建 Python 虚拟 环境 虚拟环境 ( 建议 )", "text": "例如 在 在 / home / work 创建 名为 venv - osroom 的 虚拟 环境 虚拟环境  python  - m  venv  / home / work / venv - osroom  或  python3  - m  venv  / home / work / venv - osroom  没有 安装 好 python - venv 请 先 安装 ,  Ubuntu 安装 命令 如下 :  sudo  apt - get  install  python - venv", "location": "app/install/#python"}, {"title": "& nbsp ; & nbsp ; 安装 依赖 包", "text": "进入 虚拟 环境 虚拟环境  source  / home / work / venv - osroom / bin / activate  #  或  .  / home / work / venv - osroom / bin / activate  进入 osroom 项目 目录 根目录  使用 pip 安装 依赖 包  pip  install  - r  requirements . txt", "location": "app/install/#_3"}, {"title": "& nbsp ; & nbsp ; 安装 需求 包 异常 常情 情况 异常情况", "text": "情况 1 : 类似 以下 错误 误信 信息 错误信息  Command  \" / xxx / venv - osroom / bin / python3  - u  - c  \" import  setuptools ,  tokenize ;  __ file __ = ' / tmp / pip - install - erphi6km / xxx / setup . py ' ;  f = getattr ( tokenize ,  ' open ' ,  open ) ( __ file __ ) ;  code = f . read ( ) . replace ( ' \\ r \\ n ' ,  ' \\ n ' ) ; f . close ( ) ;  exec ( compile ( code ,  __ file __ ,  ' exec ' ) ) \"  install  - - record  / tmp / pip - record - nhbhzs1a / install - record . txt  - - single - version - externally - managed  - - compile  - - install - headers  / home / work / project / venv _ osroom / include  site / python3.5 / xxxx \"  failed  with  error  code  1  in  / tmp / pip - install - erphi6km / xxxx /  那么 请 尝试 安装 python - dev  Ubuntu 系统 :  #  不 一定 需要 版本 版本号  sudo  apt - get  install  python3.5 - dev  其他 使用 yum 安装 工具 的 Linux 发行 行部 发行部 系统 :  #  不 一定 需要 版本 版本号  sudo  yum  install  python3.5 - devel  情况 2 : 类似 错误 误信 信息 错误信息  Command  \" python  setup . py  egg _ info \"  failed  with  error  code  1  in  ...  那么 请 尝试 安装  setuptools  pip  install  - - upgrade  setuptools", "location": "app/install/#_4"}, {"title": "配置 数据 据库 数据库", "text": "", "location": "app/install/#_5"}, {"title": "& nbsp ; & nbsp ; 安装", "text": "请 看  Mongodb 安装 文档  与  Redis 安装 文档", "location": "app/install/#_6"}, {"title": "& nbsp ; & nbsp ; 初始 初始化 配置", "text": "因为 osroom 代码 源代码 只 把 配置 文件 配置文件 config . py  和  数据 据库 数据库 配置 文件 配置文件 db _ config . py  的 sample 文件 上 传到 git ， 所以 请 先 复制 修改 名称  #  进入 到 apps / configs  cp  config _ sample . py  config . py  cp  db _ config _ sample . py  db _ config . py  编辑 db _ config . py ,  在 配置 中 对应 位置 填写 好 数据 据库 数据库 用户 户名 用户名 和 密码  DB _ CONFIG  =  {  \" redis \" :  {  \" password \" :  \" < Your  password > \" ,  \" host \" :  [  \" 127.0 . 0.1 \"  ] ,  \" port \" :  [  \" 6379 \"  ]  } ,  \" mongodb \" :  {  \" mongo _ web \" :  {  \" password \" :  \" < Your  password > \" ,  \" username \" :  \" work \" ,  \" config \" :  {  \" fsync \" :  False ,  \" replica _ set \" :  None  } ,  \" host \" :  [  \" 127.0 . 0.1 : 27017 \"  ] ,  \" dbname \" :  \" osr _ web \"  } ,  \" mongo _ user \" :  {  \" password \" :  \" < Your  password > \" ,  \" username \" :  \" work \" ,  \" config \" :  {  \" fsync \" :  False ,  \" replica _ set \" :  None  } ,  \" host \" :  [  \" 127.0 . 0.1 : 27017 \"  ] ,  \" dbname \" :  \" osr _ user \"  } ,  \" mongo _ sys \" :  {  \" password \" :  \" < Your  password > \" ,  \" username \" :  \" work \" ,  \" config \" :  {  \" fsync \" :  False ,  \" replica _ set \" :  None  } ,  \" host \" :  [  \" 127.0 . 0.1 : 27017 \"  ] ,  \" dbname \" :  \" osr _ sys \"  }  }  }", "location": "app/install/#_7"}, {"title": "初始 初始化 第一 一个 第一个 用户", "text": "进入 项目 的 Python 虚拟 环境 虚拟环境  进入 目录 根目录 运行 start . py  add _ user  按 如下 操作 和 提示 创建 第一 一个 第一个 用户  ( venv _ osroom )  work @ osroom : ~ / project / osroom $  python  start . py  add _ user  *  [ User ]  add  Input  username : root  Input  email : xiaopingwoo @ 163 . com  Input  password ( Password  at  least  8  characters ) :  [ Warning ] :  密码 至少 8 字符 个字符 ！  至少 包含 数字 ， 字母 ， 特殊 字符 特殊字符 中 的 任意 两种  Input  password ( Password  at  least  8  characters ) :  *  Create  root  role ...  Create  root  user  role  successfully  *  Create  root  user ...  *  Create  a  root  user  role  successfully  *  Create  the  average  user  role ...  *  Create  a  generic  user  role  successfully  The  basic  information  is  as  follows  Username :  root  Email :  h * * * * * irr @ * * * . com  User  role :  Root  Password :  # D * * * * qw123  End", "location": "app/install/#_8"}, {"title": "访问 测试", "text": "使用 自带 的 服务 测试 是否 能够 成功 运行 osroom （ 测试 用 ,  实际 部署 产品 不会 使用 该 方式 启动 运行 ）", "location": "app/install/#_9"}, {"title": "& nbsp ; & nbsp ; 启动 OSROOM", "text": "进入 osroom 项目 目录  #  如果 需要 外部 访问 ， - - host  为 0.0 . 0.0  ,  - - port  指定 已 开放 的 端口 , 默认 5000  python  start . py  runserver  - - host  127.0 . 0.1  - - port  5000  -  打开 浏览 浏览器 访问  127.0 . 0.1 : 5000", "location": "app/install/#osroom"}, {"title": "Instructions", "text": "osroom 使用 说明  配置 主题  osroom 启动 可以 访问 后 ， 看 的 的 网站 首页 ( \" / \" ) 可能 是 有些 凌乱 的 ， 因为 还 没有 配置 好 主题 需要 的 内容  使用 osroom 创建 的 第一 一个 第一个 用户 与 密码 登录 （ 安装 文档 中有 写 ） ， 进入 Admin 配置  如果 主题 不 提供 登录 入口 可以 直接 访问 http : / / your - domain / osr - admin / sign - in  页面 登录  然后 进入 Admin 管理 端 :  http : / / your - domain / osr - admin  进入 [ 主题 外观 ] > [ 主题 ] 查看 当前 启用 主题 的 配置 文档 ， 安装 文档 配置 好 主题 就 可以 了  设置 > 参数 配置  系统 邮件  -  如果 你 有 邮箱 系统 可以 进入 [ 设置 ] > [ 参数 配置 ] ， 找到 email 设置 ( 可 直接 搜索 ) ,  配置 好 email 账号 密码 账号密码 ， 用于 发送 系统 邮件  其他 配置 可以 自行 查看 了解", "location": "app/instructions/"}, {"title": "osroom 使用 说明", "text": "", "location": "app/instructions/#osroom"}, {"title": "配置 主题", "text": "osroom 启动 可以 访问 后 ， 看 的 的 网站 首页 ( \" / \" ) 可能 是 有些 凌乱 的 ， 因为 还 没有 配置 好 主题 需要 的 内容  使用 osroom 创建 的 第一 一个 第一个 用户 与 密码 登录 （ 安装 文档 中有 写 ） ， 进入 Admin 配置  如果 主题 不 提供 登录 入口 可以 直接 访问 http : / / your - domain / osr - admin / sign - in  页面 登录  然后 进入 Admin 管理 端 :  http : / / your - domain / osr - admin  进入 [ 主题 外观 ] > [ 主题 ] 查看 当前 启用 主题 的 配置 文档 ， 安装 文档 配置 好 主题 就 可以 了", "location": "app/instructions/#_1"}, {"title": "设置 & gt ; 参数 配置", "text": "系统 邮件  -  如果 你 有 邮箱 系统 可以 进入 [ 设置 ] > [ 参数 配置 ] ， 找到 email 设置 ( 可 直接 搜索 ) ,  配置 好 email 账号 密码 账号密码 ， 用于 发送 系统 邮件  其他 配置 可以 自行 查看 了解", "location": "app/instructions/#_2"}, {"title": "Mongodb", "text": "安装 mongodb  Ubuntu16.04  apt - get 安装 Mongodb  3.4  或 3.6 版本  添加 安装 源  下面 版本 源 请 选择 其中 一个 版本  添加 3.4 版本 源  添加 public  key ：  sudo  apt - key  adv  - - keyserver  hkp : / / keyserver . ubuntu . com : 80  - - recv  0C49F3730359A14518585931BC711F9BA15703C6  添加 包源 ：  echo  \" deb  [  arch = amd64 , arm64  ]  http : / / repo . mongodb . org / apt / ubuntu  xenial / mongodb - org / 3.4  multiverse \"  |  sudo  tee  / etc / apt / sources . list . d / mongodb - org - 3.4 . list  添加 3.6 版本 源  添加 public  key ：  sudo  apt - key  adv  - - keyserver  hkp : / / keyserver . ubuntu . com : 80  - - recv  2930ADAE8CAF5059EE73BB4B58712A2291FA4AD5  添加 包源 ：  echo  \" deb  [  arch = amd64  ]  https : / / repo . mongodb . org / apt / ubuntu  precise / mongodb - org / 3.6  multiverse \"  |  sudo  tee  / etc / apt / sources . list . d / mongodb - org - 3.6 . list  更新 apt - get  更新  sudo  apt - get  update  安装  安装  sudo  apt - get  install  - y  mongodb - org  详情 ： https : / / docs . mongodb . com / manual / tutorial / install - mongodb - on - ubuntu /  使用  进入 数据 据库 数据库  数据 据库 数据库 启动 后 ， 默认 配置 下 在 命令 命令行 输入 mongo 就 可以 进入 数据 据库 数据库 管理  ( venv3 )  work @ ubuntu16 : ~ / project / osroom $  mongo  MongoDB  shell  version  v3.4 . 10  connecting  to :  mongodb : / / 127.0 . 0.1 : 27017  MongoDB  server  version :  3.4 . 10  创建 数据 据库 数据库  use  test _ db 就 能 创建 一个 数据 据库 数据库 test _ db ,  之后 需要 创建 一个 collection ,  否则 会 被 自动 删除  >  use  test _ db  >  db . createCollection ( \" test _ coll \" )  创建 用户  先给 mongodb 自带 的 collection  admin  创建 一个 用户  >  use  admin  >  db . createUser (  {  user :  \" dba \" ,  pwd :  \" 123456 \" ,  roles :  [  {  role :  \" userAdminAnyDatabase \" ,  db :  \" admin \"  } ,  {  role :  \" dbAdminAnyDatabase \" ,  db :  \" admin \"  } ]  }  )  为 自己 创建 的 库 新建 用户  >  use  test  >  db . createCollection ( \" test _ coll \" )  >  db . createUser (  {  user : ' work ' ,  pwd : ' 123456 ' ,  roles : [ { role : ' readWrite ' ,  db : ' test ' } ]  } )  更新 一个 库 的 用户 方式 如下  >  use  test  >  db . updateUser (  \" dba \" ,  {  roles  :  [  {  role :  \" dbAdminAnyDatabase \" ,  db :  \" admin \"  } ,  {  role :  \" userAdminAnyDatabase \" ,  db :  \" admin \"  } ]  }  )  数据 据库 数据库 个 角色 role 说明  Built - In  Roles ( 内置 角色 )  1 .  数据 据库 数据库 用户 角色 ： read 、 readWrite ;  2 .  数据 据库 数据库 管理 角色 ： dbAdmin 、 dbOwner 、 userAdmin ；  3 .  集群 管理 角色 ： clusterAdmin 、 clusterManager 、 clusterMonitor 、 hostManager ；  4 .  备份 恢复 角色 ： backup 、 restore ；  5 .  所有 数据 据库 数据库 角色 ： readAnyDatabase 、 readWriteAnyDatabase 、 userAdminAnyDatabase 、 dbAdminAnyDatabase  6 .  超级 用户 角色 ： root  / /  这里 还有 几个 角色 间接 或 直接 提供 了 系统 超级 用户 的 访问 （ dbOwner  、 userAdmin 、 userAdminAnyDatabase ）  7 .  内部 角色 ： __ system  具体  Read ： 允许 用户 读取 指定 数据 据库 数据库  readWrite ： 允许 用户 读写 指定 数据 据库 数据库  dbAdmin ： 允许 用户 在 指定 数据 据库 数据库 中 执行 管理 函数 ， 如 索引 创建 、 删除 ， 查看 统计 或 访问 system . profile  userAdmin ： 允许 用户 向 system . users 集合 写入 ， 可以 找 指定 数据 据库 数据库 里 创建 、 删除 和 管理 用户  clusterAdmin ： 只 在 admin 数据 据库 数据库 中 可用 ， 赋予 用户 所有 分片 和 复制 集 相关 函数 的 管理 权限 管理权 管理权限 。  readAnyDatabase ： 只 在 admin 数据 据库 数据库 中 可用 ， 赋予 用户 所有 数据 据库 数据库 的 读 权限  readWriteAnyDatabase ： 只 在 admin 数据 据库 数据库 中 可用 ， 赋予 用户 所有 数据 据库 数据库 的 读写 权限  userAdminAnyDatabase ： 只 在 admin 数据 据库 数据库 中 可用 ， 赋予 用户 所有 数据 据库 数据库 的 userAdmin 权限  dbAdminAnyDatabase ： 只 在 admin 数据 据库 数据库 中 可用 ， 赋予 用户 所有 数据 据库 数据库 的 dbAdmin 权限 。  root ： 只 在 admin 数据 据库 数据库 中 可用 。 超级 账号 ， 超级 权限  OSROOM 需要 的 库  使用 osroom 系统 ， 请 先 创建 三个 数据 据库 数据库 ， 库名 自定 定义 自定义 ( 建议 使用 库 名称 为 osr _ web ,  osr _ user ,  osr _ sys )  注意 mongodb 的 每个 库 都 需要 创建 一个 用户 / 密码 ( 可以 全部 一样 的 用户 户名 用户名 和 密码 )  创建 后 修改 mongo 配置 文件 配置文件 mongodb . conf  开启 安全 验证 ( 用户 验证 )", "location": "app/mongodb/"}, {"title": "安装 mongodb", "text": "Ubuntu16.04  apt - get 安装 Mongodb  3.4  或 3.6 版本", "location": "app/mongodb/#mongodb"}, {"title": "& nbsp ; & nbsp ; 添加 安装 源", "text": "下面 版本 源 请 选择 其中 一个 版本  添加 3.4 版本 源  添加 public  key ：  sudo  apt - key  adv  - - keyserver  hkp : / / keyserver . ubuntu . com : 80  - - recv  0C49F3730359A14518585931BC711F9BA15703C6  添加 包源 ：  echo  \" deb  [  arch = amd64 , arm64  ]  http : / / repo . mongodb . org / apt / ubuntu  xenial / mongodb - org / 3.4  multiverse \"  |  sudo  tee  / etc / apt / sources . list . d / mongodb - org - 3.4 . list  添加 3.6 版本 源  添加 public  key ：  sudo  apt - key  adv  - - keyserver  hkp : / / keyserver . ubuntu . com : 80  - - recv  2930ADAE8CAF5059EE73BB4B58712A2291FA4AD5  添加 包源 ：  echo  \" deb  [  arch = amd64  ]  https : / / repo . mongodb . org / apt / ubuntu  precise / mongodb - org / 3.6  multiverse \"  |  sudo  tee  / etc / apt / sources . list . d / mongodb - org - 3.6 . list", "location": "app/mongodb/#_1"}, {"title": "& nbsp ; & nbsp ; 更新 apt - get", "text": "更新  sudo  apt - get  update", "location": "app/mongodb/#apt-get"}, {"title": "& nbsp ; & nbsp ; 安装", "text": "安装  sudo  apt - get  install  - y  mongodb - org  详情 ： https : / / docs . mongodb . com / manual / tutorial / install - mongodb - on - ubuntu /", "location": "app/mongodb/#_2"}, {"title": "使用", "text": "", "location": "app/mongodb/#_3"}, {"title": "& nbsp ; & nbsp ; 进入 数据 据库 数据库", "text": "数据 据库 数据库 启动 后 ， 默认 配置 下 在 命令 命令行 输入 mongo 就 可以 进入 数据 据库 数据库 管理  ( venv3 )  work @ ubuntu16 : ~ / project / osroom $  mongo  MongoDB  shell  version  v3.4 . 10  connecting  to :  mongodb : / / 127.0 . 0.1 : 27017  MongoDB  server  version :  3.4 . 10", "location": "app/mongodb/#_4"}, {"title": "& nbsp ; & nbsp ; 创建 数据 据库 数据库", "text": "use  test _ db 就 能 创建 一个 数据 据库 数据库 test _ db ,  之后 需要 创建 一个 collection ,  否则 会 被 自动 删除  >  use  test _ db  >  db . createCollection ( \" test _ coll \" )", "location": "app/mongodb/#_5"}, {"title": "& nbsp ; & nbsp ; 创建 用户", "text": "先给 mongodb 自带 的 collection  admin  创建 一个 用户  >  use  admin  >  db . createUser (  {  user :  \" dba \" ,  pwd :  \" 123456 \" ,  roles :  [  {  role :  \" userAdminAnyDatabase \" ,  db :  \" admin \"  } ,  {  role :  \" dbAdminAnyDatabase \" ,  db :  \" admin \"  } ]  }  )  为 自己 创建 的 库 新建 用户  >  use  test  >  db . createCollection ( \" test _ coll \" )  >  db . createUser (  {  user : ' work ' ,  pwd : ' 123456 ' ,  roles : [ { role : ' readWrite ' ,  db : ' test ' } ]  } )  更新 一个 库 的 用户 方式 如下  >  use  test  >  db . updateUser (  \" dba \" ,  {  roles  :  [  {  role :  \" dbAdminAnyDatabase \" ,  db :  \" admin \"  } ,  {  role :  \" userAdminAnyDatabase \" ,  db :  \" admin \"  } ]  }  )", "location": "app/mongodb/#_6"}, {"title": "& nbsp ; & nbsp ; 数据 据库 数据库 个 角色 role 说明", "text": "Built - In  Roles ( 内置 角色 )  1 .  数据 据库 数据库 用户 角色 ： read 、 readWrite ;  2 .  数据 据库 数据库 管理 角色 ： dbAdmin 、 dbOwner 、 userAdmin ；  3 .  集群 管理 角色 ： clusterAdmin 、 clusterManager 、 clusterMonitor 、 hostManager ；  4 .  备份 恢复 角色 ： backup 、 restore ；  5 .  所有 数据 据库 数据库 角色 ： readAnyDatabase 、 readWriteAnyDatabase 、 userAdminAnyDatabase 、 dbAdminAnyDatabase  6 .  超级 用户 角色 ： root  / /  这里 还有 几个 角色 间接 或 直接 提供 了 系统 超级 用户 的 访问 （ dbOwner  、 userAdmin 、 userAdminAnyDatabase ）  7 .  内部 角色 ： __ system  具体  Read ： 允许 用户 读取 指定 数据 据库 数据库  readWrite ： 允许 用户 读写 指定 数据 据库 数据库  dbAdmin ： 允许 用户 在 指定 数据 据库 数据库 中 执行 管理 函数 ， 如 索引 创建 、 删除 ， 查看 统计 或 访问 system . profile  userAdmin ： 允许 用户 向 system . users 集合 写入 ， 可以 找 指定 数据 据库 数据库 里 创建 、 删除 和 管理 用户  clusterAdmin ： 只 在 admin 数据 据库 数据库 中 可用 ， 赋予 用户 所有 分片 和 复制 集 相关 函数 的 管理 权限 管理权 管理权限 。  readAnyDatabase ： 只 在 admin 数据 据库 数据库 中 可用 ， 赋予 用户 所有 数据 据库 数据库 的 读 权限  readWriteAnyDatabase ： 只 在 admin 数据 据库 数据库 中 可用 ， 赋予 用户 所有 数据 据库 数据库 的 读写 权限  userAdminAnyDatabase ： 只 在 admin 数据 据库 数据库 中 可用 ， 赋予 用户 所有 数据 据库 数据库 的 userAdmin 权限  dbAdminAnyDatabase ： 只 在 admin 数据 据库 数据库 中 可用 ， 赋予 用户 所有 数据 据库 数据库 的 dbAdmin 权限 。  root ： 只 在 admin 数据 据库 数据库 中 可用 。 超级 账号 ， 超级 权限", "location": "app/mongodb/#role"}, {"title": "& nbsp ; & nbsp ; OSROOM 需要 的 库", "text": "使用 osroom 系统 ， 请 先 创建 三个 数据 据库 数据库 ， 库名 自定 定义 自定义 ( 建议 使用 库 名称 为 osr _ web ,  osr _ user ,  osr _ sys )  注意 mongodb 的 每个 库 都 需要 创建 一个 用户 / 密码 ( 可以 全部 一样 的 用户 户名 用户名 和 密码 )  创建 后 修改 mongo 配置 文件 配置文件 mongodb . conf  开启 安全 验证 ( 用户 验证 )", "location": "app/mongodb/#osroom"}, {"title": "Redis", "text": "安装 redis  安装  Ubuntu  使用 apt - get 安装  sudo  apt - get  install  redis - server  配置 密码  编辑 / etc / redis . conf 配置 密码  将  # requirepass  foobared  修改 为  requirepass  your - password  重启 redis  sudo  / etc / init . d / redis - server  restart", "location": "app/redis/"}, {"title": "安装 redis", "text": "", "location": "app/redis/#redis"}, {"title": "& nbsp ; & nbsp ; 安装", "text": "Ubuntu  使用 apt - get 安装  sudo  apt - get  install  redis - server", "location": "app/redis/#_1"}, {"title": "& nbsp ; & nbsp ; 配置 密码", "text": "编辑 / etc / redis . conf 配置 密码  将  # requirepass  foobared  修改 为  requirepass  your - password", "location": "app/redis/#_2"}, {"title": "& nbsp ; & nbsp ; 重启 redis", "text": "sudo  / etc / init . d / redis - server  restart", "location": "app/redis/#redis_1"}, {"title": "Structure", "text": "代码 结构  osroom /  .  ├ ─ ─  apps  #  应用 程序 应用程序 目录 主目录  ├ ─ ─  LICENSE  #  版权 说明  ├ ─ ─  logs  #  日志 目录  ├ ─ ─  osr - tool . py  #  离线 工具 脚本  ├ ─ ─  README . md  ├ ─ ─  requirements . txt  #  python 需求 包 文件  ├ ─ ─  start . py  #  系统 启动 系统启动 目录  ├ ─ ─  test  └ ─ ─  tools  #  离线 工具 脚本  osroom / apps /  .  ├ ─ ─  admin _ pages  #  管理 端 静态 文件 ( html , js , css ... )  ├ ─ ─  app . py  #  系统 初始 初始化 程序  ├ ─ ─  configs  #  系统 统配 配置 系统配 系统配置 文件 目录 文件目录  ├ ─ ─  core  #  核心 程序 目录  ├ ─ ─  init _ core _ module . py  #  初始 初始化 核心 模块 脚本  ├ ─ ─  __ init __. py  ├ ─ ─  modules  #  功能 模块 功能模块 目录 主目录  ├ ─ ─  plugins  #  插件 模块 目录 主目录 ( 安装 的 插件 会 在 此 目录 )  ├ ─ ─  routing  #  路由 控制 模块 目录  ├ ─ ─  static  #  其他 系统 必须 静态 文件 目录 文件目录  ├ ─ ─  sys _ startup _ info . py  #  系统 启动 系统启动 时 打印 印信 信息 打印信息 脚本  ├ ─ ─  themes  #  主题 目录 主目录 ( 安装 的 主题 会 在 此 目录 )  ├ ─ ─  transations  #  各 语言 翻译 目录  └ ─ ─  utils  #  通用 程序  osroom / apps / configs  .  ├ ─ ─  config . py  #  配置 文件 配置文件 , 此 文件 内容 可以 在 系统 统管 管理 系统管理 的 控制 ( 未 上 传到 代码 库 )  ├ ─ ─  config _ sample . py  #  配置 文件 配置文件 config . py 的 样例  ├ ─ ─  db _ config . py  #  数据 据库 数据库 配置 文件 配置文件 ( 未 上 传到 代码 库 )  ├ ─ ─  db _ config _ sample . py  #  配置 文件 配置文件 db _ config . py 的 样例  ├ ─ ─  __ init __. py  ├ ─ ─  mdb _ collection . py  ├ ─ ─  __ pycache __  └ ─ ─  sys _ config . py  #  一些 固定 敏感 的 配置", "location": "development/structure/"}, {"title": "代码 结构", "text": "", "location": "development/structure/#_1"}, {"title": "osroom /", "text": ".  ├ ─ ─  apps  #  应用 程序 应用程序 目录 主目录  ├ ─ ─  LICENSE  #  版权 说明  ├ ─ ─  logs  #  日志 目录  ├ ─ ─  osr - tool . py  #  离线 工具 脚本  ├ ─ ─  README . md  ├ ─ ─  requirements . txt  #  python 需求 包 文件  ├ ─ ─  start . py  #  系统 启动 系统启动 目录  ├ ─ ─  test  └ ─ ─  tools  #  离线 工具 脚本", "location": "development/structure/#osroom"}, {"title": "osroom / apps /", "text": ".  ├ ─ ─  admin _ pages  #  管理 端 静态 文件 ( html , js , css ... )  ├ ─ ─  app . py  #  系统 初始 初始化 程序  ├ ─ ─  configs  #  系统 统配 配置 系统配 系统配置 文件 目录 文件目录  ├ ─ ─  core  #  核心 程序 目录  ├ ─ ─  init _ core _ module . py  #  初始 初始化 核心 模块 脚本  ├ ─ ─  __ init __. py  ├ ─ ─  modules  #  功能 模块 功能模块 目录 主目录  ├ ─ ─  plugins  #  插件 模块 目录 主目录 ( 安装 的 插件 会 在 此 目录 )  ├ ─ ─  routing  #  路由 控制 模块 目录  ├ ─ ─  static  #  其他 系统 必须 静态 文件 目录 文件目录  ├ ─ ─  sys _ startup _ info . py  #  系统 启动 系统启动 时 打印 印信 信息 打印信息 脚本  ├ ─ ─  themes  #  主题 目录 主目录 ( 安装 的 主题 会 在 此 目录 )  ├ ─ ─  transations  #  各 语言 翻译 目录  └ ─ ─  utils  #  通用 程序", "location": "development/structure/#osroomapps"}, {"title": "& nbsp ; & nbsp ; osroom / apps / configs", "text": ".  ├ ─ ─  config . py  #  配置 文件 配置文件 , 此 文件 内容 可以 在 系统 统管 管理 系统管理 的 控制 ( 未 上 传到 代码 库 )  ├ ─ ─  config _ sample . py  #  配置 文件 配置文件 config . py 的 样例  ├ ─ ─  db _ config . py  #  数据 据库 数据库 配置 文件 配置文件 ( 未 上 传到 代码 库 )  ├ ─ ─  db _ config _ sample . py  #  配置 文件 配置文件 db _ config . py 的 样例  ├ ─ ─  __ init __. py  ├ ─ ─  mdb _ collection . py  ├ ─ ─  __ pycache __  └ ─ ─  sys _ config . py  #  一些 固定 敏感 的 配置", "location": "development/structure/#osroomappsconfigs"}, {"title": "Home", "text": "编写 中 ...", "location": "plugin/"}, {"title": "编写 中 ...", "text": "", "location": "plugin/#_1"}, {"title": "Home", "text": "编写 中 ...", "location": "theme/"}, {"title": "编写 中 ...", "text": "", "location": "theme/#_1"}], "config": {"separator": "[\\s\\-\\.]+", "lang": ["en"], "prebuild_index": false}}