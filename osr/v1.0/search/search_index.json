{"config": {"separator": "[\\s\\-]+", "prebuild_index": false, "lang": ["en"]}, "docs": [{"location": "", "title": "文档", "text": "介绍 OSROOM是基于Python3 Flask开发的开源Web系统, 也是一个CMS(内容管理系统) 可以用来建立企业官网, 个人博客网站, 提供Rest Api请求数据可以作为微信小程序的服务端 运行平台 可以运行于Linux系统, Windows未测试 支持 插件开发与安装 主题开发与安装 默认主题支持Markdown编辑器与富文本编辑器 易扩展 版本 目前最新版本: 1.0 Beta Demo https://demo.osroom.com (该站已经停止服务) Fork me on GitHub https://github.com/osroom/osroom OSROOM文档评论与反馈 进入Github评论 OSROOM Bug反馈与评论 Github issues bug 进入Github评论"}, {"location": "#_1", "title": "介绍", "text": "OSROOM是基于Python3 Flask开发的开源Web系统, 也是一个CMS(内容管理系统) 可以用来建立企业官网, 个人博客网站, 提供Rest Api请求数据可以作为微信小程序的服务端"}, {"location": "#_2", "title": "&nbsp;&nbsp;运行平台", "text": "可以运行于Linux系统, Windows未测试"}, {"location": "#_3", "title": "支持", "text": "插件开发与安装 主题开发与安装 默认主题支持Markdown编辑器与富文本编辑器 易扩展"}, {"location": "#_4", "title": "&nbsp;&nbsp;版本", "text": "目前最新版本: 1.0 Beta"}, {"location": "#demo", "title": "&nbsp;&nbsp;Demo", "text": "https://demo.osroom.com (该站已经停止服务)"}, {"location": "#fork-me-on-github", "title": "&nbsp;&nbsp;Fork me on GitHub", "text": "https://github.com/osroom/osroom"}, {"location": "#osroom", "title": "OSROOM文档评论与反馈", "text": "进入Github评论"}, {"location": "#osroom-bug", "title": "OSROOM Bug反馈与评论", "text": "Github issues bug 进入Github评论"}, {"location": "api/api_call/", "title": "Api call", "text": "Api请求验证 Api请求验证分2种情况 情况1.客户端为浏览器, 这里的定义是客户端网页是请求OSROOM获取的html网页. 因为html经过了OSROOM服务器Jinjia2模板引擎渲染, 带上了随机生成的csrf_token 所以在html能获取到csrf_token, 具体使用如下教程 情况2.客户端为APP或小程序, 也就是客户端和服务器时完全分开的. 这时候就要使用JWT方式验证, 具体如下教程 CsrfToken验证 获取与使用CsrfToken 每个经过OSROOM后端的html页面都会带上一个CsrfToken, 具体使用方式如下 使用Jinjia2语法获取 {{csrf_token()}} 每一个Api的请求都需要带上CsrfToken, 作为验证令牌. 所以可以在html <head> 与 <head/> 间写入如下代码 <script type=\"text/javascript\"> //设置csrf token, 否则无法请求api数据(保证请求数据的网页是自己服务器的网页) var csrftoken = \"{{ csrf_token() }}\" //获取token $.ajaxSetup({ beforeSend: function(xhr) { // 头部带上参数X-CSRFToken, 值为上面通过JinJia2获取到的csrftoken xhr.setRequestHeader(\"X-CSRFToken\", csrftoken); } }); </script> 浏览器F12可以看到我们写入的代码中的CSRFToken, 如图 JWT验证(Token) 使用说明 SecretToken 与 AccessToken 用于在无 CsrfToken 时, 调用API请求的一个客户端令牌, 以验证客户端是否为伪造的. SecretToken是长期可用验证令牌(除非你停用或者删除了它), 需要保存在客户端使用, 主要用于获取 AccessToken . 使用令牌时, 可以使用SecretToken做令牌或者OSR-ClientId与AccessToken组合做令牌(见使用方式). 为了减少SecretToken的暴露风险, 发送Api请求时, 尽量使用 OSR-ClientId 和 AccessToken 组合作为客户端验证令牌. 当没有获取过AccessToken或者AccessToken失效时, 请通过 /api/token/access-token 获取新的AccessToken (具体请查看/api/token/access-token文档). 获取AccessToken时, 只能使用SecretToken作为客户端令牌验证.(建议使用https) 在http请求中设置请求头 OSR-RestToken:\"SecretToken xxxxx\" 或 OSR-RestToken:\"AccessToken xxxxx\" 和 OSR-ClientId:\"xxxxx\" 获取AccessToken 第一次获取 AccessToke n, 首先去OSROOM管理端获取 SecretToken , 如图 然后GET请求 /api/token/access-token 获取一个新的AccessToken 请求时headers参数OSR-RestToken值为 SecretToken 为客户端令牌, 如图. 结果返回AccessToken和CliendId 如果请求 /api/token/access-token 的时候, 有带上 OSR-CliendId , 则系统不会生成新的CliendId 如下图, 结果返回的CliendId和请求时带上的一样 请求API获取&修改数据 对于不需要登录验证的请求验证如下: headers参数OSR-RestToken值为 AccessToken 和参数OSR-CliendId值为 CliendId 登录获取BearerToken 请求Api(/api/sign-in)获取 BearerToken 如下图,登录时也headers页需要 AccessToken 和 CliendId 作为客户端令牌 headers参数OSR-RestToken值为 AccessToken 和参数OSR-CliendId值为 CliendId 注意 : 该请求还得带上Api请求参数username, password, use_jwt_auth 客户端保存好获取到的auth_token(也就是下面要用到的BearerToken) 对于需要登录验证的API请求如下** 和上面差不多, 也就多了一个headers参数 OSR-BearerToken , 值为登录成功时获取的auth_token 注销登录 注销登录如下, 注销后前面所请求的AccessToken 和 BearerToken将失效"}, {"location": "api/api_call/#api", "title": "Api请求验证", "text": "Api请求验证分2种情况 情况1.客户端为浏览器, 这里的定义是客户端网页是请求OSROOM获取的html网页. 因为html经过了OSROOM服务器Jinjia2模板引擎渲染, 带上了随机生成的csrf_token 所以在html能获取到csrf_token, 具体使用如下教程 情况2.客户端为APP或小程序, 也就是客户端和服务器时完全分开的. 这时候就要使用JWT方式验证, 具体如下教程"}, {"location": "api/api_call/#csrftoken", "title": "CsrfToken验证", "text": ""}, {"location": "api/api_call/#csrftoken_1", "title": "&nbsp;&nbsp;获取与使用CsrfToken", "text": "每个经过OSROOM后端的html页面都会带上一个CsrfToken, 具体使用方式如下 使用Jinjia2语法获取 {{csrf_token()}} 每一个Api的请求都需要带上CsrfToken, 作为验证令牌. 所以可以在html <head> 与 <head/> 间写入如下代码 <script type=\"text/javascript\"> //设置csrf token, 否则无法请求api数据(保证请求数据的网页是自己服务器的网页) var csrftoken = \"{{ csrf_token() }}\" //获取token $.ajaxSetup({ beforeSend: function(xhr) { // 头部带上参数X-CSRFToken, 值为上面通过JinJia2获取到的csrftoken xhr.setRequestHeader(\"X-CSRFToken\", csrftoken); } }); </script> 浏览器F12可以看到我们写入的代码中的CSRFToken, 如图"}, {"location": "api/api_call/#jwttoken", "title": "JWT验证(Token)", "text": ""}, {"location": "api/api_call/#_1", "title": "&nbsp;&nbsp;使用说明", "text": "SecretToken 与 AccessToken 用于在无 CsrfToken 时, 调用API请求的一个客户端令牌, 以验证客户端是否为伪造的. SecretToken是长期可用验证令牌(除非你停用或者删除了它), 需要保存在客户端使用, 主要用于获取 AccessToken . 使用令牌时, 可以使用SecretToken做令牌或者OSR-ClientId与AccessToken组合做令牌(见使用方式). 为了减少SecretToken的暴露风险, 发送Api请求时, 尽量使用 OSR-ClientId 和 AccessToken 组合作为客户端验证令牌. 当没有获取过AccessToken或者AccessToken失效时, 请通过 /api/token/access-token 获取新的AccessToken (具体请查看/api/token/access-token文档). 获取AccessToken时, 只能使用SecretToken作为客户端令牌验证.(建议使用https) 在http请求中设置请求头 OSR-RestToken:\"SecretToken xxxxx\" 或 OSR-RestToken:\"AccessToken xxxxx\" 和 OSR-ClientId:\"xxxxx\""}, {"location": "api/api_call/#accesstoken", "title": "&nbsp;&nbsp;获取AccessToken", "text": "第一次获取 AccessToke n, 首先去OSROOM管理端获取 SecretToken , 如图 然后GET请求 /api/token/access-token 获取一个新的AccessToken 请求时headers参数OSR-RestToken值为 SecretToken 为客户端令牌, 如图. 结果返回AccessToken和CliendId 如果请求 /api/token/access-token 的时候, 有带上 OSR-CliendId , 则系统不会生成新的CliendId 如下图, 结果返回的CliendId和请求时带上的一样"}, {"location": "api/api_call/#api_1", "title": "&nbsp;&nbsp;请求API获取&amp;修改数据", "text": "对于不需要登录验证的请求验证如下: headers参数OSR-RestToken值为 AccessToken 和参数OSR-CliendId值为 CliendId"}, {"location": "api/api_call/#bearertoken", "title": "&nbsp;&nbsp;登录获取BearerToken", "text": "请求Api(/api/sign-in)获取 BearerToken 如下图,登录时也headers页需要 AccessToken 和 CliendId 作为客户端令牌 headers参数OSR-RestToken值为 AccessToken 和参数OSR-CliendId值为 CliendId 注意 : 该请求还得带上Api请求参数username, password, use_jwt_auth 客户端保存好获取到的auth_token(也就是下面要用到的BearerToken) 对于需要登录验证的API请求如下** 和上面差不多, 也就多了一个headers参数 OSR-BearerToken , 值为登录成功时获取的auth_token"}, {"location": "api/api_call/#_2", "title": "&nbsp;&nbsp;注销登录", "text": "注销登录如下, 注销后前面所请求的AccessToken 和 BearerToken将失效"}, {"location": "api/api_doc/", "title": "Api doc", "text": "Api文档说明 Account-data-availability Api :/api/account/data/availability Methods :GET Permission :unlimited Login auth :Yes Request and parameters: GET: 查看用户名，email,个性域是否可以使用 field:<str>, username or email or custom_domain vaule:<str> :return: Account-self Api :/api/account/self Methods :GET Permission :unlimited Login auth :Yes Request and parameters: GET: 提供一个user id, 获取是否时当前登录用户 user_id:<str> :return: Admin-role-permission Api :/api/admin/role/permission Methods :GET Permission :USER_MANAGE Login auth :Yes Request and parameters: GET: 获取所有的权限表 :return: Admin-role Api :/api/admin/role Methods :GET, POST, PUT, DELETE Permission :USER_MANAGE Login auth :Yes Request and parameters: GET: 1. 获取指定ID的角色 id:<str> ,role id 2.分页获取全部角色 page:<int>,第几页，默认第1页 pre:<int>, 每页查询多少条 POST: 添加一个角色 name:<str> instructions:<str> default:<int or bool>, 0 or 1 permissions:<array>, 数组，可以给角色指定多个权重, 如[1, 2, 4, 128] PUT: 修改一个角色 id:<str>, role id name:<str> instructions:<str> default:<int>, 0 or 1 permissions:<array>, 数组，可以给角色指定多个权重, 如[1, 2, 4, 128] DELETE: 删除角色 ids:<arry>, role ids Account-password-reset Api :/api/account/password/reset Methods :PUT Permission :USER Login auth :Yes Request and parameters: PUT: 账户密码重设 now_password:<str>,目前使用的密码 password:<str>, 新密码 password2:<str>, 再次确认新密码 :return: Account-password-retrieve Api :/api/account/password/retrieve Methods :PUT, POST Permission :unlimited Login auth :Yes Request and parameters: PUT: 忘记密码,重设 获取验证码,只需要传回参数email,return回一个{code:{'_id':'', str:'',time:'' }} 设置新密码,需要全部参数 email_code:<str>, 邮件中收到的验证码 email:<str>, 邮箱 password:<str>, 新密码 password2:<str>, 再次确认密码 :return: ***## Api文档说明 Admin-user Api :/api/admin/user Methods :GET, PUT, DELETE Permission :USER_MANAGE Login auth :Yes Request and parameters: GET: 1. 获取指定ID的用户基本信息 id:<str> , user id 2.分页获取所有用户 status:<str>,用户状态，\"normal\"　or \"inactive\" or \"cancelled\" page:<int>,第几页，默认第1页 pre:<int>, 每页查询多少条 keyword:<str>, Search keywords, 搜索的时候使用 PUT: 1.编辑用户 id:<str>, user id role_id:<str>, role id active:<int>, 0 or 1 2.激活或冻结用户 op:<str>, 为\"activation\" active:<int>, 0 or 1, 0为冻结, 1为激活 ids:<array> 3.恢复用户,将状态改为未删除 op:<str>, 为\"restore\" ids:<array> DELETE: 删除用户,非数据库删除 ids:<array> Admin-user-del Api :/api/admin/user/del Methods :DELETE Permission :IMPORTANT_DATA_DEL Login auth :Yes Request and parameters: DELETE: 永久删除用户,数据库中删除 ids:<array> permanent:<int> 0 or 1, 0:非数据库删除,只是把状态改成\"删除状态\",为1:表示永久删除, Account-upload-avatar Api :/api/account/upload/avatar Methods :PUT Permission :USER Login auth :Yes Request and parameters: PUT 头像上传 注意:虽然服务的提供图片裁剪功能，由于耗费服务器资源,非必要情况下请不要使用，请再客户端裁剪好再上传. 为了防止恶意使用裁剪功能，可以在管理端中设置(upload)中关闭上传文件裁剪功能 *提供2种上传方式* 1.以常规文件格式上传 upfile:<img file>，头像文件 preview_w:<int>, 图片预览宽度 tailoring:<dict>, (裁剪功能开启后才能使用),裁剪尺寸，格式:{x:12, y:12, height:100, width:100, rotate:0} x和ｙ为裁剪位置，x距离左边距离, y距离上边距离, width截图框的宽，　height截图框的高 2.以base64编码上传 imgfile_base:<str>,以base64编码上传文件 :return: Sign-up Api :/api/sign-up Methods :POST Permission :unlimited Login auth : Request and parameters: POST: 1.普通用户使用邮箱注册a emial:<emial>, 邮箱 username: <str>, 用户名 password: <str>,密码 password2: <str>,再次确认密码 code:<str>, 邮箱收取到的code 2.普通用户使用手机注册a mobile_phone_number:<int>手机号码 username: <str>, 用户名 password: <str>,密码 password2: <str>,再次确认密码 code:<str>, 手机收取到的code :return: Sign-in Api :/api/sign-in Methods :PUT Permission :unlimited Login auth : Request and parameters: PUT: 1.普通登录 username: <str>, 用户名或邮箱或手机号码 password: <str>,密码 remember_me:<bool>,是否保存密码 next:<str>, 登录后要返回的to url, 如果为空,则返回设置中的LOGIN_TO use_jwt_auth:<int>, 是否使用jwt验证. 0 或 1,默认为0不使用 当多次输入错误密码时，api会返回open_img_verif_code:true, 表示需要图片验证码验证,客户端应该请求验证码/api/vercode/image, 然后后再次提交登录时带下如下参数 再次提交登录时需要以下两个参数 code:<str>, 图片验证码中的字符 code_url_obj:<json>,图片验证码url 对象 :return: 2.第三方登录 待开发插件入口 Sign-in-third-party- -callback Api :/api/sign-in/third-party/ /callback Methods :GET, PUT, POST Permission :unlimited Login auth : Request and parameters: PUT & POST & GET: 第三方平台授权登录回调 platform: 平台名称：可以是wechat, qq, github, sina_weibo, alipay, facebook, twitter等 可在sys_config.py文件中配置LOGIN_PLATFORM :return: Sign-out Api :/api/sign-out Methods :GET, PUT Permission :unlimited Login auth : Request and parameters: GET or PUT: 用户登出api use_jwt_auth:<int>, 是否使用jwt验证. 0 或 1,默认为0不使用. 如果是jwt验证登录信息的客户端use_jwt_auth应为1 :param adm: :return: ***## Api文档说明 Account-profile-public Api :/api/account/profile/public Methods :GET Permission :unlimited Login auth : Request and parameters: GET: 获取用户公开信息 user_id:<str> is_basic:<int>, 0或1,默认1. 为１时只获取最基本的用户信息 :return: Account-basic Api :/api/account/basic Methods :PUT Permission :USER Login auth :Yes Request and parameters: 用户基础设置 PUT: 编辑用户基础设置 username:<str>, 新的用户名 custom_domain:<str>, 个性域名 editor:<str>, 'rich_text' or 'markdown' 如果你有多个文本编辑器的话，可以加入这个选项 :return: Account-profile Api :/api/account/profile Methods :GET, PUT Permission :USER Login auth :Yes Request and parameters: 用户资料 GET: 获取当前登录用户的信息 is_basic:<int>, 0或1,默认1. 为１时只获取最基本的用户信息 PUT 更新用户资料 gender:<str>, m or f or secret birthday:<int or str>, The format must be \"YYYYMMDD\" ,such as: 20170101 address:<dict>, The format must be: {countries:'string', provinces:'string', city:'string', district:'string', detailed:'string'} info:<str> :return: Account-email Api :/api/account/email Methods :PUT Permission :USER Login auth :Yes Request and parameters: PUT 账户邮件修改 email:<email>, 要绑定的新邮箱 new_email_code:<str>, 新邮箱收取到的验证码,用于保证绑定的邮箱时用户自己的 current_email_code:<str>, 当前邮箱收取的验证码,用于保证邮箱修改是用户自己发起 password:<str>, 账户的登录密码 :return: ***## Api文档说明 Admin-message-send Api :/api/admin/message/send Methods :POST Permission :EDITOR Login auth :Yes Request and parameters: POST 发送消息 title:<title>,标题 content:<str>,正文 content_html:<str>,正文html send_type:<array>,发送类型on_site, email, sms . 如:[\"email\"], 也可以同时发送多个个[\"email\", \"on_site\"] username:<array>, 接收信息的用户名, 如[\"test\", \"test2\"] :return: Admin-message-on-site Api :/api/admin/message/on-site Methods :GET, PUT, DELETE Permission :EDITOR Login auth :Yes Request and parameters: GET: 获取用户消息 is_sys_msg:<int>,获取系统消息? 1表示是, 0表示否 pre:<int>,每页获取几条数据,默认10 page:<int>,第几页,默认1 type:<array>,消息类型, 比如[\"notice\", \"comment\", \"audit\"] DELETE: 删除消息(此接口只能删除由系统发出的消息user_id==0的) ids:<array>,消息id :return: Admin-message-sms Api :/api/admin/message/sms Methods :GET, DELETE Permission :EDITOR Login auth :Yes Request and parameters: GET: 获取系统发送出去的邮件或短信记录 status:<str>, 状态, normal, abnormal, error pre:<int>,每页获取几条数据,默认10 page:<int>,第几页,默认1 DELETE: 删除消息(此接口只能删除由系统发出的消息user_id==0的) ids:<array>,消息id :return: ***## Api文档说明 User-message Api :/api/user/message Methods :GET, PUT, DELETE Permission :unlimited Login auth :Yes Request and parameters: GET: 获取用户的消息 type:<array>,消息类型, 比如[\"notice\", \"private_letter\"] label:<array>, 消息label, 默认全部label, 比如['comment', 'audit_failure', 'sys_notice'] pre:<int>,每页获取几条数据,默认10 page:<int>,第几页,默认1 status_update:<str>,获取后的消息状态更新. 可以为: \"have_read\" PUT: 更新消息状态 ids:<array>,消息id status_update:<str>,获取后的消息状态更新. 可以为: \"have_read\" DELETE: 删除消息 ids:<array>,消息id :return: Global Api :/api/global Methods :GET Permission :unlimited Login auth : Request and parameters: GET: 获取当前全局数据,包括站点的公开设置, 当前登录用户的基本可公开信息 :return: Global-media Api :/api/global/media Methods :GET Permission :unlimited Login auth : Request and parameters: GET: 1.获取指定的多媒体数据 conditions:<array:dict>, Such as:[{'type':<str>, 'names':<array>, 'name_regex':''}] 说明: type-可以是\"text\", \"image\", \"video\", \"audio\" names-数组,指定要获取数据的name name_regex-字符串,获取匹配此正则的media,如果为空值，则不使用正则匹配(空置包括null, None,False, \"\") 注意:name 与name_regex不能同时使用,当name_regex非空时，查询自动忽略names 使用示例：前提在管理端多媒体中存在的内容 如:首页轮播图片和获取”关于我们“页面的文字内容 [ {\"type\":\"image\", \"names\":[\"home-carousel-1\", \"home_carousel-2\"]}, {\"type\":\"text\", \"names\":[\"about-me\"]}, {\"type\":\"image\", \"name_regex\":\"test-[0-9]+\"} ] 2.获取指定category的多媒体 category_name:<array> category name, 可同时指定多个category name, 使用数组 category_user_id:<str>, 为空则表示获取站点官方的多媒体 category_type:<str>, 可选\"text\", \"image\", \"video\", \"audio\" page:<int>, 第几页, 默认1 pre:<int>, 每页几条数据, 默认8 3.根据id 获取 media_id:<str> :return: ***## Api文档说明 Admin-audit-rule-key Api :/api/admin/audit/rule/key Methods :GET Permission :WEB_SETTING Login auth :Yes Request and parameters: GET: 获取审核规则的所有key与说明, 也就config设置中的audit :return: Admin-audit-rule Api :/api/admin/audit/rule Methods :GET, POST, PUT, PATCH, DELETE Permission :WEB_SETTING Login auth :Yes Request and parameters: GET: 1. 获取所有验证规则 project:<str>, \"username\", \"post_category\", keyword:<str>,不能使用的关键词,支持正则 page:<int>, 第几页, 默认1 pre:<int>, 每页返回pre条数据，默认10 :return: POST: 添加验证规则 project:<str>, \"username\", \"post_category\" rule:<str> :return: DELETE: 删除规则 ids:<array>, rule ids :return: ***## Api文档说明 Admin-setting-sys-log Api :/api/admin/setting/sys/log Methods :GET Permission :SYS_SETTING Login auth :Yes Request and parameters: GET: 获取文件日志 name:<str>,日志名称 ip:<str>,要获取哪个主机的日志 page:<int> :return: Session-language-set Api :/api/session/language-set Methods :PUT Permission :unlimited Login auth : Request and parameters: PUT : 修改当前语言 language:<str>, 如en_US, zh_CN :return: Admin-setting-sys-host Api :/api/admin/setting/sys/host Methods :GET, POST, PUT, DELETE Permission :SYS_SETTING Login auth :Yes Request and parameters: GET: 获取主机的信息 ip:<str>,要获取哪个主机的日志 :return: PUT: 设置主机连接信息与重启命令 username:<str>,主机用户名 password:<str>,主机密码 host_ip:<str>,要获取哪个主机的日志 host_port:<int>,主机端口 cmd:<str>, 命令, 注释使用# Admin-setting-sys-host-cmd-execute Api :/api/admin/setting/sys/host/cmd-execute Methods :PUT Permission :SYS_SETTING Login auth :Yes Request and parameters: PUT: 命令执行 host_ip:<str> cmd:<str>, 要执行的Linux 命令,如果没有则自动执行主机保存的常用命令 :return: Admin-setting-sys-host-connection-test Api :/api/admin/setting/sys/host/connection-test Methods :PUT Permission :SYS_SETTING Login auth :Yes Request and parameters: PUT: 服务器连接测试 host_ip:<str> :return: ***## Api文档说明 Admin-setting-sys-config-version Api :/api/admin/setting/sys/config/version Methods :GET, PUT Permission :SYS_SETTING Login auth :Yes Request and parameters: GET: 获取所有的系统配置版本, 和网站服务器主机 PUT: 切换单个节点网站的配置版本 switch_version:<str>, 需要切换的版本号 diable_update:<int> , 0 or 1 host_ip:<str>, 主机ip :return: Admin-setting-sys-config Api :/api/admin/setting/sys/config Methods :GET, PUT Permission :SYS_SETTING Login auth :Yes Request and parameters: GET: 根据project获取当前最新配置(特殊配置将不会返回,如不允许再页面编辑的,即那些不带有\"__restart__\"key的) project:<array>, 能同时获取多个project的数据.不使用此参数则表示获取全部配置 keyword:<str>, 搜索匹配关键字的结构 only_project_field:<int>, 只需要project字段. 0 or 1.默认为0 PUT: key:<str>, 要设置的配制参数的key project:<str>, 项目,比如这个key是comment下的，则project为comment value:<str or int or bool or list or dict or tuple>, key对应的值 info:<str>, 说明 :return: Token-access-token Api :/api/token/access-token Methods :GET Permission :unlimited Login auth : Request and parameters: GET: 客户端获取/刷新AccessToken (必须使用SecretToken验证通过) 如果请求头中带有ClientId 则使用客户端提供的ClientId, 否则创建新的ClientId :return: Admin-token-secret-token Api :/api/admin/token/secret-token Methods :GET, POST, PUT, DELETE Permission :ROOT Login auth :Yes Request and parameters: 客户端访问使用的secret token管理 GET: 获取所有secret token POST: 创建一个secret token PUT: 激活或禁用一个id token_id:<id>,token id action:<str>,如果为\"activate\"则激活token, 为\"disable\"禁用token DELETE: 删除一个token token_id:<id>,token id :return: ***## Api文档说明 Admin-url-permission Api :/api/admin/url/permission Methods :GET, POST, PUT, DELETE Permission :ROOT Login auth :Yes Request and parameters: GET: 获取系统的web url type:<array>,类型, 可选api, static, page pre:<int>,每页获取几条数据,默认10 page:<int>,第几页,默认1 keyword:<str>,搜索关键字 POST: 添加页面路由 url:<str>, 只用于添加页面路由 PUT: 更新权限 id:<str>,id method:<str> custom_permission:<array>, 如[1, 512, 128] login_auth:<int>, 0 或　１, 是否需要登录验证(如果原代码路由中未指定需要登录请求, 则按照此配置) DELETE: 删除手动添加的页面路由 ids:<array> :return: ***## Api文档说明 Upload-file Api :/api/upload/file Methods :POST Permission :USER Login auth :Yes Request and parameters: POST 文件上传 api返回json数据,格式默认如下: {'urls':[<url>, ...,<url>], 'state':<'success' or 'error'>, 'msg_type':<'s' or e'>, 'msg':'' } return_url_key: <str>, 自定义返回数据的urls的key, 默认'urls' return_state_key:<str>, 自定义返回数据的状态的key, 默认'state' return_success:<str or int>, 自定义返回数据成功的状态的值, 默认'success' return_error:<str or int>, 自定义返回数据错误的状态的值, 默认'error' prefix:<str>, 默认为“generic/”, 则会将文件放入到generic目录下 save_temporary_url：<0 or 1>,默认为1, 如果 :return: Admin-upload-media-file Api :/api/admin/upload/media-file Methods :GET, POST, PUT, DELETE Permission :EDITOR Login auth :Yes Request and parameters: GET 1.获取多个多媒体信息 file_type:<str>, 文件类型,可选\"image\", \"video\", \"audio\", \"other\" category_id:<str>, 分类id, 获取默认分类使用\"default\"作为category_id, 不传入此参数则表示获取全部 keyword:<str>,搜索用 page:<int>, 第几页, 默认1 pre:<int>, 每页几条数据, 默认12 sort:<array>,排序, 1表示升序, -1表示降序.如: 按时间降序 [{\"time\":-1}] 按时间升序 [{\"time\", 1}] 默认时按时间降序, 也可以用其他字段排序 2.获取1个信息 id:<str>,id POST 添加媒体 name:<str>, 名字 link:<str>, 链接, 用于展示的时候跳转链接 link_name:<str>,链接名字 link_open_new_tab:<str>,链接是否打开新标签 title:<str>, 展示的标题 name:<str>, 展示时需要显示的文字 text:<str> text_html:<str>, text的html格式(富文本) type:<str>, 文件类型,可选\"image\", \"video\", \"audio\", \"text\",\"other\" category_id:<str>, 分类id **如果需要上传文件,还需要一下参数: batch:<int>, 0 or 1, default:0, 为1表示批量上传. return_url_key: <str>, 自定义返回数据的urls的key, 默认'urls' return_state_key:<str>, 自定义返回数据的状态的key, 默认'state' return_success:<str or int>, 自定义返回数据成功的状态的值, 默认'success' return_error:<str or int>, 自定义返回数据错误的状态的值, 默认'error' **注意: 如果后台获取有文件上传，则表示只上传文件 上传文件返回数据格式默认如下: {'urls':[<url>, ...,<url>], 'state':<'success' or 'error'>, 'msg_type':<'s' or e'>, 'msg':'' } PUT 编辑多媒体信息 id:<str>,要编辑的media id category_id:<str>,要编辑的文件的分类id, 如果不修改分类可以不提交 name:<str> link:<str>, 链接 link_name:<str>,链接名字 link_open_new_tab:<str>,链接是否打开新标签 title:<str> text:<str> text_html:<str>, text的html格式(富文本) **如果只更新文件(如图片),还需要一下参数: batch:<int>, 0 or 1, default:0, 为1表示批量上传. return_url_key: <str>, 自定义返回数据的urls的key, 默认'urls' return_state_key:<str>, 自定义返回数据的状态的key, 默认'state' return_success:<str or int>, 自定义返回数据成功的状态的值, 默认'success' return_error:<str or int>, 自定义返回数据错误的状态的值, 默认'error' **注意: 如果后台获取有文件上传，则表示只上传文件 上传文件返回数据格式默认如下: {'urls':[<url>, ...,<url>], 'state':<'success' or 'error'>, 'msg_type':<'s' or e'>, 'msg':'' } DELETE 删除多媒体文件 ids:<array>,要删除的文件的id :return: ***## Api文档说明 User-follow Api :/api/user/follow Methods :GET Permission :unlimited Login auth : Request and parameters: GET: 获取用户关注的用户 user_id:<str>, 用户ID action:<str>,　为followed_user 获取当前的登录用户的粉丝 action:<str>,　为fans :return: User-follow Api :/api/user/follow Methods :POST, DELETE Permission :unlimited Login auth :Yes Request and parameters: POST: 当前登录用户关注另一个用户用户 ids:<array>,需关注用户的user id DELETE: 当前登录用户取消关注一个用户 ids:<array>,不再关注的用户的user id :return: ***## Api文档说明 Admin-comment-access Api :/api/admin/comment/access Methods :GET Permission :REPORT Login auth :Yes Request and parameters: GET: 获取comment数据统计 days:<int> Admin-post-access Api :/api/admin/post/access Methods :GET Permission :REPORT Login auth :Yes Request and parameters: GET: 获取post数据统计 days:<int> Admin-report-basic Api :/api/admin/report/basic Methods :GET Permission :REPORT Login auth :Yes Request and parameters: GET: 获取网站的最基本报表数据 project:<array>,默认全部,可以是post, comment, user, message, plugin, media, inform ***## Api文档说明 Content-category-info Api :/api/content/category/info Methods :GET Permission :unlimited Login auth : Request and parameters: 获取指定category id的category信息 :return: Content-category Api :/api/content/category Methods :GET, POST, PUT, DELETE Permission :unlimited Login auth :Yes Request and parameters: GET: action:<str>, 可以为get_category, get_category_type, 默认get_category 1.获取当前用户指定的type的所有category action:<str>, 为get_category type:<str>, 你设置的那几个类别中的类别,在config.py文件中category, 可在网站管理端设置的 2. 获取所有的type: config.py文件中category的所有CATEGORY TYPE action:<str>, 为get_category_type 解释: 在分类中(category)又分为几种类型(type) 如: type为post有几个category POST: 添加文集 name:<str> type:<str>, 只能是你设置的那几个类别,在config.py文件中category, 或者网站管理设置 PUT: 修改文集 id:<str>, post category id name:<str> DELETE: 删除文集名称 ids:<array>, post category ids Admin-content-category Api :/api/admin/content/category Methods :GET, POST, PUT, DELETE Permission :EDITOR Login auth :Yes Request and parameters: Admin管理端category管理 GET: 1.获取指定的type的所有分类 type:<str>, 你设置的那几个类别中的类别,在config.py文件中category, 或者网站管理设置 2.获取所有的type get_type:<int>, get_type为1 POST: 添加文集 name:<str> type:<str>, 只能是你设置的那几个类别,在config.py文件中category, 或者网站管理设置 PUT: 修改文集 id:<str>, post category id name:<str> DELETE: 删除文集名称 ids:<array>, post category ids ***## Api文档说明 Admin-plugin Api :/api/admin/plugin Methods :GET, POST, PUT, DELETE Permission :SYS_SETTING Login auth :Yes Request and parameters: 插件管理 GET: 获取所有插件 page:<int>,第几页, 默认1 pre:<int>,每页个数, 默认10 keyword:<str>, 搜索用 POST: 插件安装 upfile:<file>,上传的插件压缩包 PUT: 操作插件 action:<str>, start:激活插件 stop:停用插件 name:<str>, 插件名称 :return: Admin-plugin-setting Api :/api/admin/plugin/setting Methods :GET, POST, PUT Permission :SYS_SETTING Login auth :Yes Request and parameters: 插件设置 GET: 获取插件设置 plugin_name:<str>, 插件名 POST: 刷新当前插件配置(当插件配置代码被修改后,如果未重新激活，系统保存的配置是不会更新的，所有可以使用此方法刷新) plugin_name:<str>, 插件名 PUT: 修改设置 plugin_name:<str>, 插件名 key:<str>,KEY value:<可多种类型的数据>, 值 :return: Admin-plugin-setting-install-requirement Api :/api/admin/plugin/setting/install-requirement Methods :PUT Permission :SYS_SETTING Login auth :Yes Request and parameters: 插件需求包安装 PUT: 插件需求包安装 plugin_name:<str>, 插件名 :return: ***## Api文档说明 Admin-comment Api :/api/admin/comment Methods :GET, POST, PUT, PATCH, DELETE Permission :AUDIT Login auth :Yes Request and parameters: GET: 获取评论 status:<str>,\"is_issued\"（正常发布） or \"not_audit\"（等待审核） or \"unqualified\"（未通过审核） or \"user_remove\"(用户删除的) keyword:<str>,搜索关键字 sort:<array>,排序, 1表示升序, -1表示降序.如: 按时间降序 [{\"issue_time\":-1}] 按时间升序 [{\"issue_time\": 1}] 先后按赞(like)数降序, 评论数降序,pv降序, 发布时间降序 [{\"like\": -1},{\"issue_time\": -1}] 默认时按时间降序, 也可以用其他字段排序 page:<int>,第几页，默认第1页 pre:<int>, 每页查询多少条, 默认是config.py配制文件中配制的数量 :return: PATCH or PUT: 1.人工审核comment, 带上参数score op:<str>, \"audit\" ids:<array>, comment id score:<int>, 0-10分 2.恢复comment, 只能恢复管理员移入待删除的comment, is_delete为2的comment op:<str>, \"restore\" ids:<array>, comment id DELETE: 删除comment ids:<array>, comment id pending_delete:<int>, 1: is_delete为2, 标记为永久删除, 0:从数据库删除数据 :return: Comment Api :/api/comment Methods :GET Permission :unlimited Login auth : Request and parameters: GET: 获取文章的评论 target_id:<str>, 目标id,比如文章post id target_type:<str>, 目标类型,比如文章就是\"post\" status:<str>,\"is_issued\"（正常发布） or \"not_audit\"（等待审核） or \"unqualified\"（未通过审核） or \"user_remove\"(用户删除的) sort:<array>,排序, 1表示升序, -1表示降序.如: 按时间降序 [{\"issue_time\":-1}] 按时间升序 [{\"issue_time\": 1}] 先后按赞(like)数降序, 评论数降序,pv降序, 发布时间降序 [{\"like\": -1},{\"issue_time\": -1}] 默认时按时间降序, 也可以用其他字段排序 page:<int>,第几页，默认第1页 pre:<int>, 每页查询多少条, 默认是config.py配制文件中配制的数量 :return: Comment Api :/api/comment Methods :POST, PUT, PATCH, DELETE Permission :unlimited Login auth :Yes Request and parameters: POST: 评论发布 target_id:<str>, 目标id,比如文章post id target_type:<str>, 目标类型,比如文章就是\"post\" reply_id:<str>, 被回复的comment id. 如果是回复评论中的评论,如:在评论a下面有一个评论a1，我需要回复a1, 这个时候需要提供的reply_id依然是a评论的，　而不是a1的 reply_user_id:<str>, 被回复的comment 的用户的user id， 如果是回复评论中的评论,如:在评论a下面有一个评论a1，我需要回复a1, 这个时候需要提供的reply_user_id是a１评论的 reply_username:<str>, 被回复的comment 的用户的username， 如果是回复评论中的评论,如:在评论a下面有一个评论a1，我需要回复a1, 这个时候需要提供的reply_username是a１评论的 content:<str>, 内容(比如:富文本的html内容),将会保存到数据库中 如果是游客评论,则需要以下两个参数(需要再后台配置中开启游客评论开关): username:<str>, 游客昵称 email:<str>,游客邮箱 :return: DELETE: 评论删除 ids:<array>, comment ids Comment-like Api :/api/comment/like Methods :PUT Permission :unlimited Login auth :Yes Request and parameters: PUT: 给评论点赞 id:<str> :return: ***## Api文档说明 Inform-content Api :/api/inform/content Methods :PUT Permission :unlimited Login auth : Request and parameters: PUT: 内容违规举报 ctype:<str>, 内容的类型可选:post(文章), comment(评论), media(多媒体), user(用户) cid:<str>, 内容的id category:<str>, 举报内容违规类型, 可选: ad, junk_info, plagiarize, other details：<str>, 违规详情(选填) ***## Api文档说明 Vercode-send Api :/api/vercode/send Methods :POST Permission :unlimited Login auth : Request and parameters: POST: 手机或邮箱验证码发送 account_type:<str>, \"email\" or \"mobile_phone\" account:<email or number>, 接收验证码的账户 exist_account:<int>, 是否只能发送给用该邮箱/号码在本平台已注册的用户? 1为是, 0为否. 默认0 如果1分钟内,同一IP,同一用户(未登录的同属一匿名用户) 调用api超过MAX_NUM_SEND_SAMEIP_PERMIN_NO_IMGCODE(1分钟内无图片验证码最大调用次数)配置的次数, 超过后API会生会返回open_img_verif_code:true, 表示需要图片验证码验证,客户端应该请求验证码/api/vercode/image, 再次提交登录时需要以下两个参数 code:<str>, 图片验证码中的字符 code_url_obj:<json>, 图片验证码url 对象 注意:如果你并不想使用图片验证码来防止频繁调用,请在管理的设置MAX_NUM_SEND_SAMEIP_PERMIN_NO_IMGCODE的值大于 MAX_NUM_SEND_SAMEIP_PERMIN :return: Vercode-image Api :/api/vercode/image Methods :GET Permission :unlimited Login auth : Request and parameters: GET: 获取图片验证码 :return: 验证码path object Post Api :/api/post Methods :GET Permission :unlimited Login auth : Request and parameters: GET: 1.获取一篇文章 post_id:<str>,post id 2.根据条件获取文章 sort:<array>,排序, 1表示升序, -1表示降序.如: 按时间降序 [{\"issue_time\":-1},{\"update_time\":-1}] 按时间升序 [{\"issue_time\": 1},{\"update_time\": 1}] 先后按赞(like)数降序, 评论数降序,pv降序, 发布时间降序 [{\"like\": -1}, {\"comment_num\": -1}, {\"pv\": -1},{\"issue_time\": -1}] 默认时按时间降序, 也可以用其他字段排序 status:<int> , \"is_issued\"（正常发布） or \"draft\"（草稿） or \"not_audit\"（等待审核） or \"unqualified\"（未通过审核） or \"recycle\"(用户的回收站) or \"user_remove\" （user_remove是指用户永久删除或被管理删除的） matching_rec:<str>,可选，提供一段内容, 匹配一些文章推荐 time_range:<int>,可选,单位为天,比如最近7天的文章 page:<int>,第几页，默认第1页 pre:<int>, 每页查询多少条 keyword:<str>, Search keywords, 搜索使用 fields:<array>, 需要返回的文章字段,如[\"title\"] unwanted_fields:<array>, 不能和fields参数同时使用,不需要返回的文章字段,如[\"user_id\"] user_id:<str>, 如需获取指定用户的post时需要此参数 category_id:<str>, 获取指定文集的post时需要此参数 Post Api :/api/post Methods :PUT Permission :unlimited Login auth :Yes Request and parameters: PUT: 喜欢文章 action:<str>, 可以是like(点赞文章) id:<str>, post id ***## Api文档说明 User-post Api :/api/user/post Methods :POST, PUT, PATCH, DELETE Permission :USER Login auth :Yes Request and parameters: POST: 内容发布 title:<str>, 标题 content:<str>, 内容(比如:富文本的html内容),将会保存到数据库中 conetent_text:<str>, 纯文本内容 editor:<str>, 使用的编辑器类型, \"markdown\" or \"rich_text\" tags:<array>, 标签 category:<str>, post category id. post分类 cover_url:<str>,文章封面图url,默认为空 issue_way:<str>, 可选'issue' or 'save'.　发布或者保存为草稿 PUT or PATCH: 1.内容修改 id:<str>, 编辑已有的文章需要传入id, 新建文章不需要 title:<str>, 标题 content:<str>, 内容(比如:富文本的html内容),将会保存到数据库中 conetent_text:<str>, 纯文本内容 editor:<str>, 使用的编辑器类型, \"markdown\" or \"rich_text\" tags:<array>, 标签 category:<str>, post category id. post分类 issue_way:<str>, 可选'issue' or 'save'.　发布或者保存为草稿 2.恢复回收站的post op:<str>, restore ids:<array>, posts id DELETE: 删除post ids:<array>, posts id recycle:<int>,1 or 0,　1：则移入回收站, 0: 则直接标记为永久删除, 管理员才可见 Admin-post Api :/api/admin/post Methods :GET, POST, PUT, PATCH, DELETE Permission :AUDIT Login auth :Yes Request and parameters: GET: 1. 根据条件获取文章 sort:<array>,排序, 1表示升序, -1表示降序.如: 按时间降序 [{\"issue_time\":-1},{\"update_time\",-1}] 按时间升序 [{\"issue_time\", 1},{\"update_time\",1}] 先后按赞(like)数降序, 评论数降序,pv降序, 发布时间降序 [{\"like\", -1}, {\"comment_num\", -1}, {\"pv\", -1},{\"issue_time\", -1}]; 默认时按时间降序, 也可以用其他字段排序 page:<int>,第几页，默认第1页 pre:<int>, 每页查询多少条 status:<int> , \"is_issued\"（正常发布） or \"draft\"（草稿） or \"not_audit\"（等待审核） or \"unqualified\"（未通过审核） or \"recycle\"(用户的回收站) or \"user_remove\" （user_remove是指用户永久删除或被管理删除的） keyword:<str>, Search keywords, 搜索的时候使用 fields:<array>, 需要返回的文章字段,如[\"title\"] unwanted_fields:<array>, 不能和fields参数同时使用,不需要返回的文章字段,如[\"content\"] :return: 2.获取一篇文章 post_id:<str>,post id status:<str>,状态, 可以是\"is_issued\" or \"draft\" or \"not_audit\" or \"unqualified\" or \"recycle\" PATCH or PUT: 1.人工审核post op:<str>, 为\"audit\" ids:<str>, posts id score:<int>, 0-10分 2.恢复post, 只能恢复管理员移入待删除的文章is_delete为3的post op:<str>, 为\"restore\" ids:<array>, posts id DELETE: 删除post ids:<array>, posts id pending_delete:<int>, 1: 标记is_delete为3, 对于post属于的用户永久删除, 0:从数据库删除数据 :return: ***## Api文档说明 Search Api :/api/search Methods :GET Permission :unlimited Login auth : Request and parameters: GET: 搜索(暂不支持全文搜索), 只能搜索文章, 用户 keyword:<str>, Search keywords target:<str>, 可选\"post\" 或 \"user\". 不使用此参数则搜索所有可选目标 page:<int>,第几页，默认第1页 pre:<int>, 每页多少条 Admin-static-file Api :/api/admin/static/file Methods :GET, POST, PUT, DELETE Permission :SYS_SETTING Login auth :Yes Request and parameters: GET: 1.获取静态文件内容 file_path:<str>,静态文件所在目录 filename:<str>,文件名 2.获取静态文件名列表 page:<int>, 第几页, 默认1 pre:<int>, 第几页, 默认15 keyword:<str>,关键词搜索用 type:<str>, \"all\" or \"default\" or \"custom\" PUT: 编辑静态文件内容 file_path:<str>,静态文件所在目录 filename:<str>,文件名 content:<str>, 内容 ***## Api文档说明 Admin-theme-page Api :/api/admin/theme/page Methods :GET, POST, PUT, DELETE Permission :SYS_SETTING Login auth :Yes Request and parameters: POST: 添加页面 routing:<str>,路由 content:<str>, 内容 DELETE: 删除自己添加的页面 file_path:<str>,页面html文件所在目录 filename:<str>,页面html文件名 Admin-theme Api :/api/admin/theme Methods :GET, POST, PUT, DELETE Permission :SYS_SETTING Login auth :Yes Request and parameters: 主题管理 GET: 获取当前所有主题 POST: 主题安装 upfile:<file>, 上传的主题文件 PUT: 切换主题 theme_name:<str>, 主题名称 DELETE: 删除主题 theme_name:<str>, 主题名称 :return:"}, {"location": "api/api_doc/#api", "title": "Api文档说明", "text": ""}, {"location": "api/api_doc/#account-data-availability", "title": "Account-data-availability", "text": "Api :/api/account/data/availability Methods :GET Permission :unlimited Login auth :Yes Request and parameters: GET: 查看用户名，email,个性域是否可以使用 field:<str>, username or email or custom_domain vaule:<str> :return:"}, {"location": "api/api_doc/#account-self", "title": "Account-self", "text": "Api :/api/account/self Methods :GET Permission :unlimited Login auth :Yes Request and parameters: GET: 提供一个user id, 获取是否时当前登录用户 user_id:<str> :return:"}, {"location": "api/api_doc/#admin-role-permission", "title": "Admin-role-permission", "text": "Api :/api/admin/role/permission Methods :GET Permission :USER_MANAGE Login auth :Yes Request and parameters: GET: 获取所有的权限表 :return:"}, {"location": "api/api_doc/#admin-role", "title": "Admin-role", "text": "Api :/api/admin/role Methods :GET, POST, PUT, DELETE Permission :USER_MANAGE Login auth :Yes Request and parameters: GET: 1. 获取指定ID的角色 id:<str> ,role id 2.分页获取全部角色 page:<int>,第几页，默认第1页 pre:<int>, 每页查询多少条 POST: 添加一个角色 name:<str> instructions:<str> default:<int or bool>, 0 or 1 permissions:<array>, 数组，可以给角色指定多个权重, 如[1, 2, 4, 128] PUT: 修改一个角色 id:<str>, role id name:<str> instructions:<str> default:<int>, 0 or 1 permissions:<array>, 数组，可以给角色指定多个权重, 如[1, 2, 4, 128] DELETE: 删除角色 ids:<arry>, role ids"}, {"location": "api/api_doc/#account-password-reset", "title": "Account-password-reset", "text": "Api :/api/account/password/reset Methods :PUT Permission :USER Login auth :Yes Request and parameters: PUT: 账户密码重设 now_password:<str>,目前使用的密码 password:<str>, 新密码 password2:<str>, 再次确认新密码 :return:"}, {"location": "api/api_doc/#account-password-retrieve", "title": "Account-password-retrieve", "text": "Api :/api/account/password/retrieve Methods :PUT, POST Permission :unlimited Login auth :Yes Request and parameters: PUT: 忘记密码,重设 获取验证码,只需要传回参数email,return回一个{code:{'_id':'', str:'',time:'' }} 设置新密码,需要全部参数 email_code:<str>, 邮件中收到的验证码 email:<str>, 邮箱 password:<str>, 新密码 password2:<str>, 再次确认密码 :return: ***## Api文档说明"}, {"location": "api/api_doc/#admin-user", "title": "Admin-user", "text": "Api :/api/admin/user Methods :GET, PUT, DELETE Permission :USER_MANAGE Login auth :Yes Request and parameters: GET: 1. 获取指定ID的用户基本信息 id:<str> , user id 2.分页获取所有用户 status:<str>,用户状态，\"normal\"　or \"inactive\" or \"cancelled\" page:<int>,第几页，默认第1页 pre:<int>, 每页查询多少条 keyword:<str>, Search keywords, 搜索的时候使用 PUT: 1.编辑用户 id:<str>, user id role_id:<str>, role id active:<int>, 0 or 1 2.激活或冻结用户 op:<str>, 为\"activation\" active:<int>, 0 or 1, 0为冻结, 1为激活 ids:<array> 3.恢复用户,将状态改为未删除 op:<str>, 为\"restore\" ids:<array> DELETE: 删除用户,非数据库删除 ids:<array>"}, {"location": "api/api_doc/#admin-user-del", "title": "Admin-user-del", "text": "Api :/api/admin/user/del Methods :DELETE Permission :IMPORTANT_DATA_DEL Login auth :Yes Request and parameters: DELETE: 永久删除用户,数据库中删除 ids:<array> permanent:<int> 0 or 1, 0:非数据库删除,只是把状态改成\"删除状态\",为1:表示永久删除,"}, {"location": "api/api_doc/#account-upload-avatar", "title": "Account-upload-avatar", "text": "Api :/api/account/upload/avatar Methods :PUT Permission :USER Login auth :Yes Request and parameters: PUT 头像上传 注意:虽然服务的提供图片裁剪功能，由于耗费服务器资源,非必要情况下请不要使用，请再客户端裁剪好再上传. 为了防止恶意使用裁剪功能，可以在管理端中设置(upload)中关闭上传文件裁剪功能 *提供2种上传方式* 1.以常规文件格式上传 upfile:<img file>，头像文件 preview_w:<int>, 图片预览宽度 tailoring:<dict>, (裁剪功能开启后才能使用),裁剪尺寸，格式:{x:12, y:12, height:100, width:100, rotate:0} x和ｙ为裁剪位置，x距离左边距离, y距离上边距离, width截图框的宽，　height截图框的高 2.以base64编码上传 imgfile_base:<str>,以base64编码上传文件 :return:"}, {"location": "api/api_doc/#sign-up", "title": "Sign-up", "text": "Api :/api/sign-up Methods :POST Permission :unlimited Login auth : Request and parameters: POST: 1.普通用户使用邮箱注册a emial:<emial>, 邮箱 username: <str>, 用户名 password: <str>,密码 password2: <str>,再次确认密码 code:<str>, 邮箱收取到的code 2.普通用户使用手机注册a mobile_phone_number:<int>手机号码 username: <str>, 用户名 password: <str>,密码 password2: <str>,再次确认密码 code:<str>, 手机收取到的code :return:"}, {"location": "api/api_doc/#sign-in", "title": "Sign-in", "text": "Api :/api/sign-in Methods :PUT Permission :unlimited Login auth : Request and parameters: PUT: 1.普通登录 username: <str>, 用户名或邮箱或手机号码 password: <str>,密码 remember_me:<bool>,是否保存密码 next:<str>, 登录后要返回的to url, 如果为空,则返回设置中的LOGIN_TO use_jwt_auth:<int>, 是否使用jwt验证. 0 或 1,默认为0不使用 当多次输入错误密码时，api会返回open_img_verif_code:true, 表示需要图片验证码验证,客户端应该请求验证码/api/vercode/image, 然后后再次提交登录时带下如下参数 再次提交登录时需要以下两个参数 code:<str>, 图片验证码中的字符 code_url_obj:<json>,图片验证码url 对象 :return: 2.第三方登录 待开发插件入口"}, {"location": "api/api_doc/#sign-in-third-party-callback", "title": "Sign-in-third-party--callback", "text": "Api :/api/sign-in/third-party/ /callback Methods :GET, PUT, POST Permission :unlimited Login auth : Request and parameters: PUT & POST & GET: 第三方平台授权登录回调 platform: 平台名称：可以是wechat, qq, github, sina_weibo, alipay, facebook, twitter等 可在sys_config.py文件中配置LOGIN_PLATFORM :return:"}, {"location": "api/api_doc/#sign-out", "title": "Sign-out", "text": "Api :/api/sign-out Methods :GET, PUT Permission :unlimited Login auth : Request and parameters: GET or PUT: 用户登出api use_jwt_auth:<int>, 是否使用jwt验证. 0 或 1,默认为0不使用. 如果是jwt验证登录信息的客户端use_jwt_auth应为1 :param adm: :return: ***## Api文档说明"}, {"location": "api/api_doc/#account-profile-public", "title": "Account-profile-public", "text": "Api :/api/account/profile/public Methods :GET Permission :unlimited Login auth : Request and parameters: GET: 获取用户公开信息 user_id:<str> is_basic:<int>, 0或1,默认1. 为１时只获取最基本的用户信息 :return:"}, {"location": "api/api_doc/#account-basic", "title": "Account-basic", "text": "Api :/api/account/basic Methods :PUT Permission :USER Login auth :Yes Request and parameters: 用户基础设置 PUT: 编辑用户基础设置 username:<str>, 新的用户名 custom_domain:<str>, 个性域名 editor:<str>, 'rich_text' or 'markdown' 如果你有多个文本编辑器的话，可以加入这个选项 :return:"}, {"location": "api/api_doc/#account-profile", "title": "Account-profile", "text": "Api :/api/account/profile Methods :GET, PUT Permission :USER Login auth :Yes Request and parameters: 用户资料 GET: 获取当前登录用户的信息 is_basic:<int>, 0或1,默认1. 为１时只获取最基本的用户信息 PUT 更新用户资料 gender:<str>, m or f or secret birthday:<int or str>, The format must be \"YYYYMMDD\" ,such as: 20170101 address:<dict>, The format must be: {countries:'string', provinces:'string', city:'string', district:'string', detailed:'string'} info:<str> :return:"}, {"location": "api/api_doc/#account-email", "title": "Account-email", "text": "Api :/api/account/email Methods :PUT Permission :USER Login auth :Yes Request and parameters: PUT 账户邮件修改 email:<email>, 要绑定的新邮箱 new_email_code:<str>, 新邮箱收取到的验证码,用于保证绑定的邮箱时用户自己的 current_email_code:<str>, 当前邮箱收取的验证码,用于保证邮箱修改是用户自己发起 password:<str>, 账户的登录密码 :return: ***## Api文档说明"}, {"location": "api/api_doc/#admin-message-send", "title": "Admin-message-send", "text": "Api :/api/admin/message/send Methods :POST Permission :EDITOR Login auth :Yes Request and parameters: POST 发送消息 title:<title>,标题 content:<str>,正文 content_html:<str>,正文html send_type:<array>,发送类型on_site, email, sms . 如:[\"email\"], 也可以同时发送多个个[\"email\", \"on_site\"] username:<array>, 接收信息的用户名, 如[\"test\", \"test2\"] :return:"}, {"location": "api/api_doc/#admin-message-on-site", "title": "Admin-message-on-site", "text": "Api :/api/admin/message/on-site Methods :GET, PUT, DELETE Permission :EDITOR Login auth :Yes Request and parameters: GET: 获取用户消息 is_sys_msg:<int>,获取系统消息? 1表示是, 0表示否 pre:<int>,每页获取几条数据,默认10 page:<int>,第几页,默认1 type:<array>,消息类型, 比如[\"notice\", \"comment\", \"audit\"] DELETE: 删除消息(此接口只能删除由系统发出的消息user_id==0的) ids:<array>,消息id :return:"}, {"location": "api/api_doc/#admin-message-sms", "title": "Admin-message-sms", "text": "Api :/api/admin/message/sms Methods :GET, DELETE Permission :EDITOR Login auth :Yes Request and parameters: GET: 获取系统发送出去的邮件或短信记录 status:<str>, 状态, normal, abnormal, error pre:<int>,每页获取几条数据,默认10 page:<int>,第几页,默认1 DELETE: 删除消息(此接口只能删除由系统发出的消息user_id==0的) ids:<array>,消息id :return: ***## Api文档说明"}, {"location": "api/api_doc/#user-message", "title": "User-message", "text": "Api :/api/user/message Methods :GET, PUT, DELETE Permission :unlimited Login auth :Yes Request and parameters: GET: 获取用户的消息 type:<array>,消息类型, 比如[\"notice\", \"private_letter\"] label:<array>, 消息label, 默认全部label, 比如['comment', 'audit_failure', 'sys_notice'] pre:<int>,每页获取几条数据,默认10 page:<int>,第几页,默认1 status_update:<str>,获取后的消息状态更新. 可以为: \"have_read\" PUT: 更新消息状态 ids:<array>,消息id status_update:<str>,获取后的消息状态更新. 可以为: \"have_read\" DELETE: 删除消息 ids:<array>,消息id :return:"}, {"location": "api/api_doc/#global", "title": "Global", "text": "Api :/api/global Methods :GET Permission :unlimited Login auth : Request and parameters: GET: 获取当前全局数据,包括站点的公开设置, 当前登录用户的基本可公开信息 :return:"}, {"location": "api/api_doc/#global-media", "title": "Global-media", "text": "Api :/api/global/media Methods :GET Permission :unlimited Login auth : Request and parameters: GET: 1.获取指定的多媒体数据 conditions:<array:dict>, Such as:[{'type':<str>, 'names':<array>, 'name_regex':''}] 说明: type-可以是\"text\", \"image\", \"video\", \"audio\" names-数组,指定要获取数据的name name_regex-字符串,获取匹配此正则的media,如果为空值，则不使用正则匹配(空置包括null, None,False, \"\") 注意:name 与name_regex不能同时使用,当name_regex非空时，查询自动忽略names 使用示例：前提在管理端多媒体中存在的内容 如:首页轮播图片和获取”关于我们“页面的文字内容 [ {\"type\":\"image\", \"names\":[\"home-carousel-1\", \"home_carousel-2\"]}, {\"type\":\"text\", \"names\":[\"about-me\"]}, {\"type\":\"image\", \"name_regex\":\"test-[0-9]+\"} ] 2.获取指定category的多媒体 category_name:<array> category name, 可同时指定多个category name, 使用数组 category_user_id:<str>, 为空则表示获取站点官方的多媒体 category_type:<str>, 可选\"text\", \"image\", \"video\", \"audio\" page:<int>, 第几页, 默认1 pre:<int>, 每页几条数据, 默认8 3.根据id 获取 media_id:<str> :return: ***## Api文档说明"}, {"location": "api/api_doc/#admin-audit-rule-key", "title": "Admin-audit-rule-key", "text": "Api :/api/admin/audit/rule/key Methods :GET Permission :WEB_SETTING Login auth :Yes Request and parameters: GET: 获取审核规则的所有key与说明, 也就config设置中的audit :return:"}, {"location": "api/api_doc/#admin-audit-rule", "title": "Admin-audit-rule", "text": "Api :/api/admin/audit/rule Methods :GET, POST, PUT, PATCH, DELETE Permission :WEB_SETTING Login auth :Yes Request and parameters: GET: 1. 获取所有验证规则 project:<str>, \"username\", \"post_category\", keyword:<str>,不能使用的关键词,支持正则 page:<int>, 第几页, 默认1 pre:<int>, 每页返回pre条数据，默认10 :return: POST: 添加验证规则 project:<str>, \"username\", \"post_category\" rule:<str> :return: DELETE: 删除规则 ids:<array>, rule ids :return: ***## Api文档说明"}, {"location": "api/api_doc/#admin-setting-sys-log", "title": "Admin-setting-sys-log", "text": "Api :/api/admin/setting/sys/log Methods :GET Permission :SYS_SETTING Login auth :Yes Request and parameters: GET: 获取文件日志 name:<str>,日志名称 ip:<str>,要获取哪个主机的日志 page:<int> :return:"}, {"location": "api/api_doc/#session-language-set", "title": "Session-language-set", "text": "Api :/api/session/language-set Methods :PUT Permission :unlimited Login auth : Request and parameters: PUT : 修改当前语言 language:<str>, 如en_US, zh_CN :return:"}, {"location": "api/api_doc/#admin-setting-sys-host", "title": "Admin-setting-sys-host", "text": "Api :/api/admin/setting/sys/host Methods :GET, POST, PUT, DELETE Permission :SYS_SETTING Login auth :Yes Request and parameters: GET: 获取主机的信息 ip:<str>,要获取哪个主机的日志 :return: PUT: 设置主机连接信息与重启命令 username:<str>,主机用户名 password:<str>,主机密码 host_ip:<str>,要获取哪个主机的日志 host_port:<int>,主机端口 cmd:<str>, 命令, 注释使用#"}, {"location": "api/api_doc/#admin-setting-sys-host-cmd-execute", "title": "Admin-setting-sys-host-cmd-execute", "text": "Api :/api/admin/setting/sys/host/cmd-execute Methods :PUT Permission :SYS_SETTING Login auth :Yes Request and parameters: PUT: 命令执行 host_ip:<str> cmd:<str>, 要执行的Linux 命令,如果没有则自动执行主机保存的常用命令 :return:"}, {"location": "api/api_doc/#admin-setting-sys-host-connection-test", "title": "Admin-setting-sys-host-connection-test", "text": "Api :/api/admin/setting/sys/host/connection-test Methods :PUT Permission :SYS_SETTING Login auth :Yes Request and parameters: PUT: 服务器连接测试 host_ip:<str> :return: ***## Api文档说明"}, {"location": "api/api_doc/#admin-setting-sys-config-version", "title": "Admin-setting-sys-config-version", "text": "Api :/api/admin/setting/sys/config/version Methods :GET, PUT Permission :SYS_SETTING Login auth :Yes Request and parameters: GET: 获取所有的系统配置版本, 和网站服务器主机 PUT: 切换单个节点网站的配置版本 switch_version:<str>, 需要切换的版本号 diable_update:<int> , 0 or 1 host_ip:<str>, 主机ip :return:"}, {"location": "api/api_doc/#admin-setting-sys-config", "title": "Admin-setting-sys-config", "text": "Api :/api/admin/setting/sys/config Methods :GET, PUT Permission :SYS_SETTING Login auth :Yes Request and parameters: GET: 根据project获取当前最新配置(特殊配置将不会返回,如不允许再页面编辑的,即那些不带有\"__restart__\"key的) project:<array>, 能同时获取多个project的数据.不使用此参数则表示获取全部配置 keyword:<str>, 搜索匹配关键字的结构 only_project_field:<int>, 只需要project字段. 0 or 1.默认为0 PUT: key:<str>, 要设置的配制参数的key project:<str>, 项目,比如这个key是comment下的，则project为comment value:<str or int or bool or list or dict or tuple>, key对应的值 info:<str>, 说明 :return:"}, {"location": "api/api_doc/#token-access-token", "title": "Token-access-token", "text": "Api :/api/token/access-token Methods :GET Permission :unlimited Login auth : Request and parameters: GET: 客户端获取/刷新AccessToken (必须使用SecretToken验证通过) 如果请求头中带有ClientId 则使用客户端提供的ClientId, 否则创建新的ClientId :return:"}, {"location": "api/api_doc/#admin-token-secret-token", "title": "Admin-token-secret-token", "text": "Api :/api/admin/token/secret-token Methods :GET, POST, PUT, DELETE Permission :ROOT Login auth :Yes Request and parameters: 客户端访问使用的secret token管理 GET: 获取所有secret token POST: 创建一个secret token PUT: 激活或禁用一个id token_id:<id>,token id action:<str>,如果为\"activate\"则激活token, 为\"disable\"禁用token DELETE: 删除一个token token_id:<id>,token id :return: ***## Api文档说明"}, {"location": "api/api_doc/#admin-url-permission", "title": "Admin-url-permission", "text": "Api :/api/admin/url/permission Methods :GET, POST, PUT, DELETE Permission :ROOT Login auth :Yes Request and parameters: GET: 获取系统的web url type:<array>,类型, 可选api, static, page pre:<int>,每页获取几条数据,默认10 page:<int>,第几页,默认1 keyword:<str>,搜索关键字 POST: 添加页面路由 url:<str>, 只用于添加页面路由 PUT: 更新权限 id:<str>,id method:<str> custom_permission:<array>, 如[1, 512, 128] login_auth:<int>, 0 或　１, 是否需要登录验证(如果原代码路由中未指定需要登录请求, 则按照此配置) DELETE: 删除手动添加的页面路由 ids:<array> :return: ***## Api文档说明"}, {"location": "api/api_doc/#upload-file", "title": "Upload-file", "text": "Api :/api/upload/file Methods :POST Permission :USER Login auth :Yes Request and parameters: POST 文件上传 api返回json数据,格式默认如下: {'urls':[<url>, ...,<url>], 'state':<'success' or 'error'>, 'msg_type':<'s' or e'>, 'msg':'' } return_url_key: <str>, 自定义返回数据的urls的key, 默认'urls' return_state_key:<str>, 自定义返回数据的状态的key, 默认'state' return_success:<str or int>, 自定义返回数据成功的状态的值, 默认'success' return_error:<str or int>, 自定义返回数据错误的状态的值, 默认'error' prefix:<str>, 默认为“generic/”, 则会将文件放入到generic目录下 save_temporary_url：<0 or 1>,默认为1, 如果 :return:"}, {"location": "api/api_doc/#admin-upload-media-file", "title": "Admin-upload-media-file", "text": "Api :/api/admin/upload/media-file Methods :GET, POST, PUT, DELETE Permission :EDITOR Login auth :Yes Request and parameters: GET 1.获取多个多媒体信息 file_type:<str>, 文件类型,可选\"image\", \"video\", \"audio\", \"other\" category_id:<str>, 分类id, 获取默认分类使用\"default\"作为category_id, 不传入此参数则表示获取全部 keyword:<str>,搜索用 page:<int>, 第几页, 默认1 pre:<int>, 每页几条数据, 默认12 sort:<array>,排序, 1表示升序, -1表示降序.如: 按时间降序 [{\"time\":-1}] 按时间升序 [{\"time\", 1}] 默认时按时间降序, 也可以用其他字段排序 2.获取1个信息 id:<str>,id POST 添加媒体 name:<str>, 名字 link:<str>, 链接, 用于展示的时候跳转链接 link_name:<str>,链接名字 link_open_new_tab:<str>,链接是否打开新标签 title:<str>, 展示的标题 name:<str>, 展示时需要显示的文字 text:<str> text_html:<str>, text的html格式(富文本) type:<str>, 文件类型,可选\"image\", \"video\", \"audio\", \"text\",\"other\" category_id:<str>, 分类id **如果需要上传文件,还需要一下参数: batch:<int>, 0 or 1, default:0, 为1表示批量上传. return_url_key: <str>, 自定义返回数据的urls的key, 默认'urls' return_state_key:<str>, 自定义返回数据的状态的key, 默认'state' return_success:<str or int>, 自定义返回数据成功的状态的值, 默认'success' return_error:<str or int>, 自定义返回数据错误的状态的值, 默认'error' **注意: 如果后台获取有文件上传，则表示只上传文件 上传文件返回数据格式默认如下: {'urls':[<url>, ...,<url>], 'state':<'success' or 'error'>, 'msg_type':<'s' or e'>, 'msg':'' } PUT 编辑多媒体信息 id:<str>,要编辑的media id category_id:<str>,要编辑的文件的分类id, 如果不修改分类可以不提交 name:<str> link:<str>, 链接 link_name:<str>,链接名字 link_open_new_tab:<str>,链接是否打开新标签 title:<str> text:<str> text_html:<str>, text的html格式(富文本) **如果只更新文件(如图片),还需要一下参数: batch:<int>, 0 or 1, default:0, 为1表示批量上传. return_url_key: <str>, 自定义返回数据的urls的key, 默认'urls' return_state_key:<str>, 自定义返回数据的状态的key, 默认'state' return_success:<str or int>, 自定义返回数据成功的状态的值, 默认'success' return_error:<str or int>, 自定义返回数据错误的状态的值, 默认'error' **注意: 如果后台获取有文件上传，则表示只上传文件 上传文件返回数据格式默认如下: {'urls':[<url>, ...,<url>], 'state':<'success' or 'error'>, 'msg_type':<'s' or e'>, 'msg':'' } DELETE 删除多媒体文件 ids:<array>,要删除的文件的id :return: ***## Api文档说明"}, {"location": "api/api_doc/#user-follow", "title": "User-follow", "text": "Api :/api/user/follow Methods :GET Permission :unlimited Login auth : Request and parameters: GET: 获取用户关注的用户 user_id:<str>, 用户ID action:<str>,　为followed_user 获取当前的登录用户的粉丝 action:<str>,　为fans :return:"}, {"location": "api/api_doc/#user-follow_1", "title": "User-follow", "text": "Api :/api/user/follow Methods :POST, DELETE Permission :unlimited Login auth :Yes Request and parameters: POST: 当前登录用户关注另一个用户用户 ids:<array>,需关注用户的user id DELETE: 当前登录用户取消关注一个用户 ids:<array>,不再关注的用户的user id :return: ***## Api文档说明"}, {"location": "api/api_doc/#admin-comment-access", "title": "Admin-comment-access", "text": "Api :/api/admin/comment/access Methods :GET Permission :REPORT Login auth :Yes Request and parameters: GET: 获取comment数据统计 days:<int>"}, {"location": "api/api_doc/#admin-post-access", "title": "Admin-post-access", "text": "Api :/api/admin/post/access Methods :GET Permission :REPORT Login auth :Yes Request and parameters: GET: 获取post数据统计 days:<int>"}, {"location": "api/api_doc/#admin-report-basic", "title": "Admin-report-basic", "text": "Api :/api/admin/report/basic Methods :GET Permission :REPORT Login auth :Yes Request and parameters: GET: 获取网站的最基本报表数据 project:<array>,默认全部,可以是post, comment, user, message, plugin, media, inform ***## Api文档说明"}, {"location": "api/api_doc/#content-category-info", "title": "Content-category-info", "text": "Api :/api/content/category/info Methods :GET Permission :unlimited Login auth : Request and parameters: 获取指定category id的category信息 :return:"}, {"location": "api/api_doc/#content-category", "title": "Content-category", "text": "Api :/api/content/category Methods :GET, POST, PUT, DELETE Permission :unlimited Login auth :Yes Request and parameters: GET: action:<str>, 可以为get_category, get_category_type, 默认get_category 1.获取当前用户指定的type的所有category action:<str>, 为get_category type:<str>, 你设置的那几个类别中的类别,在config.py文件中category, 可在网站管理端设置的 2. 获取所有的type: config.py文件中category的所有CATEGORY TYPE action:<str>, 为get_category_type 解释: 在分类中(category)又分为几种类型(type) 如: type为post有几个category POST: 添加文集 name:<str> type:<str>, 只能是你设置的那几个类别,在config.py文件中category, 或者网站管理设置 PUT: 修改文集 id:<str>, post category id name:<str> DELETE: 删除文集名称 ids:<array>, post category ids"}, {"location": "api/api_doc/#admin-content-category", "title": "Admin-content-category", "text": "Api :/api/admin/content/category Methods :GET, POST, PUT, DELETE Permission :EDITOR Login auth :Yes Request and parameters: Admin管理端category管理 GET: 1.获取指定的type的所有分类 type:<str>, 你设置的那几个类别中的类别,在config.py文件中category, 或者网站管理设置 2.获取所有的type get_type:<int>, get_type为1 POST: 添加文集 name:<str> type:<str>, 只能是你设置的那几个类别,在config.py文件中category, 或者网站管理设置 PUT: 修改文集 id:<str>, post category id name:<str> DELETE: 删除文集名称 ids:<array>, post category ids ***## Api文档说明"}, {"location": "api/api_doc/#admin-plugin", "title": "Admin-plugin", "text": "Api :/api/admin/plugin Methods :GET, POST, PUT, DELETE Permission :SYS_SETTING Login auth :Yes Request and parameters: 插件管理 GET: 获取所有插件 page:<int>,第几页, 默认1 pre:<int>,每页个数, 默认10 keyword:<str>, 搜索用 POST: 插件安装 upfile:<file>,上传的插件压缩包 PUT: 操作插件 action:<str>, start:激活插件 stop:停用插件 name:<str>, 插件名称 :return:"}, {"location": "api/api_doc/#admin-plugin-setting", "title": "Admin-plugin-setting", "text": "Api :/api/admin/plugin/setting Methods :GET, POST, PUT Permission :SYS_SETTING Login auth :Yes Request and parameters: 插件设置 GET: 获取插件设置 plugin_name:<str>, 插件名 POST: 刷新当前插件配置(当插件配置代码被修改后,如果未重新激活，系统保存的配置是不会更新的，所有可以使用此方法刷新) plugin_name:<str>, 插件名 PUT: 修改设置 plugin_name:<str>, 插件名 key:<str>,KEY value:<可多种类型的数据>, 值 :return:"}, {"location": "api/api_doc/#admin-plugin-setting-install-requirement", "title": "Admin-plugin-setting-install-requirement", "text": "Api :/api/admin/plugin/setting/install-requirement Methods :PUT Permission :SYS_SETTING Login auth :Yes Request and parameters: 插件需求包安装 PUT: 插件需求包安装 plugin_name:<str>, 插件名 :return: ***## Api文档说明"}, {"location": "api/api_doc/#admin-comment", "title": "Admin-comment", "text": "Api :/api/admin/comment Methods :GET, POST, PUT, PATCH, DELETE Permission :AUDIT Login auth :Yes Request and parameters: GET: 获取评论 status:<str>,\"is_issued\"（正常发布） or \"not_audit\"（等待审核） or \"unqualified\"（未通过审核） or \"user_remove\"(用户删除的) keyword:<str>,搜索关键字 sort:<array>,排序, 1表示升序, -1表示降序.如: 按时间降序 [{\"issue_time\":-1}] 按时间升序 [{\"issue_time\": 1}] 先后按赞(like)数降序, 评论数降序,pv降序, 发布时间降序 [{\"like\": -1},{\"issue_time\": -1}] 默认时按时间降序, 也可以用其他字段排序 page:<int>,第几页，默认第1页 pre:<int>, 每页查询多少条, 默认是config.py配制文件中配制的数量 :return: PATCH or PUT: 1.人工审核comment, 带上参数score op:<str>, \"audit\" ids:<array>, comment id score:<int>, 0-10分 2.恢复comment, 只能恢复管理员移入待删除的comment, is_delete为2的comment op:<str>, \"restore\" ids:<array>, comment id DELETE: 删除comment ids:<array>, comment id pending_delete:<int>, 1: is_delete为2, 标记为永久删除, 0:从数据库删除数据 :return:"}, {"location": "api/api_doc/#comment", "title": "Comment", "text": "Api :/api/comment Methods :GET Permission :unlimited Login auth : Request and parameters: GET: 获取文章的评论 target_id:<str>, 目标id,比如文章post id target_type:<str>, 目标类型,比如文章就是\"post\" status:<str>,\"is_issued\"（正常发布） or \"not_audit\"（等待审核） or \"unqualified\"（未通过审核） or \"user_remove\"(用户删除的) sort:<array>,排序, 1表示升序, -1表示降序.如: 按时间降序 [{\"issue_time\":-1}] 按时间升序 [{\"issue_time\": 1}] 先后按赞(like)数降序, 评论数降序,pv降序, 发布时间降序 [{\"like\": -1},{\"issue_time\": -1}] 默认时按时间降序, 也可以用其他字段排序 page:<int>,第几页，默认第1页 pre:<int>, 每页查询多少条, 默认是config.py配制文件中配制的数量 :return:"}, {"location": "api/api_doc/#comment_1", "title": "Comment", "text": "Api :/api/comment Methods :POST, PUT, PATCH, DELETE Permission :unlimited Login auth :Yes Request and parameters: POST: 评论发布 target_id:<str>, 目标id,比如文章post id target_type:<str>, 目标类型,比如文章就是\"post\" reply_id:<str>, 被回复的comment id. 如果是回复评论中的评论,如:在评论a下面有一个评论a1，我需要回复a1, 这个时候需要提供的reply_id依然是a评论的，　而不是a1的 reply_user_id:<str>, 被回复的comment 的用户的user id， 如果是回复评论中的评论,如:在评论a下面有一个评论a1，我需要回复a1, 这个时候需要提供的reply_user_id是a１评论的 reply_username:<str>, 被回复的comment 的用户的username， 如果是回复评论中的评论,如:在评论a下面有一个评论a1，我需要回复a1, 这个时候需要提供的reply_username是a１评论的 content:<str>, 内容(比如:富文本的html内容),将会保存到数据库中 如果是游客评论,则需要以下两个参数(需要再后台配置中开启游客评论开关): username:<str>, 游客昵称 email:<str>,游客邮箱 :return: DELETE: 评论删除 ids:<array>, comment ids"}, {"location": "api/api_doc/#comment-like", "title": "Comment-like", "text": "Api :/api/comment/like Methods :PUT Permission :unlimited Login auth :Yes Request and parameters: PUT: 给评论点赞 id:<str> :return: ***## Api文档说明"}, {"location": "api/api_doc/#inform-content", "title": "Inform-content", "text": "Api :/api/inform/content Methods :PUT Permission :unlimited Login auth : Request and parameters: PUT: 内容违规举报 ctype:<str>, 内容的类型可选:post(文章), comment(评论), media(多媒体), user(用户) cid:<str>, 内容的id category:<str>, 举报内容违规类型, 可选: ad, junk_info, plagiarize, other details：<str>, 违规详情(选填) ***## Api文档说明"}, {"location": "api/api_doc/#vercode-send", "title": "Vercode-send", "text": "Api :/api/vercode/send Methods :POST Permission :unlimited Login auth : Request and parameters: POST: 手机或邮箱验证码发送 account_type:<str>, \"email\" or \"mobile_phone\" account:<email or number>, 接收验证码的账户 exist_account:<int>, 是否只能发送给用该邮箱/号码在本平台已注册的用户? 1为是, 0为否. 默认0 如果1分钟内,同一IP,同一用户(未登录的同属一匿名用户) 调用api超过MAX_NUM_SEND_SAMEIP_PERMIN_NO_IMGCODE(1分钟内无图片验证码最大调用次数)配置的次数, 超过后API会生会返回open_img_verif_code:true, 表示需要图片验证码验证,客户端应该请求验证码/api/vercode/image, 再次提交登录时需要以下两个参数 code:<str>, 图片验证码中的字符 code_url_obj:<json>, 图片验证码url 对象 注意:如果你并不想使用图片验证码来防止频繁调用,请在管理的设置MAX_NUM_SEND_SAMEIP_PERMIN_NO_IMGCODE的值大于 MAX_NUM_SEND_SAMEIP_PERMIN :return:"}, {"location": "api/api_doc/#vercode-image", "title": "Vercode-image", "text": "Api :/api/vercode/image Methods :GET Permission :unlimited Login auth : Request and parameters: GET: 获取图片验证码 :return: 验证码path object"}, {"location": "api/api_doc/#post", "title": "Post", "text": "Api :/api/post Methods :GET Permission :unlimited Login auth : Request and parameters: GET: 1.获取一篇文章 post_id:<str>,post id 2.根据条件获取文章 sort:<array>,排序, 1表示升序, -1表示降序.如: 按时间降序 [{\"issue_time\":-1},{\"update_time\":-1}] 按时间升序 [{\"issue_time\": 1},{\"update_time\": 1}] 先后按赞(like)数降序, 评论数降序,pv降序, 发布时间降序 [{\"like\": -1}, {\"comment_num\": -1}, {\"pv\": -1},{\"issue_time\": -1}] 默认时按时间降序, 也可以用其他字段排序 status:<int> , \"is_issued\"（正常发布） or \"draft\"（草稿） or \"not_audit\"（等待审核） or \"unqualified\"（未通过审核） or \"recycle\"(用户的回收站) or \"user_remove\" （user_remove是指用户永久删除或被管理删除的） matching_rec:<str>,可选，提供一段内容, 匹配一些文章推荐 time_range:<int>,可选,单位为天,比如最近7天的文章 page:<int>,第几页，默认第1页 pre:<int>, 每页查询多少条 keyword:<str>, Search keywords, 搜索使用 fields:<array>, 需要返回的文章字段,如[\"title\"] unwanted_fields:<array>, 不能和fields参数同时使用,不需要返回的文章字段,如[\"user_id\"] user_id:<str>, 如需获取指定用户的post时需要此参数 category_id:<str>, 获取指定文集的post时需要此参数"}, {"location": "api/api_doc/#post_1", "title": "Post", "text": "Api :/api/post Methods :PUT Permission :unlimited Login auth :Yes Request and parameters: PUT: 喜欢文章 action:<str>, 可以是like(点赞文章) id:<str>, post id ***## Api文档说明"}, {"location": "api/api_doc/#user-post", "title": "User-post", "text": "Api :/api/user/post Methods :POST, PUT, PATCH, DELETE Permission :USER Login auth :Yes Request and parameters: POST: 内容发布 title:<str>, 标题 content:<str>, 内容(比如:富文本的html内容),将会保存到数据库中 conetent_text:<str>, 纯文本内容 editor:<str>, 使用的编辑器类型, \"markdown\" or \"rich_text\" tags:<array>, 标签 category:<str>, post category id. post分类 cover_url:<str>,文章封面图url,默认为空 issue_way:<str>, 可选'issue' or 'save'.　发布或者保存为草稿 PUT or PATCH: 1.内容修改 id:<str>, 编辑已有的文章需要传入id, 新建文章不需要 title:<str>, 标题 content:<str>, 内容(比如:富文本的html内容),将会保存到数据库中 conetent_text:<str>, 纯文本内容 editor:<str>, 使用的编辑器类型, \"markdown\" or \"rich_text\" tags:<array>, 标签 category:<str>, post category id. post分类 issue_way:<str>, 可选'issue' or 'save'.　发布或者保存为草稿 2.恢复回收站的post op:<str>, restore ids:<array>, posts id DELETE: 删除post ids:<array>, posts id recycle:<int>,1 or 0,　1：则移入回收站, 0: 则直接标记为永久删除, 管理员才可见"}, {"location": "api/api_doc/#admin-post", "title": "Admin-post", "text": "Api :/api/admin/post Methods :GET, POST, PUT, PATCH, DELETE Permission :AUDIT Login auth :Yes Request and parameters: GET: 1. 根据条件获取文章 sort:<array>,排序, 1表示升序, -1表示降序.如: 按时间降序 [{\"issue_time\":-1},{\"update_time\",-1}] 按时间升序 [{\"issue_time\", 1},{\"update_time\",1}] 先后按赞(like)数降序, 评论数降序,pv降序, 发布时间降序 [{\"like\", -1}, {\"comment_num\", -1}, {\"pv\", -1},{\"issue_time\", -1}]; 默认时按时间降序, 也可以用其他字段排序 page:<int>,第几页，默认第1页 pre:<int>, 每页查询多少条 status:<int> , \"is_issued\"（正常发布） or \"draft\"（草稿） or \"not_audit\"（等待审核） or \"unqualified\"（未通过审核） or \"recycle\"(用户的回收站) or \"user_remove\" （user_remove是指用户永久删除或被管理删除的） keyword:<str>, Search keywords, 搜索的时候使用 fields:<array>, 需要返回的文章字段,如[\"title\"] unwanted_fields:<array>, 不能和fields参数同时使用,不需要返回的文章字段,如[\"content\"] :return: 2.获取一篇文章 post_id:<str>,post id status:<str>,状态, 可以是\"is_issued\" or \"draft\" or \"not_audit\" or \"unqualified\" or \"recycle\" PATCH or PUT: 1.人工审核post op:<str>, 为\"audit\" ids:<str>, posts id score:<int>, 0-10分 2.恢复post, 只能恢复管理员移入待删除的文章is_delete为3的post op:<str>, 为\"restore\" ids:<array>, posts id DELETE: 删除post ids:<array>, posts id pending_delete:<int>, 1: 标记is_delete为3, 对于post属于的用户永久删除, 0:从数据库删除数据 :return: ***## Api文档说明"}, {"location": "api/api_doc/#search", "title": "Search", "text": "Api :/api/search Methods :GET Permission :unlimited Login auth : Request and parameters: GET: 搜索(暂不支持全文搜索), 只能搜索文章, 用户 keyword:<str>, Search keywords target:<str>, 可选\"post\" 或 \"user\". 不使用此参数则搜索所有可选目标 page:<int>,第几页，默认第1页 pre:<int>, 每页多少条"}, {"location": "api/api_doc/#admin-static-file", "title": "Admin-static-file", "text": "Api :/api/admin/static/file Methods :GET, POST, PUT, DELETE Permission :SYS_SETTING Login auth :Yes Request and parameters: GET: 1.获取静态文件内容 file_path:<str>,静态文件所在目录 filename:<str>,文件名 2.获取静态文件名列表 page:<int>, 第几页, 默认1 pre:<int>, 第几页, 默认15 keyword:<str>,关键词搜索用 type:<str>, \"all\" or \"default\" or \"custom\" PUT: 编辑静态文件内容 file_path:<str>,静态文件所在目录 filename:<str>,文件名 content:<str>, 内容 ***## Api文档说明"}, {"location": "api/api_doc/#admin-theme-page", "title": "Admin-theme-page", "text": "Api :/api/admin/theme/page Methods :GET, POST, PUT, DELETE Permission :SYS_SETTING Login auth :Yes Request and parameters: POST: 添加页面 routing:<str>,路由 content:<str>, 内容 DELETE: 删除自己添加的页面 file_path:<str>,页面html文件所在目录 filename:<str>,页面html文件名"}, {"location": "api/api_doc/#admin-theme", "title": "Admin-theme", "text": "Api :/api/admin/theme Methods :GET, POST, PUT, DELETE Permission :SYS_SETTING Login auth :Yes Request and parameters: 主题管理 GET: 获取当前所有主题 POST: 主题安装 upfile:<file>, 上传的主题文件 PUT: 切换主题 theme_name:<str>, 主题名称 DELETE: 删除主题 theme_name:<str>, 主题名称 :return:"}, {"location": "app/deploy/", "title": "Deploy", "text": "部署方式 Nginx+uwsgi 部署Python Web的方式有好多中, 这里只是举例其中一种方式, 使用 Nginx + uwsgi 部署. 查阅资料,认为uwsgi性能还不错 uwsgi安装与配置 安装 pip 安装uwsgi(如果有建有python虚拟环境的请先进入虚拟环境再安装) pip install uwsgi 配置 新建一个文件uwsgi.ini (建议在osroom根目录下)，写入如下配置: [uwsgi] # 使用uwsgi示范 # uwsgi 启动时所使用的地址与端口 socket = 127.0.0.1:6001 # 指向网站目录 chdir=/home/work/project/osroom # python 启动程序文件 wsgi-file = start.py # python 程序内用以启动的 application 变量名 callable = app master = true enable-threads = true # 启动的线程 processes = 4 vacuum = true die-on-term = true harakiri = 30 # 每一个工作进程都生成以后才加载应用程序 lazy = true disable-logging = true # 状态检测地址 stats = 127.0.0.1:9191 # pid pidfile = /tmp/osroom_uwsgi.pid 其他配置项可以参考uwsgi文档 启动网站 注意：启动前确认osroom的数据库是否已配置正确 启动命令 # 如果uwsgi装在python虚拟环境，要先进入虚拟环境,再用如下命令启动 uwsgi /home/work/project/osroom/uwsgi.ini （附加）方法2：如果uwsgi安装在python虚拟环境中，又不想进入虚拟环境，可以这样启动 # venv_osroom是我的虚拟环境目录 /home/work/project/venv_osroom/bin/uwsgi /home/work/project/osroom/uwsgi.ini - 启动成功后: 由于uwsgi.ini配置的端口是6001，所以不能通过其他端口访问网站，需要下面 配置Nginx转发到6001端口 ... uwsgi socket 0 bound to TCP address 127.0.0.1:6001 fd 3 Python version: 3.5.2 (default, Nov 23 2017, 16:37:01) [GCC 5.4.0 20160609] Python main interpreter initialized at 0x1b9bcd0 python threads support enabled ... *** Operational MODE: preforking *** *** uWSGI is running in multiple interpreter mode *** spawned uWSGI master process (pid: 22449) spawned uWSGI worker 1 (pid: 22450, cores: 1) spawned uWSGI worker 2 (pid: 22451, cores: 1) spawned uWSGI worker 3 (pid: 22452, cores: 1) spawned uWSGI worker 4 (pid: 22453, cores: 1) ... worker 1 buried after 1 seconds worker 2 buried after 1 seconds worker 3 buried after 1 seconds worker 4 buried after 1 seconds ... Nginx 安装与配置 安装 Ubuntu 14.04或Ubuntu 16.04使用apt-get直接安装如下： sudo apt-get install nginx 也可以使用wget下载，再安装，请自行Google查找教程哈 配置文件 创建一个nginx配置文件osroom-naginx.conf，文件配置如下(这里只是示范，Nginx有许多配置项可以自己查找教程): upstream osroom-web { # 转发到6001端口 server 127.0.0.1:6001; } server { # 监听80端端口 listen 80; server_name <你的域名>; gzip on; gzip_comp_level 5; gzip_types application/json text/plain application/javascript application/x-javascript text/javascript text/xml text/css; open_log_file_cache max=1000 inactive=20s valid=1m min_uses=2; access_log /var/log/nginx/manage.vhost.access.log; error_log /var/log/nginx/manage.vhost.error.log; location / { include uwsgi_params; # upstream 的那个名称 uwsgi_pass osroom-web; # python虚拟环境目录路径 uwsgi_param UWSGI:_PYHOME /home/work/project/venv_osroom; # 项目目录路径 uwsgi_param UWSGI_CHDIR /home/work/project/osroom-demo;; uwsgi_param UWSGI_SCRIPT start:app; } } 如果需要配置ssl请加上监听443端口，配置好证书，然后80端口301重定向到443 https请求, 如下: (不需配置SSL证书的请直接跳过此步骤) upstream osroom-web { # 转发到6001端口 server 127.0.0.1:6001; } server { # 监听443端端口 listen 443; server_name <你的域名>; ssl on; root html; index index.html index.htm; # ssl证书文件 ssl_certificate /home/work/project/15212232323.pem; ssl_certificate_key /home/work/project/15212232323.key; ssl_session_timeout 5m; ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4; ssl_protocols TLSv1 TLSv1.1 TLSv1.2; ssl_prefer_server_ciphers on; gzip on; gzip_comp_level 5; gzip_types application/json text/plain application/javascript application/x-javascript text/javascript text/xml text/css; open_log_file_cache max=1000 inactive=20s valid=1m min_uses=2; access_log /var/log/nginx/manage.vhost.access.log; error_log /var/log/nginx/manage.vhost.error.log; location / { include uwsgi_params; # upstream 的那个名称 uwsgi_pass osroom-web; # python虚拟环境目录路径 uwsgi_param UWSGI:_PYHOME /home/work/project/venv_osroom; # 项目目录路径 uwsgi_param UWSGI_CHDIR /home/work/project/osroom-demo;; uwsgi_param UWSGI_SCRIPT start:app; } } server { listen 80; server_name <你的域名>; return 301 https://$server_name$request_uri; } 写好配置文件后编辑nginx主配置文件include 上一步写的配置文件 # Ubuntu apt-get安装后的Nginx配置文件在/etc/nginx/nginx.conf # 编辑/etc/nginx/nginx.conf找到在http {}里面最后添加osroom.conf # 可以用*通配符，前提是该目录下没有其他非nginx得.conf配置文件 http { ... include /home/work/project/*.conf; } 重启Nginx sudo /etc/init.d/nginx restart 访问 这个时候就可以通过域名（域名有解析到服务器的情况下）或IP访问OSROOM了"}, {"location": "app/deploy/#_1", "title": "部署方式", "text": ""}, {"location": "app/deploy/#nginxuwsgi", "title": "&nbsp;&nbsp;Nginx+uwsgi", "text": "部署Python Web的方式有好多中, 这里只是举例其中一种方式, 使用 Nginx + uwsgi 部署. 查阅资料,认为uwsgi性能还不错"}, {"location": "app/deploy/#uwsgi", "title": "uwsgi安装与配置", "text": ""}, {"location": "app/deploy/#_2", "title": "&nbsp;&nbsp;安装", "text": "pip 安装uwsgi(如果有建有python虚拟环境的请先进入虚拟环境再安装) pip install uwsgi"}, {"location": "app/deploy/#_3", "title": "&nbsp;&nbsp;配置", "text": "新建一个文件uwsgi.ini (建议在osroom根目录下)，写入如下配置: [uwsgi] # 使用uwsgi示范 # uwsgi 启动时所使用的地址与端口 socket = 127.0.0.1:6001 # 指向网站目录 chdir=/home/work/project/osroom # python 启动程序文件 wsgi-file = start.py # python 程序内用以启动的 application 变量名 callable = app master = true enable-threads = true # 启动的线程 processes = 4 vacuum = true die-on-term = true harakiri = 30 # 每一个工作进程都生成以后才加载应用程序 lazy = true disable-logging = true # 状态检测地址 stats = 127.0.0.1:9191 # pid pidfile = /tmp/osroom_uwsgi.pid 其他配置项可以参考uwsgi文档"}, {"location": "app/deploy/#_4", "title": "&nbsp;&nbsp;启动网站", "text": "注意：启动前确认osroom的数据库是否已配置正确 启动命令 # 如果uwsgi装在python虚拟环境，要先进入虚拟环境,再用如下命令启动 uwsgi /home/work/project/osroom/uwsgi.ini （附加）方法2：如果uwsgi安装在python虚拟环境中，又不想进入虚拟环境，可以这样启动 # venv_osroom是我的虚拟环境目录 /home/work/project/venv_osroom/bin/uwsgi /home/work/project/osroom/uwsgi.ini - 启动成功后: 由于uwsgi.ini配置的端口是6001，所以不能通过其他端口访问网站，需要下面 配置Nginx转发到6001端口 ... uwsgi socket 0 bound to TCP address 127.0.0.1:6001 fd 3 Python version: 3.5.2 (default, Nov 23 2017, 16:37:01) [GCC 5.4.0 20160609] Python main interpreter initialized at 0x1b9bcd0 python threads support enabled ... *** Operational MODE: preforking *** *** uWSGI is running in multiple interpreter mode *** spawned uWSGI master process (pid: 22449) spawned uWSGI worker 1 (pid: 22450, cores: 1) spawned uWSGI worker 2 (pid: 22451, cores: 1) spawned uWSGI worker 3 (pid: 22452, cores: 1) spawned uWSGI worker 4 (pid: 22453, cores: 1) ... worker 1 buried after 1 seconds worker 2 buried after 1 seconds worker 3 buried after 1 seconds worker 4 buried after 1 seconds ..."}, {"location": "app/deploy/#nginx", "title": "Nginx 安装与配置", "text": ""}, {"location": "app/deploy/#_5", "title": "&nbsp;&nbsp;安装", "text": "Ubuntu 14.04或Ubuntu 16.04使用apt-get直接安装如下： sudo apt-get install nginx 也可以使用wget下载，再安装，请自行Google查找教程哈"}, {"location": "app/deploy/#_6", "title": "&nbsp;&nbsp;配置文件", "text": "创建一个nginx配置文件osroom-naginx.conf，文件配置如下(这里只是示范，Nginx有许多配置项可以自己查找教程): upstream osroom-web { # 转发到6001端口 server 127.0.0.1:6001; } server { # 监听80端端口 listen 80; server_name <你的域名>; gzip on; gzip_comp_level 5; gzip_types application/json text/plain application/javascript application/x-javascript text/javascript text/xml text/css; open_log_file_cache max=1000 inactive=20s valid=1m min_uses=2; access_log /var/log/nginx/manage.vhost.access.log; error_log /var/log/nginx/manage.vhost.error.log; location / { include uwsgi_params; # upstream 的那个名称 uwsgi_pass osroom-web; # python虚拟环境目录路径 uwsgi_param UWSGI:_PYHOME /home/work/project/venv_osroom; # 项目目录路径 uwsgi_param UWSGI_CHDIR /home/work/project/osroom-demo;; uwsgi_param UWSGI_SCRIPT start:app; } } 如果需要配置ssl请加上监听443端口，配置好证书，然后80端口301重定向到443 https请求, 如下: (不需配置SSL证书的请直接跳过此步骤) upstream osroom-web { # 转发到6001端口 server 127.0.0.1:6001; } server { # 监听443端端口 listen 443; server_name <你的域名>; ssl on; root html; index index.html index.htm; # ssl证书文件 ssl_certificate /home/work/project/15212232323.pem; ssl_certificate_key /home/work/project/15212232323.key; ssl_session_timeout 5m; ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4; ssl_protocols TLSv1 TLSv1.1 TLSv1.2; ssl_prefer_server_ciphers on; gzip on; gzip_comp_level 5; gzip_types application/json text/plain application/javascript application/x-javascript text/javascript text/xml text/css; open_log_file_cache max=1000 inactive=20s valid=1m min_uses=2; access_log /var/log/nginx/manage.vhost.access.log; error_log /var/log/nginx/manage.vhost.error.log; location / { include uwsgi_params; # upstream 的那个名称 uwsgi_pass osroom-web; # python虚拟环境目录路径 uwsgi_param UWSGI:_PYHOME /home/work/project/venv_osroom; # 项目目录路径 uwsgi_param UWSGI_CHDIR /home/work/project/osroom-demo;; uwsgi_param UWSGI_SCRIPT start:app; } } server { listen 80; server_name <你的域名>; return 301 https://$server_name$request_uri; } 写好配置文件后编辑nginx主配置文件include 上一步写的配置文件 # Ubuntu apt-get安装后的Nginx配置文件在/etc/nginx/nginx.conf # 编辑/etc/nginx/nginx.conf找到在http {}里面最后添加osroom.conf # 可以用*通配符，前提是该目录下没有其他非nginx得.conf配置文件 http { ... include /home/work/project/*.conf; }"}, {"location": "app/deploy/#nginx_1", "title": "&nbsp;&nbsp;重启Nginx", "text": "sudo /etc/init.d/nginx restart"}, {"location": "app/deploy/#_7", "title": "&nbsp;&nbsp;访问", "text": "这个时候就可以通过域名（域名有解析到服务器的情况下）或IP访问OSROOM了"}, {"location": "app/install/", "title": "Install", "text": "环境要求 操作系统 OSROOM支持Linux中部署, Windows未测试过 建议使用Ubuntu >= 14.04版本; 测试过操作系统有Ubuntu 14.04, 16.04; Centos 6.5; 其他Linux系统还未测试 Pyhotn要求 Python 3.4以上版本, 比如Python 3.4, Python 3.5 Pyhton依赖包安装 创建Python虚拟环境(建议) 例如在在/home/work创建名为venv-osroom的虚拟环境 python -m venv /home/work/venv-osroom 或 python3 -m venv /home/work/venv-osroom 没有安装好python-venv请先安装, Ubuntu安装命令如下: sudo apt-get install python-venv 安装依赖包 进入虚拟环境 source /home/work/venv-osroom/bin/activate # 或 . /home/work/venv-osroom/bin/activate 进入osroom项目根目录 使用pip安装依赖包 pip install -r requirements.txt 安装需求包异常情况 情况1:类似以下错误信息 Command \"/xxx/venv-osroom/bin/python3 -u -c \"import setuptools, tokenize; __file__='/tmp/pip-install-erphi6km/xxx/setup.py'; f=getattr(tokenize, 'open', open)(__file__); code=f.read().replace('\\r\\n', '\\n');f.close(); exec(compile(code, __file__, 'exec'))\" install --record /tmp/pip-record-nhbhzs1a/install-record.txt --single-version-externally-managed --compile --install-headers /home/work/project/venv_osroom/include site/python3.5/xxxx\" failed with error code 1 in /tmp/pip-install-erphi6km/xxxx/ 那么请尝试安装python-dev Ubuntu系统: # 不一定需要版本号 sudo apt-get install python3.5-dev 其他使用yum安装工具的Linux发行部系统: # 不一定需要版本号 sudo yum install python3.5-devel 情况2:类似错误信息 Command \"python setup.py egg_info\" failed with error code 1 in ... 那么请尝试安装 setuptools pip install --upgrade setuptools 配置数据库 安装 请看 Mongodb安装文档 与 Redis安装文档 初始化配置 因为osroom源代码只把配置文件config.py 和 数据库配置文件db_config.py 的sample文件上传到git，所以请先复制修改名称 # 进入到apps/configs cp config_sample.py config.py cp db_config_sample.py db_config.py 编辑db_config.py, 在配置中对应位置填写好数据库用户名和密码 DB_CONFIG = { \"redis\": { \"password\": \"<Your password>\", \"host\": [ \"127.0.0.1\" ], \"port\": [ \"6379\" ] }, \"mongodb\": { \"mongo_web\": { \"password\": \"<Your password>\", \"username\": \"work\", \"config\": { \"fsync\": False, \"replica_set\": None }, \"host\": [ \"127.0.0.1:27017\" ], \"dbname\": \"osr_web\" }, \"mongo_user\": { \"password\": \"<Your password>\", \"username\": \"work\", \"config\": { \"fsync\": False, \"replica_set\": None }, \"host\": [ \"127.0.0.1:27017\" ], \"dbname\": \"osr_user\" }, \"mongo_sys\": { \"password\": \"<Your password>\", \"username\": \"work\", \"config\": { \"fsync\": False, \"replica_set\": None }, \"host\": [ \"127.0.0.1:27017\" ], \"dbname\": \"osr_sys\" } } } 初始化第一个用户 进入项目的Python虚拟环境 进入根目录运行start.py add_user 按如下操作和提示创建第一个用户 (venv_osroom) work@osroom:~/project/osroom$ python start.py add_user * [User] add Input username:root Input email:xiaopingwoo@163.com Input password(Password at least 8 characters): [Warning]: 密码至少8个字符！ 至少包含数字，字母，特殊字符中的任意两种 Input password(Password at least 8 characters): * Create root role... Create root user role successfully * Create root user... * Create a root user role successfully * Create the average user role... * Create a generic user role successfully The basic information is as follows Username: root Email: h*****irr@***.com User role: Root Password: #D****qw123 End 访问测试 使用自带的服务测试是否能够成功运行osroom（测试用, 实际部署产品不会使用该方式启动运行） 启动OSROOM 进入osroom项目目录 # 如果需要外部访问，--host 为0.0.0.0 , --port 指定已开放的端口,默认5000 python start.py runserver --host 127.0.0.1 --port 5000 - 打开浏览器访问 127.0.0.1:5000"}, {"location": "app/install/#_1", "title": "环境要求", "text": ""}, {"location": "app/install/#_2", "title": "&nbsp;&nbsp;操作系统", "text": "OSROOM支持Linux中部署, Windows未测试过 建议使用Ubuntu >= 14.04版本; 测试过操作系统有Ubuntu 14.04, 16.04; Centos 6.5; 其他Linux系统还未测试"}, {"location": "app/install/#pyhotn", "title": "&nbsp;&nbsp;Pyhotn要求", "text": "Python 3.4以上版本, 比如Python 3.4, Python 3.5"}, {"location": "app/install/#pyhton", "title": "Pyhton依赖包安装", "text": ""}, {"location": "app/install/#python", "title": "&nbsp;&nbsp;创建Python虚拟环境(建议)", "text": "例如在在/home/work创建名为venv-osroom的虚拟环境 python -m venv /home/work/venv-osroom 或 python3 -m venv /home/work/venv-osroom 没有安装好python-venv请先安装, Ubuntu安装命令如下: sudo apt-get install python-venv"}, {"location": "app/install/#_3", "title": "&nbsp;&nbsp;安装依赖包", "text": "进入虚拟环境 source /home/work/venv-osroom/bin/activate # 或 . /home/work/venv-osroom/bin/activate 进入osroom项目根目录 使用pip安装依赖包 pip install -r requirements.txt"}, {"location": "app/install/#_4", "title": "&nbsp;&nbsp;安装需求包异常情况", "text": "情况1:类似以下错误信息 Command \"/xxx/venv-osroom/bin/python3 -u -c \"import setuptools, tokenize; __file__='/tmp/pip-install-erphi6km/xxx/setup.py'; f=getattr(tokenize, 'open', open)(__file__); code=f.read().replace('\\r\\n', '\\n');f.close(); exec(compile(code, __file__, 'exec'))\" install --record /tmp/pip-record-nhbhzs1a/install-record.txt --single-version-externally-managed --compile --install-headers /home/work/project/venv_osroom/include site/python3.5/xxxx\" failed with error code 1 in /tmp/pip-install-erphi6km/xxxx/ 那么请尝试安装python-dev Ubuntu系统: # 不一定需要版本号 sudo apt-get install python3.5-dev 其他使用yum安装工具的Linux发行部系统: # 不一定需要版本号 sudo yum install python3.5-devel 情况2:类似错误信息 Command \"python setup.py egg_info\" failed with error code 1 in ... 那么请尝试安装 setuptools pip install --upgrade setuptools"}, {"location": "app/install/#_5", "title": "配置数据库", "text": ""}, {"location": "app/install/#_6", "title": "&nbsp;&nbsp;安装", "text": "请看 Mongodb安装文档 与 Redis安装文档"}, {"location": "app/install/#_7", "title": "&nbsp;&nbsp;初始化配置", "text": "因为osroom源代码只把配置文件config.py 和 数据库配置文件db_config.py 的sample文件上传到git，所以请先复制修改名称 # 进入到apps/configs cp config_sample.py config.py cp db_config_sample.py db_config.py 编辑db_config.py, 在配置中对应位置填写好数据库用户名和密码 DB_CONFIG = { \"redis\": { \"password\": \"<Your password>\", \"host\": [ \"127.0.0.1\" ], \"port\": [ \"6379\" ] }, \"mongodb\": { \"mongo_web\": { \"password\": \"<Your password>\", \"username\": \"work\", \"config\": { \"fsync\": False, \"replica_set\": None }, \"host\": [ \"127.0.0.1:27017\" ], \"dbname\": \"osr_web\" }, \"mongo_user\": { \"password\": \"<Your password>\", \"username\": \"work\", \"config\": { \"fsync\": False, \"replica_set\": None }, \"host\": [ \"127.0.0.1:27017\" ], \"dbname\": \"osr_user\" }, \"mongo_sys\": { \"password\": \"<Your password>\", \"username\": \"work\", \"config\": { \"fsync\": False, \"replica_set\": None }, \"host\": [ \"127.0.0.1:27017\" ], \"dbname\": \"osr_sys\" } } }"}, {"location": "app/install/#_8", "title": "初始化第一个用户", "text": "进入项目的Python虚拟环境 进入根目录运行start.py add_user 按如下操作和提示创建第一个用户 (venv_osroom) work@osroom:~/project/osroom$ python start.py add_user * [User] add Input username:root Input email:xiaopingwoo@163.com Input password(Password at least 8 characters): [Warning]: 密码至少8个字符！ 至少包含数字，字母，特殊字符中的任意两种 Input password(Password at least 8 characters): * Create root role... Create root user role successfully * Create root user... * Create a root user role successfully * Create the average user role... * Create a generic user role successfully The basic information is as follows Username: root Email: h*****irr@***.com User role: Root Password: #D****qw123 End"}, {"location": "app/install/#_9", "title": "访问测试", "text": "使用自带的服务测试是否能够成功运行osroom（测试用, 实际部署产品不会使用该方式启动运行）"}, {"location": "app/install/#osroom", "title": "&nbsp;&nbsp;启动OSROOM", "text": "进入osroom项目目录 # 如果需要外部访问，--host 为0.0.0.0 , --port 指定已开放的端口,默认5000 python start.py runserver --host 127.0.0.1 --port 5000 - 打开浏览器访问 127.0.0.1:5000"}, {"location": "app/instructions/", "title": "Instructions", "text": "osroom使用说明 配置主题 osroom启动可以访问后，看的的网站首页(\"/\")可能是有些凌乱的，因为还没有配置好主题需要的内容 使用osroom创建的第一个用户与密码登录（安装文档中有写），进入Admin配置 如果主题不提供登录入口可以直接访问http://your-domain/osr-admin/sign-in 页面登录 然后进入Admin管理端: http://your-domain/osr-admin 进入[主题外观]>[主题]查看当前启用主题的配置文档，安装文档配置好主题就可以了 设置>参数配置 系统邮件 - 如果你有邮箱系统可以进入[设置]>[参数配置]，找到email设置(可直接搜索), 配置好email账号密码，用于发送系统邮件 其他配置可以自行查看了解"}, {"location": "app/instructions/#osroom", "title": "osroom使用说明", "text": ""}, {"location": "app/instructions/#_1", "title": "配置主题", "text": "osroom启动可以访问后，看的的网站首页(\"/\")可能是有些凌乱的，因为还没有配置好主题需要的内容 使用osroom创建的第一个用户与密码登录（安装文档中有写），进入Admin配置 如果主题不提供登录入口可以直接访问http://your-domain/osr-admin/sign-in 页面登录 然后进入Admin管理端: http://your-domain/osr-admin 进入[主题外观]>[主题]查看当前启用主题的配置文档，安装文档配置好主题就可以了"}, {"location": "app/instructions/#_2", "title": "设置&gt;参数配置", "text": "系统邮件 - 如果你有邮箱系统可以进入[设置]>[参数配置]，找到email设置(可直接搜索), 配置好email账号密码，用于发送系统邮件 其他配置可以自行查看了解"}, {"location": "app/mongodb/", "title": "Mongodb", "text": "安装mongodb Ubuntu16.04 apt-get安装Mongodb 3.4 或3.6版本 添加安装源 下面版本源请选择其中一个版本 添加3.4版本源 添加public key： sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 0C49F3730359A14518585931BC711F9BA15703C6 添加包源： echo \"deb [ arch=amd64,arm64 ] http://repo.mongodb.org/apt/ubuntu xenial/mongodb-org/3.4 multiverse\" | sudo tee /etc/apt/sources.list.d/mongodb-org-3.4.list 添加3.6版本源 添加public key： sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 2930ADAE8CAF5059EE73BB4B58712A2291FA4AD5 添加包源： echo \"deb [ arch=amd64 ] https://repo.mongodb.org/apt/ubuntu precise/mongodb-org/3.6 multiverse\" | sudo tee /etc/apt/sources.list.d/mongodb-org-3.6.list 更新apt-get 更新 sudo apt-get update 安装 安装 sudo apt-get install -y mongodb-org 详情：https://docs.mongodb.com/manual/tutorial/install-mongodb-on-ubuntu/ 使用 进入数据库 数据库启动后，默认配置下在命令行输入mongo就可以进入数据库管理 (venv3) work@ubuntu16:~/project/osroom$ mongo MongoDB shell version v3.4.10 connecting to: mongodb://127.0.0.1:27017 MongoDB server version: 3.4.10 创建数据库 use test_db就能创建一个数据库test_db, 之后需要创建一个collection, 否则会被自动删除 > use test_db > db.createCollection(\"test_coll\") 创建用户 先给mongodb自带的collection admin 创建一个用户 > use admin > db.createUser( { user: \"dba\", pwd: \"123456\", roles: [ { role: \"userAdminAnyDatabase\", db: \"admin\" }, { role: \"dbAdminAnyDatabase\", db: \"admin\" }] } ) 为自己创建的库新建用户 > use test > db.createCollection(\"test_coll\") > db.createUser( { user:'work', pwd:'123456', roles:[{role:'readWrite', db:'test'}] }) 更新一个库的用户方式如下 > use test > db.updateUser( \"dba\", { roles : [ { role: \"dbAdminAnyDatabase\", db: \"admin\" }, { role: \"userAdminAnyDatabase\", db: \"admin\" }] } ) 数据库个角色role说明 Built-In Roles(内置角色) 1. 数据库用户角色：read、readWrite; 2. 数据库管理角色：dbAdmin、dbOwner、userAdmin； 3. 集群管理角色：clusterAdmin、clusterManager、clusterMonitor、hostManager； 4. 备份恢复角色：backup、restore； 5. 所有数据库角色：readAnyDatabase、readWriteAnyDatabase、userAdminAnyDatabase、dbAdminAnyDatabase 6. 超级用户角色：root // 这里还有几个角色间接或直接提供了系统超级用户的访问（dbOwner 、userAdmin、userAdminAnyDatabase） 7. 内部角色：__system 具体 Read：允许用户读取指定数据库 readWrite：允许用户读写指定数据库 dbAdmin：允许用户在指定数据库中执行管理函数，如索引创建、删除，查看统计或访问system.profile userAdmin：允许用户向system.users集合写入，可以找指定数据库里创建、删除和管理用户 clusterAdmin：只在admin数据库中可用，赋予用户所有分片和复制集相关函数的管理权限。 readAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的读权限 readWriteAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的读写权限 userAdminAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的userAdmin权限 dbAdminAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的dbAdmin权限。 root：只在admin数据库中可用。超级账号，超级权限 OSROOM需要的库 使用osroom系统，请先创建三个数据库，库名自定义(建议使用库名称为osr_web, osr_user, osr_sys) 注意mongodb的每个库都需要创建一个用户/密码(可以全部一样的用户名和密码) 创建后修改mongo配置文件mongodb.conf 开启安全验证(用户验证)"}, {"location": "app/mongodb/#mongodb", "title": "安装mongodb", "text": "Ubuntu16.04 apt-get安装Mongodb 3.4 或3.6版本"}, {"location": "app/mongodb/#_1", "title": "&nbsp;&nbsp;添加安装源", "text": "下面版本源请选择其中一个版本 添加3.4版本源 添加public key： sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 0C49F3730359A14518585931BC711F9BA15703C6 添加包源： echo \"deb [ arch=amd64,arm64 ] http://repo.mongodb.org/apt/ubuntu xenial/mongodb-org/3.4 multiverse\" | sudo tee /etc/apt/sources.list.d/mongodb-org-3.4.list 添加3.6版本源 添加public key： sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 2930ADAE8CAF5059EE73BB4B58712A2291FA4AD5 添加包源： echo \"deb [ arch=amd64 ] https://repo.mongodb.org/apt/ubuntu precise/mongodb-org/3.6 multiverse\" | sudo tee /etc/apt/sources.list.d/mongodb-org-3.6.list"}, {"location": "app/mongodb/#apt-get", "title": "&nbsp;&nbsp;更新apt-get", "text": "更新 sudo apt-get update"}, {"location": "app/mongodb/#_2", "title": "&nbsp;&nbsp;安装", "text": "安装 sudo apt-get install -y mongodb-org 详情：https://docs.mongodb.com/manual/tutorial/install-mongodb-on-ubuntu/"}, {"location": "app/mongodb/#_3", "title": "使用", "text": ""}, {"location": "app/mongodb/#_4", "title": "&nbsp;&nbsp;进入数据库", "text": "数据库启动后，默认配置下在命令行输入mongo就可以进入数据库管理 (venv3) work@ubuntu16:~/project/osroom$ mongo MongoDB shell version v3.4.10 connecting to: mongodb://127.0.0.1:27017 MongoDB server version: 3.4.10"}, {"location": "app/mongodb/#_5", "title": "&nbsp;&nbsp;创建数据库", "text": "use test_db就能创建一个数据库test_db, 之后需要创建一个collection, 否则会被自动删除 > use test_db > db.createCollection(\"test_coll\")"}, {"location": "app/mongodb/#_6", "title": "&nbsp;&nbsp;创建用户", "text": "先给mongodb自带的collection admin 创建一个用户 > use admin > db.createUser( { user: \"dba\", pwd: \"123456\", roles: [ { role: \"userAdminAnyDatabase\", db: \"admin\" }, { role: \"dbAdminAnyDatabase\", db: \"admin\" }] } ) 为自己创建的库新建用户 > use test > db.createCollection(\"test_coll\") > db.createUser( { user:'work', pwd:'123456', roles:[{role:'readWrite', db:'test'}] }) 更新一个库的用户方式如下 > use test > db.updateUser( \"dba\", { roles : [ { role: \"dbAdminAnyDatabase\", db: \"admin\" }, { role: \"userAdminAnyDatabase\", db: \"admin\" }] } )"}, {"location": "app/mongodb/#role", "title": "&nbsp;&nbsp;数据库个角色role说明", "text": "Built-In Roles(内置角色) 1. 数据库用户角色：read、readWrite; 2. 数据库管理角色：dbAdmin、dbOwner、userAdmin； 3. 集群管理角色：clusterAdmin、clusterManager、clusterMonitor、hostManager； 4. 备份恢复角色：backup、restore； 5. 所有数据库角色：readAnyDatabase、readWriteAnyDatabase、userAdminAnyDatabase、dbAdminAnyDatabase 6. 超级用户角色：root // 这里还有几个角色间接或直接提供了系统超级用户的访问（dbOwner 、userAdmin、userAdminAnyDatabase） 7. 内部角色：__system 具体 Read：允许用户读取指定数据库 readWrite：允许用户读写指定数据库 dbAdmin：允许用户在指定数据库中执行管理函数，如索引创建、删除，查看统计或访问system.profile userAdmin：允许用户向system.users集合写入，可以找指定数据库里创建、删除和管理用户 clusterAdmin：只在admin数据库中可用，赋予用户所有分片和复制集相关函数的管理权限。 readAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的读权限 readWriteAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的读写权限 userAdminAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的userAdmin权限 dbAdminAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的dbAdmin权限。 root：只在admin数据库中可用。超级账号，超级权限"}, {"location": "app/mongodb/#osroom", "title": "&nbsp;&nbsp;OSROOM需要的库", "text": "使用osroom系统，请先创建三个数据库，库名自定义(建议使用库名称为osr_web, osr_user, osr_sys) 注意mongodb的每个库都需要创建一个用户/密码(可以全部一样的用户名和密码) 创建后修改mongo配置文件mongodb.conf 开启安全验证(用户验证)"}, {"location": "app/redis/", "title": "Redis", "text": "安装redis 安装 Ubuntu 使用apt-get安装 sudo apt-get install redis-server 配置密码 编辑/etc/redis.conf配置密码 将 #requirepass foobared 修改为 requirepass your-password 重启redis sudo /etc/init.d/redis-server restart"}, {"location": "app/redis/#redis", "title": "安装redis", "text": ""}, {"location": "app/redis/#_1", "title": "&nbsp;&nbsp;安装", "text": "Ubuntu 使用apt-get安装 sudo apt-get install redis-server"}, {"location": "app/redis/#_2", "title": "&nbsp;&nbsp;配置密码", "text": "编辑/etc/redis.conf配置密码 将 #requirepass foobared 修改为 requirepass your-password"}, {"location": "app/redis/#redis_1", "title": "&nbsp;&nbsp;重启redis", "text": "sudo /etc/init.d/redis-server restart"}, {"location": "development/structure/", "title": "Structure", "text": "代码结构 osroom/ . ├── apps # 应用程序主目录 ├── LICENSE　# 版权说明 ├── logs　# 日志目录 ├── osr-tool.py　# 离线工具脚本 ├── README.md ├── requirements.txt　# python需求包文件 ├── start.py # 系统启动目录 ├── test └── tools　# 离线工具脚本 osroom/apps/ . ├── admin_pages # 管理端静态文件(html,js,css...) ├── app.py # 系统初始化程序 ├── configs # 系统配置文件目录 ├── core　# 核心程序目录 ├── init_core_module.py # 初始化核心模块脚本 ├── __init__.py ├── modules　# 功能模块主目录 ├── plugins　# 插件模块主目录(安装的插件会在此目录) ├── routing　# 路由控制模块目录 ├── static # 其他系统必须静态文件目录 ├── sys_startup_info.py　# 系统启动时打印信息脚本 ├── themes　# 主题主目录(安装的主题会在此目录) ├── transations　# 各语言翻译目录 └── utils　# 通用程序 osroom/apps/configs . ├── config.py # 配置文件,此文件内容可以在系统管理的控制(未上传到代码库) ├── config_sample.py　# 配置文件config.py的样例 ├── db_config.py # 数据库配置文件(未上传到代码库) ├── db_config_sample.py　# 配置文件db_config.py的样例 ├── __init__.py ├── mdb_collection.py ├── __pycache__ └── sys_config.py # 一些固定敏感的配置"}, {"location": "development/structure/#_1", "title": "代码结构", "text": ""}, {"location": "development/structure/#osroom", "title": "osroom/", "text": ". ├── apps # 应用程序主目录 ├── LICENSE　# 版权说明 ├── logs　# 日志目录 ├── osr-tool.py　# 离线工具脚本 ├── README.md ├── requirements.txt　# python需求包文件 ├── start.py # 系统启动目录 ├── test └── tools　# 离线工具脚本"}, {"location": "development/structure/#osroomapps", "title": "osroom/apps/", "text": ". ├── admin_pages # 管理端静态文件(html,js,css...) ├── app.py # 系统初始化程序 ├── configs # 系统配置文件目录 ├── core　# 核心程序目录 ├── init_core_module.py # 初始化核心模块脚本 ├── __init__.py ├── modules　# 功能模块主目录 ├── plugins　# 插件模块主目录(安装的插件会在此目录) ├── routing　# 路由控制模块目录 ├── static # 其他系统必须静态文件目录 ├── sys_startup_info.py　# 系统启动时打印信息脚本 ├── themes　# 主题主目录(安装的主题会在此目录) ├── transations　# 各语言翻译目录 └── utils　# 通用程序"}, {"location": "development/structure/#osroomappsconfigs", "title": "&nbsp;&nbsp;osroom/apps/configs", "text": ". ├── config.py # 配置文件,此文件内容可以在系统管理的控制(未上传到代码库) ├── config_sample.py　# 配置文件config.py的样例 ├── db_config.py # 数据库配置文件(未上传到代码库) ├── db_config_sample.py　# 配置文件db_config.py的样例 ├── __init__.py ├── mdb_collection.py ├── __pycache__ └── sys_config.py # 一些固定敏感的配置"}, {"location": "plugin/", "title": "Home", "text": "编写中..."}, {"location": "plugin/#_1", "title": "编写中...", "text": ""}, {"location": "theme/", "title": "Home", "text": "编写中..."}, {"location": "theme/#_1", "title": "编写中...", "text": ""}]}